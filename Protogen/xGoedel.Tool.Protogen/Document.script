#script 1.0
#license MITLicense
#xclass Goedel.Tool.ProtoGen Generate
#% public bool MakeTop = false;
#%  public Generate (TextWriter Output) : base (Output) {}
#!output GenerateHTML HTML html
#!output GenerateXML2RFC XML2RFC xml
#!output GenerateCS	CS cs
#!output GenerateJava Java java
#!output GenerateC C c
#!output 
#% string StartP , EndP ;
#% string StartDD , EndDD ;
#% string StartParamList , EndParamList ;
#% public string StartParam , MidParam , EndParam, EndParamBlock;
#% string StartSection1 , MidSection1 , EndSection1;
#% string StartSection2 , MidSection2 , EndSection2;
#% string StartSection3 , MidSection3 , EndSection3;
#% string StartSection4 , MidSection4 , EndSection4;
#% string CurrentPrefix;
#% string StartTransaction, MidTransaction, EndTransaction;
#%
#%
#% string [,] Sections; 
#% bool AddComments = true;


#method GenerateRFC2XML ProtoStruct ProtoStruct
#% ProtoStruct.Complete ();
#%  StartP = "<t>"; EndP = "</t>";
#%  StartDD = "<t>"; EndDD = "</t>";
#%  StartParamList = "<t> <list style=\"hanging\" hangIndent=\"6\">";
#%  EndParamList = "</list></t>";
#%  StartParam = "<t hangText=\""; MidParam = " : "; EndParam = "\"><vspace />";EndParamBlock = "";
#%  StartSection1 = "<section title=\""; MidSection1 = "\">"; EndSection1 = "</section>";
#%  StartSection2 = "<section title=\""; MidSection2 = "\">"; EndSection2 = "</section>";
#%  StartSection3 = "<section title=\""; MidSection3 = "\">"; EndSection3 = "</section>";
#call GenerateBody ProtoStruct
#end method



#method GenerateHTML ProtoStruct ProtoStruct
#% ProtoStruct.Complete ();
#%  StartP = "<p>"; EndP = "</p>";
#%  StartDD = "<dd>"; EndDD = "</dd>";
#%  StartParamList = "<dl>";
#%  EndParamList = "</dl>";
#%  StartParam = "<dt>"; MidParam = " :</dt><dd>"; EndParam = "<p>"; EndParamBlock = "</dd>";
#%  StartSection1 = "<h1>"; MidSection1 = "</h1>"; EndSection1 = "";
#%  StartSection2 = "<h2>"; MidSection2 = "</h2>"; EndSection2 = "";
#%  StartSection3 = "<h3>"; MidSection3 = "</h3>"; EndSection3 = "";
#%  StartTransaction = "<ul><li>"; MidTransaction = "</li><li>"; EndTransaction="</li></ul>";
<!-- <!DOCTYPE html>
<html>
<head>
<title></title>
</head>
<body> -->
#call GenerateBody ProtoStruct
<!-- </body>
</html> -->
#end method


#method GenerateMD ProtoStruct ProtoStruct
#% ProtoStruct.Complete ();
#%  StartP = ""; EndP = "\n";
#%  StartDD = "<dd>"; EndDD = "";
#%  StartParamList = "<dl>\n";
#%  EndParamList = "</dl>\n";
#!  StartParam = "<dt>"; MidParam = ": \n<dd>"; EndParam = "\n"; EndParamBlock = "";
#%  StartParam = "<dt>"; MidParam = ": "; EndParam = "\n"; EndParamBlock = "";
#%  StartSection1 = "#"; MidSection1 = "\n"; EndSection1 = "";
#%  StartSection2 = "##"; MidSection2 = "\n"; EndSection2 = "";
#%  StartSection3 = "###"; MidSection3 = "\n"; EndSection3 = "";
#%  StartSection4 = "####"; MidSection4 = "\n"; EndSection4 = "";
#%  StartTransaction = "<ul>\n<li>"; MidTransaction = "\n<li>"; EndTransaction="\n</ul>";
#% Sections = new string [,] {
#%    {StartSection1, MidSection1, EndSection1},
#%    {StartSection2, MidSection2, EndSection2},
#%    {StartSection3, MidSection3, EndSection3},
#%    {StartSection4, MidSection4, EndSection4}};
#% AddComments = false;


#foreach (var Entry in ProtoStruct.Top)
#% Entry.Normalize ();
#end foreach
#foreach (var Entry in ProtoStruct.Top)
#switchcast ProtoStructType Entry
#casecast Protocol Protocol
#foreach (var Item in Protocol.Entries)
#switchcast ProtoStructType Item
#casecast Section Section
#call SectionHeading Section
#casecast Service Service
#call MakeService Service
#casecast Message Message
#call MakeMessage Message
#casecast Structure Structure
#call MakeStructure Structure
#casecast Transaction Transaction
#call MakeTransaction Transaction
#casecast Success Success
#call MakeSuccess Success
#casecast Warning Warning
#call MakeWarning Warning
#casecast Error Error
#call MakeError Error
#end switchcast
#end foreach
#end switchcast
#end foreach
#end method



#method SectionHeading Section Section
#% var Level = Section.Level;
#% StartSection (Level, Section.Title);

#call DescriptionList Section.Entries
#call EndSection Level
#end method

#method2 StartSection int Level string Title
#call StartSection Level
#{Title}#!
#call MidSection Level
#end method2

#method StartSection int Level
#{Sections[Level-1,0]}#!
#end method

#method MidSection int Level
#{Sections[Level-1,1]}#!
#end method

#method EndSection int Level
#{Sections[Level-1,2]}#!
#end method

#method MakeService Service Service
#{StartParam}SRV Prefix#{MidParam}#{Service.Discovery}#{EndParam}
#{StartParam}HTTP Well Known Service Prefix#{MidParam}/.well-known/#{Service.WellKnown}#{EndParam}
#{EndParamBlock}

#call DescriptionList Service.Entries
#end method

#method MakeMessage Message Message
#call StartSection 3
Message: #{Message.Id}#!
#call MidSection 3

#call ParameterList Message.Entries
#call EndSection 3
#end method

#method MakeStructure Structure Structure
#call StartSection 3
Structure: #{Structure.Id}
#call MidSection 3
#call ParameterList Structure.Entries
#call EndSection 3
#end method

#method MakeTransaction Transaction Transaction
#call StartSection 2
Transaction: #{Transaction.Id}

#{StartParamList}#!
#{StartParam}Request#{MidParam} #{Transaction.Request}#{EndParam}#{EndParamBlock}#!
#{StartParam}Response#{MidParam} #{Transaction.Response}#{EndParam}#{EndParamBlock}#!
#{EndParamList}#!
#call MidSection 2
#call DescriptionList Transaction.Entries
#call EndSection 2
#end method

#method MakeSuccess Success Success
[#{Success.Code}] #{Success.Id}
#call DescriptionListDD Success.Entries
#end method

#method MakeWarning Warning Warning
[#{Warning.Code}] #{Warning.Id}
#call DescriptionListDD Warning.Entries
#end method

#method MakeError Error Error
[#{Error.Code}] #{Error.Id}
#call DescriptionListDD Error.Entries
#end method

#method Comment string Text
#if (AddComments)
<!-- #{Text} -->

#end if
#end method

#method GenerateBody ProtoStruct ProtoStruct
#foreach (var Item in ProtoStruct.Top)
#% Item.Normalize ();
#switchcast ProtoStructType Item
#casecast Protocol Protocol
#{StartSection1}#{Protocol.Id}#{MidSection1}
#% Comment ("Protocol description here");
#call DescriptionList Protocol.Entries
#{StartSection2}#{Protocol.Id} Transactions#{MidSection2}
#% Comment ("List of Transactions here as H3 entries");
#foreach (var Entry in Protocol.Entries)
#switchcast ProtoStructType Entry
#casecast Transaction Transaction
#{StartSection3}Transaction: #{Transaction.Id}#{MidSection3}
#{StartTransaction}Request: #{Transaction.Request}
#{MidTransaction}Response: #{Transaction.Response}
#{EndTransaction}#!
#call DescriptionList Transaction.Entries
#{EndSection3}#!
#end switchcast
#end foreach
#{EndSection2}#!
#{StartSection2}#{Protocol.Id} Messages#{MidSection2}
#% Comment ("List of Messages here as H3 entries");
#foreach (var Entry in Protocol.Entries)
#switchcast ProtoStructType Entry
#casecast Message Message
#if (!Message.IsAbstract)
#{StartSection3}Message: #{Message.Id}#{MidSection3}
#call DescriptionList Message.Entries
#call ParameterList Message.AllEntries
#{EndSection3}#!
#end if
#end switchcast
#end foreach
#{EndSection2}#!
#{StartSection2}#{Protocol.Id} Structures#{MidSection2}
#% Comment ("List of Structures here as H3 entries");
#foreach (var Entry in Protocol.Entries)
#switchcast ProtoStructType Entry
#casecast Structure Structure
#{StartSection3}Structure: #{Structure.Id}#{MidSection3}
#call DescriptionList Structure.Entries
#call ParameterList Structure.AllEntries
#{EndSection3}#!
#end switchcast
#end foreach
#{EndSection2}#!
#{EndSection1}#!
#end switchcast
#end foreach
#end method

#block DescriptionListSkip
#% public void DescriptionListSkip  (List<_Choice> Entries) {
#% bool Skip = true;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Description Description
#if Skip
#% Skip = false;
#else
#{StartP}#!
#end if
#foreach (string s in Description.Text1)
#{s}
#end foreach
#{EndP}#!
#end switchcast
#end foreach
#if Skip
[TBS]#{EndP}
#end if
#% }
#end block


#block DescriptionList
#% public void DescriptionList  (List<_Choice> Entries) {
#foreach (var Entry in Entries)
#call Description Entry
#end foreach
#% }
#end block


#method Description _Choice TEntry
#switchcast ProtoStructType TEntry
#casecast Description Description
#{StartP}#!
#foreach (string s in Description.Text1)
#{s}
#end foreach
#{EndP}#!
#end switchcast
#end method

#block DescriptionListDD
#% public void DescriptionListDD  (List<_Choice> Entries) {
#foreach (var Entry in Entries)
#call DescriptionDD Entry
#end foreach
#% }
#end block

#method DescriptionDD _Choice TEntry
#switchcast ProtoStructType TEntry
#casecast Description Description
#{StartDD}#!
#foreach (string s in Description.Text1)
#{s}
#end foreach
#{EndDD}#!
#end switchcast
#end method



#block Indentify
#% public void Indentify (int indent) {
#for (int i=0; i<indent; i++)
	#!
#end for
#% }
#end block

#method TMessage _Choice TEntry
#switchcast ProtoStructType TEntry
#casecast Request Mess
#{StartP}Request :#{Mess.Ref} #{EndP}
#casecast Response Mess
#{StartP}Response :#{Mess.Ref}#{EndP}
#end switchcast
#end method


#block ParameterList
#% public void ParameterList  (List<_Choice> Entries) {
#% bool NullList = true;
#foreach (_Choice Entry in Entries)
#% List<_Choice> Options = null;
#% string Type = null; 
#% string Name = null;
#switchcast ProtoStructType Entry
#casecast Inherits Inherits
#{StartParamList}#!
#{StartParam}Inherits#{MidParam} #{Inherits.Ref}#{EndParam}#{EndParamBlock}#!
#{EndParamList}
#casecast Description Desc
#call Description Desc
#casecast Boolean Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "Boolean";
#casecast Integer Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "Integer";
#casecast Binary Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "Binary";
#casecast Label Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "Label";
#casecast Name Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "Name";
#casecast String Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "String";
#casecast URI Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "URI";
#casecast DateTime Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = "DateTime";
#casecast Struct Param
#% Name = Param.Id.ToString (); Options = Param.Options ; Type = Param.Type.ToString ();
#end switchcast
#if Options != null
#if NullList
#{StartParamList}#!
#% NullList = false;
#end if
#{StartParam}#{Name}#{MidParam}#{Type}#!
#call OptionList Options
#end if
#end foreach
#if !NullList
#{EndParamList}#!
#else
[No fields]

#end if
#% }
#end block



#block OptionList
#% public void OptionList  (List<_Choice> Entries) {
#% bool PRequired = false, PMultiple = false;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Required null
#% PRequired = true;
#casecast Multiple null
#% PMultiple = true;
#casecast Default null
#end switchcast
#end foreach
 #!
#if PMultiple
#if PRequired
[1..Many]#!
#else
[0..Many]#!
#end if
#else
#if PRequired
(Required)#!
#else
(Optional)#!
#end if
#end if
#{EndParam}#!
#call DescriptionListDD Entries
#{EndParamBlock}#!
#% }
#end block
#end xclass