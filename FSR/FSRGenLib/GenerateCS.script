#script 1.0
#license MITLicense
#xclass FSRGen Generate
#method GenerateCS FSRStruct FSRStruct
#% FSRStruct.Complete ();

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

#foreach (_Choice Item in FSRStruct.Top)
#switchcast FSRStructType Item
#casecast FSR FSR
#% bool first = true;

// #{FSR.Id}
namespace #{FSR.Id} {

	// Prototypes for the actions. These must be implemented in 
	// the plus class

	/*
	public partial class #{FSR.Prefix} {
#foreach (Action Action in FSR.Actions)
        public virtual void #{Action.Tag} (char c) {
			}
#end foreach
		}
	*/

	public partial class #{FSR.Prefix} {

		public delegate void Action (int c);

		public enum State {
#foreach (State State in FSR.States)
#if (first) 
#% first = false;
#else 
,
#end if
            #{State.Id} = #{State.Index}#!
#end foreach

			};

		public enum Token {
			INVALID = -1#!
#foreach (Token Token in FSR.Tokens)
,
            #{Token.Tag} = #{Token.Index}#!
#end foreach

			};



		//##define #{FSR.Id}_Action__Count  #{FSR.Actions.Count}
		//##define #{FSR.Id}_Token__Count  #{FSR.Tokens.Count}
		//##define #{FSR.Id}_State__Count  #{FSR.States.Count}


		static byte [] Character_Mapping   =  new byte [] {
			#!
#for (int j = 0; j < FSR.MaxChar; j++)
#if (j >0)
, #!
#if ((j%16) == 0)

			#!
#end if
#end if
#{FSR.MappingTable[j]} #!
#end for
  };

		static short [,]  Compressed_Transitions  = new short [,]  {
#for (int i = 0; i < FSR.States.Count; i++) 
#if (i >0)
,
#end if
			{#!
#for (int j = 0; j < FSR.MaxMap; j++)
#if (j >0)
, #!
#if ((j%16) == 0)

     #!
#end if
#end if
#{FSR.CompressedTable[i,j]} #!
#end for
}#!
#end for

		};


		static Token [] Tokens = new Token [] {
#% bool comma = false;
#foreach (var State in FSR.States)
#if (comma)
,
#end if
#% comma = true;
			Token.#{State.Token}#!
#end foreach

			};

        public Action[] Actions;
        public void Init () {
            Actions = new Action[] {
#%  comma = false;
#foreach (var State in FSR.States)
#if (comma)
,
#end if
#% comma = true;
				#{State.Action}#!
#end foreach

				};
			}
		}
	}

#end switchcast
#end foreach
#end method


#end xclass