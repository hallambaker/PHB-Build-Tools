#script 1.0
#license MITLicense
#using Goedel.Utilities
#xclass Goedel.Tool.ProtoGen Generate
#!% bool OldConstructors = false;
#% Separator Separator = new Separator (",");
#!
#!   Code Generator (C#)
#!
#!  

#method GenerateCS ProtoStruct ProtoStruct
#% ProtoStruct.Complete ();
#% var GenerateTime =System.DateTime.UtcNow;
#% Boilerplate.MITLicense (_Output, "//  ", "Copyright (c) " + "2016", ".");
#% Boilerplate.Header (_Output, "//  ", GenerateTime);
#% string Namespace;

using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Goedel.Protocol;
using Goedel.Utilities;

##pragma warning disable IDE0028 // Don't warn collection initialization can be simplified.
##pragma warning disable IDE0079
##pragma warning disable IDE1006
##pragma warning disable CA2255 // The 'ModuleInitializer' attribute should not be used in libraries

#foreach (var Item in ProtoStruct.Top)
#switchcast ProtoStructType Item
#casecast Protocol Protocol
#foreach (var Entry in Protocol.Entries)
#switchcast ProtoStructType Entry
#casecast Using Using
using #{Using.Id};
#end switchcast
#end foreach


#% Namespace = Protocol.Namespace.ToString ();
namespace #{Namespace};


#% DescriptionListC (Protocol.Entries, 1);
public abstract partial class #{Protocol.Prefix} #{Protocol.ThisInherits} {
#% CurrentPrefix = Protocol.Prefix.ToString ();

	/// <summary>
    /// Tag identifying this class
    /// </summary>
	public override string _Tag =>__Tag;

	/// <summary>
    /// Tag identifying this class
    /// </summary>
	public new const string __Tag = "#{Protocol.Prefix}";

	/// <summary>
    /// Dictionary mapping types to bindings
    /// </summary>
	public static Dictionary<System.Type, Binding> _BindingDictionary=> _bindingDictionary;
	static Dictionary<System.Type, Binding> _bindingDictionary = 
			new () {
#% Separator.IsFirst = true;
#foreach (_Choice Entry in Protocol.Structures)
#{Separator}
	    {typeof(#{Entry.XID ?? Entry.ID}), #{Entry.XID ?? Entry.ID}._binding}#!
#end foreach

		};

	///<summary>Variable used to force static initialization</summary> 
	public static bool _Initialized => true;

	static #{CurrentPrefix}() {
		_Initialize();
		}

    internal static void _Initialize() {
		AddDictionary(ref _bindingDictionary);
		}

	}



// Service Dispatch Classes
#foreach (_Choice Entry in Protocol.Entries)
#switchcast ProtoStructType Entry
#casecast Service Service


/// <summary>
/// The new base class for the client and service side APIs.
/// </summary>		
public abstract partial class #{Service.Id} : Goedel.Protocol.JpcInterface {
		
    /// <summary>
    /// Well Known service identifier.
    /// </summary>
	public const string WellKnown = "#{Service.WellKnown}";

	///<inheritdoc/>
	public override string GetWellKnown => WellKnown;

    /// <summary>
    /// Well Known service identifier.
    /// </summary>
	public const string Discovery = "#{Service.Discovery}";

	///<inheritdoc/>
	public override string GetDiscovery => Discovery;

	///<inheritdoc/>
	public override Dictionary<string, Type>  GetTagDictionary => _TagDictionary;
		
	static Dictionary<string, Type> _TagDictionary = new () {#!
#% var separator = new Separator (",");
#foreach (_Choice Entry2 in Protocol.Entries)
#switchcast ProtoStructType Entry2
#casecast Transaction Transaction
#{separator.ToString()}
				{"#{Transaction.Id}", typeof(#{Transaction.Request})}#!
#end switchcast
#end foreach

		};

    ///<inheritdoc/>
	public override Goedel.Protocol.JsonObject Dispatch(
			string token,
			Goedel.Protocol.JsonObject request,
			IJpcSession session) => token switch {
#foreach (_Choice Entry2 in Protocol.Entries)
#switchcast ProtoStructType Entry2
#casecast Transaction Transaction
		"#{Transaction.Id}" => #{Transaction.Id}(request as #{Transaction.Request}, session),
#end switchcast
#end foreach
		_ => throw new Goedel.Protocol.UnknownOperation(),
        };




#if (false.True())
    ///<inheritdoc/>
	public override Goedel.Protocol.JsonObject Dispatch(IJpcSession  session,  
							Goedel.Protocol.JsonReader jsonReader) {

		jsonReader.StartObject ();
		string token = jsonReader.ReadToken ();
		JsonObject response = null;

		switch (token) {
#foreach (_Choice Entry2 in Protocol.Entries)
#switchcast ProtoStructType Entry2
#casecast Transaction Transaction
			case "#{Transaction.Id}" : {
				var request = new #{Transaction.Request}();
				request.Deserialize (jsonReader);
				response = #{Transaction.Id} (request, session);
				break;
				}
#end switchcast
#end foreach
			default : {
				throw new Goedel.Protocol.UnknownOperation ();
				}
			}
		jsonReader.EndObject ();
		return response;
		}
#end if

    /// <summary>
    /// Return a client tapping the service API directly without serialization bound to
    /// the session <paramref name="jpcSession"/>. This is intended for use in testing etc.
    /// </summary>
    /// <param name="jpcSession">Session to which requests are to be bound.</param>
    /// <returns>The direct client instance.</returns>
	public override Goedel.Protocol.JpcClientInterface GetDirect (IJpcSession jpcSession) =>
			new #{Service.Id}Direct () {
					JpcSession = jpcSession,
					Service = this
					};

#foreach (_Choice Entry2 in Protocol.Entries)
#switchcast ProtoStructType Entry2
#casecast Transaction Transaction

    /// <summary>
	/// Base method for implementing the transaction #{Transaction.Id}.
    /// </summary>
    /// <param name="request">The request object to send to the host.</param>
	/// <param name="session">The request context.</param>
	/// <returns>The response object from the service</returns>
    public abstract #{Transaction.Response} #{Transaction.Id} (
            #{Transaction.Request} request, IJpcSession session);
#end switchcast
#end foreach

    }

/// <summary>
/// Client class for #{Service.Id}.
/// </summary>		
public partial class #{Service.Id}Client : Goedel.Protocol.JpcClientInterface {

	/// <summary>
    /// Well Known service identifier.
    /// </summary>
	public const string WellKnown = "#{Service.WellKnown}";

    /// <summary>
    /// Well Known service identifier.
    /// </summary>
	public override string GetWellKnown => WellKnown;

    /// <summary>
    /// Well Known service identifier.
    /// </summary>
	public const string Discovery = "#{Service.Discovery}";

    /// <summary>
    /// Well Known service identifier.
    /// </summary>
	public override string GetDiscovery => Discovery;

#foreach (_Choice Entry2 in Protocol.Entries)
#switchcast ProtoStructType Entry2
#casecast Transaction Transaction
    /// <summary>
	/// Implement the transaction #{Transaction.Id}.
    /// </summary>		
    /// <param name="request">The request object.</param>
	/// <returns>The response object</returns>
    public #{Transaction.Response} #{Transaction.Id} (#{Transaction.Request} request) =>
			#{Transaction.Id}Async (request).Sync();
#!			JpcSession.Post("#{Transaction.Id}", request) as #{Transaction.Response};

    /// <summary>
	/// Implement the transaction #{Transaction.Id} asynchronously.
    /// </summary>		
    /// <param name="request">The request object.</param>
	/// <returns>The response object</returns>
    public virtual async Task<#{Transaction.Response}> #{Transaction.Id}Async (#{Transaction.Request} request) =>
			await JpcSession.PostAsync("#{Transaction.Id}", request) as #{Transaction.Response};

#end switchcast
#end foreach

	}

/// <summary>
/// Direct API class for #{Service.Id}.
/// </summary>		
public partial class #{Service.Id}Direct: #{Service.Id}Client {
 		
	/// <summary>
	/// Interface object to dispatch requests to.
	/// </summary>	
	public #{Service.Id} Service {get; set;}

#foreach (_Choice Entry2 in Protocol.Entries)
#switchcast ProtoStructType Entry2
#casecast Transaction Transaction

    /// <summary>
	/// Implement the transaction
    /// </summary>		
    /// <param name="request">The request object.</param>
	/// <returns>The response object</returns>
    public override Task<#{Transaction.Response}> #{Transaction.Id}Async (#{Transaction.Request} request) =>
			Task.FromResult(Service.#{Transaction.Id} (request, JpcSession));

#end switchcast
#end foreach

		}

#end switchcast
#end foreach



	// Transaction Classes
#foreach (_Choice Entry in Protocol.Entries)
#switchcast ProtoStructType Entry
#casecast Message Message
#% MakeClass (Message);
#% var Inherits = HasInherits  (Message.Entries);
#! MakeSerializers (Message.Id, Message.ID, Message.Entries, Inherits);
	}

#casecast Structure Structure
#% MakeClass (Structure);
#% var Inherits = HasInherits  (Structure.Entries);
#! MakeSerializers (Structure.Id, Structure.ID, Structure.Entries, Inherits);
	}

#end switchcast
#end foreach


#end switchcast
#end foreach
#end method

#block 
#% public bool IsAbstract  (List<_Choice> Entries) {
#% bool result = false;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Abstract null
#% result = true;
#end switchcast
#end foreach
#% return result;
#% }
#end block 

#block 
#% public bool IsMultiple  (List<_Choice> Entries) {
#% bool result = false;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Multiple null
#% result = true;
#casecast Enumerated null
#% result = true;
#end switchcast
#end foreach
#% return result;
#% }
#end block 

#block 
#% public bool IsEnumerated  (List<_Choice> Entries) {
#% bool result = false;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Enumerated null
#% result = true;
#end switchcast
#end foreach
#% return result;
#% }
#end block 

#block 
#% public bool IsRequired  (List<_Choice> Entries) {
#% bool result = false;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Required null
#% result = true;
#end switchcast
#end foreach
#% return result;
#% }
#end block 

#block 
#% public string HasInherits  (List<_Choice> Entries) {
#% string result = null;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Inherits Inherits
#% result = Inherits.Ref.ToString();
#casecast External External
#% result = External.Ref.ToString();
#end switchcast
#end foreach
#% return result;
#% }
#end block 


#block 
#% public void MakeClass  (IStructure structure) {
#% ID<_Choice> Id = structure.IId;
#% List<_Choice> Entries = structure.IEntries;
#% bool Param = structure.IParameterized;

#% var isAbstract = false;
#% var Inherits = HasInherits (Entries);
#!#% string Override;
#% DescriptionListC (Entries, 1);
#if (IsAbstract (Entries))
#% isAbstract = true;
abstract #!
#end if
#% var TTT = Param ? "<T>" : "";
#if (Inherits == null) 
public partial class #{Id}#{TTT} : #{CurrentPrefix} {
#else 
public partial class #{Id}#{TTT} : #{Inherits} {
#end if
#call DeclareMembers (Entries)

    ///<summary>Implement IBinding</summary> 
	public override Property[] _Properties => _properties;

	///<summary>Binding</summary> 
	static readonly Property[] _properties = [#!
#% DeclareProperties (Id, Entries);

		];

    ///<summary>Implement IBinding</summary> 
	public override Binding _Binding => _binding;

	///<summary>Binding</summary> 
	public static readonly new Binding<#{Id}> _binding = new (
			new() {#!
#% DeclarePropertyEntries (Id, Entries);
}, __Tag,
		#!
#if isAbstract
null, () => [], () => [], #!
#else
() => new #{Id}(), () => [], () => [], #!
#end if
#{(Inherits != null).If(Inherits + "._binding", "null")}#!
#if (structure.TypeTag)
, 
		TypeTag:"#{structure.TypeElement}" #!
#end if
, Generic: #{structure.Generic.ToString().ToLower()});


	/// <summary>
    /// Tag identifying this class
    /// </summary>
	public override string _Tag => __Tag;

	/// <summary>
    /// Tag identifying this class
    /// </summary>
	public new const string __Tag = "#{structure.ID}";

	/// <summary>
#if (IsAbstract (Entries))
    /// Factory method. Throws exception as this is an abstract class.
#else
    /// Factory method
#end if
    /// </summary>
    /// <returns>Object of this type</returns>
	public static new JsonObject _Factory () => #!
#if (IsAbstract (Entries))
throw new CannotCreateAbstract();
#else
new #{Id}();
#end if

#% }
#end block 

#block DeclarePropertyEntries
#% public void DeclarePropertyEntries  (ID<_Choice> Id, List<_Choice> Entries) {
#% var separator = new Separator (",");
#% var i =0;
#foreach (_Choice Entry in Entries)
#% GetType (Entry, out var Token, out var Type, out var TType, out var Options, 
#%    out var Nullable, out var Tag);
#if (Token != null)
#{separator}
			{ "#{Tag}", _properties [#{i++}]}#!
#end if
#end foreach
#% }
#end block

#block DeclareProperties
#% public void DeclareProperties  (ID<_Choice> Id, List<_Choice> Entries) {
#% var separator = new Separator (",");
#foreach (_Choice Entry in Entries)
#% GetType (Entry, out var Token, out var Type, out var TType, out var Options, 
#%    out var Nullable, out var Tag);
#% 
#% var list = Entry.Multiple ? "List" : "" ;
#% var eType =  Entry.Multiple ? $"List<{Type}>" : Type ;
#switchcast ProtoStructType Entry
#casecast Struct Param
#{separator}
		new #{Entry.PropertyName} ("#{Tag}", typeof (#{Param.Type.Label}),
					(data, value) => {(data as #{Id}).#{Token} = value as #{Param.TypeCSCons};}, 
					data => (data as #{Id}).#{Token},
					false, ()=>new  #{Param.TypeCSCons}(), ()=>new #{Param.BaseType}()#!
#if Entry.Dictionary
,
					data => (data as #{Id}).#{Token}.GetEnumerable(),
					(object dictionary, object key, object value) =>
						 {(dictionary as #{Param.TypeCSCons}).Add (key as string,value as #{Param.BaseType});}#!
#end if
)#!
#casecast TStruct Param
#{separator}
		new #{Entry.PropertyName} ("#{Tag}", typeof (#{Param.Type.Label}), 
					(data, value) => {(data as #{Id}).#{Token} = value as #{Param.TypeCSCons};}, 
					data => (data as #{Id}).#{Token},
					true#!
#if Entry.Multiple
, ()=>new #{Param.TypeCSCons}()
#end if
) #!
#casecast GStruct Param
#{separator}
		new #{Entry.PropertyName} ("#{Tag}", typeof (#{Param.GType.Label}),
					(data, value) => {(data as #{Id}).#{Param.MainFieldName} = value as #{Param.TypeCSCons};},
					data => (data as #{Id}).#{Param.MainFieldName},
					()=>new  #{Param.TypeCSCons}(), ()=>new #{Param.BaseType}()#!
#if Entry.Multiple
,
					(list,item)=>(list as #{Param.TypeCSCons}).Add (item as #{Param.BaseType})
#end if
)#!
#% break; } default : {
#if (Token != null)
#{separator}
		new #{Entry.PropertyName} ("#{Tag}", 
					(data, value) => {(data as #{Id}).#{Token} = value;}, 
					data => (data as #{Id}).#{Token} )#!
#end if
#end switchcast
#end foreach
#% }
#end block





#block ParameterList
#% public void DeclareMetaMembers  (List<_Choice> Entries) {
#% var separator = new Separator (",");
#foreach (_Choice Entry in Entries)
#% GetType (Entry, out var Token, out var Type, out var TType, out var Options, 
#%    out var Nullable, out var Tag);
#% 
#% var list = Entry.Multiple ? "List" : "" ;
#% var eType =  Entry.Multiple ? $"List<{Type}>" : Type ;
#switchcast ProtoStructType Entry
#casecast Struct Param
#{separator}
			{ "#{Tag}", new MetaData#{list}Struct(
				delegate (object _a) {  #{Token} = _a as #{eType}; },
				() => #{Token},
				"#{Type}" )} #!
#casecast TStruct Param
#{separator}
			{ "#{Tag}", new MetaData#{list}Struct(
				delegate (object _a) {  #{Token} = _a as #{eType}; },
				() => #{Token},
				"#{Type}", true)}#!
#% break; } default : {
#if (Token != null)
#{separator}
			{ "#{Tag}", new MetaData#{list}#{TType}(
				delegate (#{eType} _a) {  #{Token} = _a; },
				() => #{Token}) } #!
#end if
#end switchcast
#end foreach
#% }
#end block



#block ParameterList
#% public void DeclareMembers  (List<_Choice> Entries) {
#foreach (_Choice Entry in Entries)
#% GetType (Entry, out var Token, out var Type, out var TType, out var Options, 
#%    out var Nullable, out var Tag);
#if (Token != null)
#% bool Enumerated = IsEnumerated (Options);
#% bool Multiple = IsMultiple (Options);
#if (Entry is GStruct generic)
	/// <summary>
	/// Wrapped property
    /// </summary>
	[JsonPropertyName("#{Entry.ID}")]
	public virtual #{generic.TypeCS}?					#{generic.MainFieldName}  {get; set;} 

	/// <summary>
	/// Wrapped property
    /// </summary>
	public virtual #{generic.SubTypeCS}?				#{generic.SubFieldName}  => #{generic.MainFieldName}.Decode();
#elseif Enumerated
#{CommentSummary(4,Entry.Description)}
	[JsonPropertyName("#{Entry.ID}")]
	public virtual IEnumerable<#{Type}>				#{Token}  {get; set;} 
#elseif Multiple
#{CommentSummary(4,Entry.Description)}
	[JsonPropertyName("#{Entry.ID}")]
	public virtual #{Entry.TypeCS}?					#{Token}  {get; set;}
#else
#{CommentSummary(4,Entry.Description)}
	[JsonPropertyName("#{Entry.ID}")]
	public virtual #{Entry.TypeCS}?					#{Token}  {get; set;} //

#end if
#end if
#end foreach
#% }
#end block

#block
#% void GetType (_Choice Entry, out TOKEN<_Choice> Token, out string Type, out string TType, 
#%				out List<_Choice> Options, out bool Nullable, out string Tag) {
#% Nullable = true;
#switchcast ProtoStructType Entry
#casecast Boolean Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = "bool?";  Nullable = false;TType = "Boolean";
#casecast Integer Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options;  Nullable = false;
#% Type = Param.LengthBits>32 ? "long?": "int?";
#% TType = Param.LengthBits>32 ? "Integer64": "Integer32";
#casecast Float Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options;  Nullable = false;
#% Type = Param.LengthBits>32 ? "double?": "float?";
#% TType = Param.LengthBits>32 ? "Real64": "Real32";
#casecast Binary Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = "byte[]";TType = "Binary";
#casecast Label Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = "string";TType = "String";
#casecast Name Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = "string";TType = "String";
#casecast String Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = "string";TType = "String";
#casecast URI Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = "string";TType = "String";
#casecast DateTime Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = "DateTime?"; Nullable = true; TType = "DateTime";
#casecast Struct Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = Param.Type.ToString(); TType = Type;
#casecast TStruct Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = Param.Type.ToString(); TType = Type;
#casecast GStruct Param
#% Tag = Param.ID ; Token = Param.Id; Options = Param.Options; Type = Param.Type.ToString(); TType = Type;
#% break; } default : {
#% Tag = null ; Token = null; Options = null; Type = null; TType = null;
#end switchcast
#% }
#end block


#block MapInheritors
#% void MapInheritors (ID<_Choice> Id, string Tag) {
			case "#{Id}" : {
#if Id.Object.IsAbstract
				Out = null;
				throw new Exception ("Can't create abstract type");
#else
				Out = new #{Id} (); 
				// Out = #{Id}.Factory ();
				Out.Deserialize (jsonReader);
				break;
#end if
				}

#foreach (REF<_Choice> Ref in Id.REFs)
#switchcast ProtoStructType Ref.Object
#casecast Message Message
#% MapInheritors (Message.Id, Message.ID);
#casecast Structure Structure
#% MapInheritors (Structure.Id, Structure.ID);
#end switchcast
#end foreach
#%	}
#end block


#block DescriptionListC
#% public void DescriptionListC  (List<_Choice> Entries, int indent) {
#% Indentify (indent);
#if (indent > 0) 
/// <summary>
#end if
#% bool first = true;
#foreach (_Choice Entry in Entries)
#switchcast ProtoStructType Entry
#casecast Description Description
#if first
#% first = false;
#elseFstart
#% Indentify (indent);
///
#end if
#foreach (string s in Description.Text1)
#for (int i=0; i<indent; i++)
	#!
#end for
/// #{s}
#end foreach
#end switchcast
#end foreach
#% Indentify (indent);
#if (indent > 0) 
/// </summary>
#end if
#% }
#end block
#end xclass
