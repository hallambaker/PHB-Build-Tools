
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;
using Goedel.Utilities;




//
// Namespace Goedel.Tool.VSIXBuild
// Class VSIXBuild
//


// Types
//   TopTypeType
//       Namespace
//   TypeType
//       Member
//       Generator
//   IdType
//       ItemType
//   NamespaceType
//       Goedel.Tool.VSIXBuild
//   ClassType
//       VSIXBuild
//   NameType
//       Name
//       Entries
//       Is
//       Extension
//       Options
//       GUID
//       Project
//       Parser
//       Script
//       Process
//       Description
//       Value
//       Class
//       Method
//       Text
//   TokenType
//       IDName
//       ProjectType

#pragma warning disable IDE0022
namespace Goedel.Tool.VSIXBuild {


    public enum VSIXBuildType {
        _Top,

        Namespace,
        Member,
        Generator,
        GUID,
        Project,
        Parser,
        Script,
        Process,
        Description,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public VSIXBuildType _Tag ();

		public abstract void Serialize (StructureWriter Output, bool tag);

		public virtual void Init (_Choice Parent) {
			}

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice Parent) {
			Init (Parent);
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Namespace : _Choice {
        public TOKEN<_Choice>			Name;
        public List <Member>           Entries = new List<Member> ();

        public override VSIXBuildType _Tag () =>VSIXBuildType.Namespace;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Namespace");
				}

	        Output.WriteId ("Name", Name.ToString());
			Output.StartList ("");
			foreach (Member _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Namespace");
				}			
			}
		}

    public partial class Member : _Choice {
        public ID<_Choice>				Name; 
        public _Choice					Is;

        public override VSIXBuildType _Tag () =>VSIXBuildType.Member;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Is._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Member");
				}

	        Output.WriteId ("Name", Name.ToString()); 
	        Is.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Member");
				}			
			}
		}

    public partial class Generator : _Choice {
		public string					Extension;
		public GUID  GUID = new  GUID();
		public List<Project>  Project = new  List <Project> ();
		public Parser  Parser = new  Parser();
		public Script  Script = new  Script();
		public Process  Process = new  Process();
		public Description  Description = new  Description();

        public override VSIXBuildType _Tag () =>VSIXBuildType.Generator;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Generator");
				}

			Output.WriteAttribute ("Extension", Extension);
			Output.StartList ("");
		// public GUID  GUID = new  GUID();
			GUID.Serialize (Output, true);
			foreach (Project _e in Project) {
				_e.Serialize (Output, true);
				}
		// public Parser  Parser = new  Parser();
			Parser.Serialize (Output, true);
		// public Script  Script = new  Script();
			Script.Serialize (Output, true);
		// public Process  Process = new  Process();
			Process.Serialize (Output, true);
		// public Description  Description = new  Description();
			Description.Serialize (Output, true);
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Generator");
				}			
			}
		}

    public partial class GUID : _Choice {
		public string					Value;

        public override VSIXBuildType _Tag () =>VSIXBuildType.GUID;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("GUID");
				}

			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("GUID");
				}			
			}
		}

    public partial class Project : _Choice {
        public TOKEN<_Choice>			Value;

        public override VSIXBuildType _Tag () =>VSIXBuildType.Project;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Project");
				}

	        Output.WriteId ("Value", Value.ToString());
			if (tag) {
				Output.EndElement ("Project");
				}			
			}
		}

    public partial class Parser : _Choice {
        public TOKEN<_Choice>			Name;

        public override VSIXBuildType _Tag () =>VSIXBuildType.Parser;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Parser");
				}

	        Output.WriteId ("Name", Name.ToString());
			if (tag) {
				Output.EndElement ("Parser");
				}			
			}
		}

    public partial class Script : _Choice {
        public TOKEN<_Choice>			Class;
        public TOKEN<_Choice>			Method;

        public override VSIXBuildType _Tag () =>VSIXBuildType.Script;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Script");
				}

	        Output.WriteId ("Class", Class.ToString());
	        Output.WriteId ("Method", Method.ToString());
			if (tag) {
				Output.EndElement ("Script");
				}			
			}
		}

    public partial class Process : _Choice {
        public TOKEN<_Choice>			Class;
        public TOKEN<_Choice>			Method;

        public override VSIXBuildType _Tag () =>VSIXBuildType.Process;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Process");
				}

	        Output.WriteId ("Class", Class.ToString());
	        Output.WriteId ("Method", Method.ToString());
			if (tag) {
				Output.EndElement ("Process");
				}			
			}
		}

    public partial class Description : _Choice {
		public List <System.String>			Text = new List <System.String> (); 

        public override VSIXBuildType _Tag () =>VSIXBuildType.Description;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Description");
				}

			foreach (string _s in Text) {
				Output.WriteAttribute ("Text",_s);
				}
			if (tag) {
				Output.EndElement ("Description");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() =>  Label = null;

        public override VSIXBuildType _Tag () => VSIXBuildType._Label;

		public override void Serialize (StructureWriter Output, bool tag) =>Output.WriteId ("ID", Label.ToString());
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Namespace_Start,
		Namespace__Name,				
		Namespace__Entries,				
		Member_Start,
		Member__Name,				
		Member__Is,				
		Generator_Start,
		Generator__Extension,				
		Generator__Options,				
		GUID_Start,
		GUID__Value,				
		Project_Start,
		Project__Value,				
		Parser_Start,
		Parser__Name,				
		Script_Start,
		Script__Class,				
		Script__Method,				
		Process_Start,
		Process__Class,				
		Process__Method,				
		Description_Start,
		Description__Text,				
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.Tool.VSIXBuild._Choice     Token;
        }

    public partial class VSIXBuild : Goedel.Registry.Parser{
        public List <Goedel.Tool.VSIXBuild._Choice>        Top;
        public Registry	<Goedel.Tool.VSIXBuild._Choice>	Registry;

        public bool StartOfEntry {get;  private set;}

        StateCode								State;
        Goedel.Tool.VSIXBuild._Choice				Current;
        List <_StackItem>						Stack;


        public static VSIXBuild Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new VSIXBuild() {
				Options = Options
				};

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
				Entry._InitChildren (null);
				}
			}

        public VSIXBuild() {
            Top = new List<Goedel.Tool.VSIXBuild._Choice> () ;
            Registry = new Registry <Goedel.Tool.VSIXBuild._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            StartOfEntry = true;

			TYPE__ItemType = Registry.TYPE ("ItemType"); 
			TYPE__IDName = Registry.TYPE ("IDName"); 
			TYPE__ProjectType = Registry.TYPE ("ProjectType"); 



            }



        public TYPE<Goedel.Tool.VSIXBuild._Choice> TYPE__ItemType ;
        public TYPE<Goedel.Tool.VSIXBuild._Choice> TYPE__IDName ;
        public TYPE<Goedel.Tool.VSIXBuild._Choice> TYPE__ProjectType ;

        private Goedel.Tool.VSIXBuild._Choice New_Choice(string Label) {
            switch (Label) {

                case "Namespace": return NewNamespace();
                case "Member": return NewMember();
                case "Generator": return NewGenerator();
                case "GUID": return NewGUID();
                case "Project": return NewProject();
                case "Parser": return NewParser();
                case "Script": return NewScript();
                case "Process": return NewProcess();
                case "Description": return NewDescription();

				}

            throw new NotFoundReserved ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.Tool.VSIXBuild.Namespace NewNamespace() {
            Goedel.Tool.VSIXBuild.Namespace result = new Goedel.Tool.VSIXBuild.Namespace();
            Push (result);
            State = StateCode.Namespace_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.Member NewMember() {
            Goedel.Tool.VSIXBuild.Member result = new Goedel.Tool.VSIXBuild.Member();
            Push (result);
            State = StateCode.Member_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.Generator NewGenerator() {
            Goedel.Tool.VSIXBuild.Generator result = new Goedel.Tool.VSIXBuild.Generator();
            Push (result);
            State = StateCode.Generator_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.GUID NewGUID() {
            Goedel.Tool.VSIXBuild.GUID result = new Goedel.Tool.VSIXBuild.GUID();
            Push (result);
            State = StateCode.GUID_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.Project NewProject() {
            Goedel.Tool.VSIXBuild.Project result = new Goedel.Tool.VSIXBuild.Project();
            Push (result);
            State = StateCode.Project_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.Parser NewParser() {
            Goedel.Tool.VSIXBuild.Parser result = new Goedel.Tool.VSIXBuild.Parser();
            Push (result);
            State = StateCode.Parser_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.Script NewScript() {
            Goedel.Tool.VSIXBuild.Script result = new Goedel.Tool.VSIXBuild.Script();
            Push (result);
            State = StateCode.Script_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.Process NewProcess() {
            Goedel.Tool.VSIXBuild.Process result = new Goedel.Tool.VSIXBuild.Process();
            Push (result);
            State = StateCode.Process_Start;
            return result;
            }


        private Goedel.Tool.VSIXBuild.Description NewDescription() {
            Goedel.Tool.VSIXBuild.Description result = new Goedel.Tool.VSIXBuild.Description();
            Push (result);
            State = StateCode.Description_Start;
            return result;
            }


        static Goedel.Tool.VSIXBuild.VSIXBuildType _Reserved(string Label) {
            switch (Label) {

                case "Namespace": return Goedel.Tool.VSIXBuild.VSIXBuildType.Namespace;
                case "Member": return Goedel.Tool.VSIXBuild.VSIXBuildType.Member;
                case "Generator": return Goedel.Tool.VSIXBuild.VSIXBuildType.Generator;
                case "GUID": return Goedel.Tool.VSIXBuild.VSIXBuildType.GUID;
                case "Project": return Goedel.Tool.VSIXBuild.VSIXBuildType.Project;
                case "Parser": return Goedel.Tool.VSIXBuild.VSIXBuildType.Parser;
                case "Script": return Goedel.Tool.VSIXBuild.VSIXBuildType.Script;
                case "Process": return Goedel.Tool.VSIXBuild.VSIXBuildType.Process;
                case "Description": return Goedel.Tool.VSIXBuild.VSIXBuildType.Description;

                }
            return Goedel.Tool.VSIXBuild.VSIXBuildType._Bottom;
            }


		public void Serialize (TextWriter Output)=> Serialize (Output, OutputFormat.Goedel);

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.Tool.VSIXBuild._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.Tool.VSIXBuild._Choice Token) {
            _StackItem Item = new _StackItem () {
					State = State,
					Token = Current
					};

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
			Assert.False (Stack.Count == 0, InternalError.Throw);

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) {
				return;
				}
			Assert.False (Token == TokenType.INVALID, InvalidToken.Throw);

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else {
							throw new ExpectedStart ();
							}

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.Tool.VSIXBuild.VSIXBuildType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.Tool.VSIXBuild.VSIXBuildType.Namespace)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new Expected("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) {
                            State = StateCode._End;
                            break;
                            }
                        else {
							throw new ExpectedClass();
							}

                    case StateCode._End: {                  //      -
                        throw new TooManyClose();
						}

                    case StateCode.Namespace_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Namespace Current_Cast = (Goedel.Tool.VSIXBuild.Namespace)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Namespace__Name;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Name:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Namespace__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Namespace__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.VSIXBuild.Namespace Current_Cast = (Goedel.Tool.VSIXBuild.Namespace)Current;
                            Current_Cast.Entries.Add (NewMember ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Member_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Member Current_Cast = (Goedel.Tool.VSIXBuild.Member)Current;
                            Current_Cast.Name = Registry.ID(Position, Text, TYPE__ItemType, Current_Cast);
                            State = StateCode.Member__Name;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Member__Name:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.VSIXBuild.Member Current_Cast = (Goedel.Tool.VSIXBuild.Member)Current;
                            Goedel.Tool.VSIXBuild.VSIXBuildType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.VSIXBuild.VSIXBuildType.Generator) ) {
                                State = StateCode.Member__Is;
                                Current_Cast.Is = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Generator ]");
                                }
                            break;
                            }
                        else {
                            throw new Expected("Parser Error Expected [Generator ]");
                            }

                    case StateCode.Member__Is:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Generator_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.VSIXBuild.Generator Current_Cast = (Goedel.Tool.VSIXBuild.Generator)Current;
                            Current_Cast.Extension = Text;
                            State = StateCode.Generator__Extension;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Generator__Extension:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Generator__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Generator__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.VSIXBuild.Generator Current_Cast = (Goedel.Tool.VSIXBuild.Generator)Current;
                            Goedel.Tool.VSIXBuild.VSIXBuildType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.VSIXBuild.VSIXBuildType.GUID : {

									// GUID  GUID
									Current_Cast.GUID = NewGUID ();
									break;
									}
								case Goedel.Tool.VSIXBuild.VSIXBuildType.Project : {

									// Project  Project
									Current_Cast.Project.Add (NewProject ());
									break;
									}
								case Goedel.Tool.VSIXBuild.VSIXBuildType.Parser : {

									// Parser  Parser
									Current_Cast.Parser = NewParser ();
									break;
									}
								case Goedel.Tool.VSIXBuild.VSIXBuildType.Script : {

									// Script  Script
									Current_Cast.Script = NewScript ();
									break;
									}
								case Goedel.Tool.VSIXBuild.VSIXBuildType.Process : {

									// Process  Process
									Current_Cast.Process = NewProcess ();
									break;
									}
								case Goedel.Tool.VSIXBuild.VSIXBuildType.Description : {

									// Description  Description
									Current_Cast.Description = NewDescription ();
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [GUID Project Parser Script Process Description ]");
									}
								}
							}
                        break;

                    case StateCode.GUID_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.VSIXBuild.GUID Current_Cast = (Goedel.Tool.VSIXBuild.GUID)Current;
                            Current_Cast.Value = Text;
                            State = StateCode.GUID__Value;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.GUID__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Project_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Project Current_Cast = (Goedel.Tool.VSIXBuild.Project)Current;
                            Current_Cast.Value = Registry.TOKEN(Position, Text, TYPE__ProjectType, Current_Cast);
                            State = StateCode.Project__Value;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Project__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Parser_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Parser Current_Cast = (Goedel.Tool.VSIXBuild.Parser)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Parser__Name;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Parser__Name:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Script_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Script Current_Cast = (Goedel.Tool.VSIXBuild.Script)Current;
                            Current_Cast.Class = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Script__Class;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Script__Class:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Script Current_Cast = (Goedel.Tool.VSIXBuild.Script)Current;
                            Current_Cast.Method = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Script__Method;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Script__Method:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Process_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Process Current_Cast = (Goedel.Tool.VSIXBuild.Process)Current;
                            Current_Cast.Class = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Process__Class;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Process__Class:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.VSIXBuild.Process Current_Cast = (Goedel.Tool.VSIXBuild.Process)Current;
                            Current_Cast.Method = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Process__Method;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Process__Method:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Description_Start:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Description__Text;
                            break;
                            }
                        else {
                            Pop();
                            Represent = true;
                            break;
                            }
                    case StateCode.Description__Text:
                       if (Token == TokenType.END) {
                            Pop();
                            break;
                            }
                       else if (Token == TokenType.TEXT) {
                            Goedel.Tool.VSIXBuild.Description Current_Cast = (Goedel.Tool.VSIXBuild.Description)Current;
                            Current_Cast.Text.Add (Text);
                            break;							
                            }
                       throw new Expected("Expected Text");



                    default: {
                        throw new UnreachableCode();
						}
                    }
                }
            }
        }
	}
#pragma warning restore IDE0022	

