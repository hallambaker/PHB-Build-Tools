#% string Namespace = "Goedel.Trojan.GTK";
#% List<string> Classes = new List<string> {
#%   FormWidgetBoolean, FormWidgetInteger, FormWidgetString,
#%   FormWidgetSet, FormWidgetChooser, FormWidgetList, 
#%   FormWidgetItem, FormWidgetOption, FormWidgetEnumerate,
#%   FormWidgetDateTime, FormWidgetDate, FormWidgetTime,
#%   FormWidgetFont, FormWidgetColor, FormWidgetFile} 

using System;
namespace Goedel.Trojan.GTK {

#foreach (var Class in Classes) 

    public partial class #{class} {
        int Row;
        GridForm GridForm;
        ErrorLabel ErrorLabel = null;
        bool _Changed = false;

        /// <summary>
        /// The object field that this object maps to.
        /// </summary>
        public ObjectField ObjectField { get { return ObjectEntry;  }  }

        /// <summary>
        /// Destruction method, called when the widget is being destroyed.
        /// </summary>
        public override void Destroy  () {
            base.Destroy();
            ObjectField.Destroy(this);
            }


        /// <summary>
        /// Error text to report
        /// </summary>
        public string ReasonInvalid { set {
                ErrorLabel.Raise(ref ErrorLabel, GridForm, Row, value);
                } }

        /// <summary>
        /// When set true, user can modify contents, otherwise value is fixed.
        /// </summary>
        public bool Readonly { set { Sensitive = !value; } }

        /// <summary>
        /// Popup tool tip
        /// </summary>
        public string Tip { set { TooltipText = value; } }

        /// <summary>
        /// Copy values from widget to model test field.
        /// </summary>
        public void Test() {
            ObjectEntry.Test = Active;
            }

        /// <summary>
        /// Copy values from widget to model value field.
        /// </summary>
        public void Apply() {
            ObjectEntry.Apply();
            _Changed = false;
            }

        /// <summary>
        /// Copy value from model value field to widget.
        /// </summary>
        public void Fill() {
            Active = ObjectEntry.Value;
            _Changed = false;
            }

        /// <summary>
        /// Set to true if the user has changed the value.
        /// </summary>
        public bool UserChangedValue { get { return _Changed; }
            set { _Changed = value; } }
    }
#end foreach

}

