
//  Copyright (c) 2015 by Phillip Hallam-Baker
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;


//
// Namespace Goedel.BootMark
// Class MarkSchema
//


// Types
//   TopTypeType
//       Class
//   TypeType
//       Meta
//       Item
//       Annotation
//       Layout
//       Block
//       Remark
//       Flag
//       String
//       Integer
//       Markup
//       XML
//       Stack
//       Wrap
//       Level
//       Default
//   IdType
//       ElementID
//       AttributeID
//   NamespaceType
//       Goedel.BootMark
//   ClassType
//       MarkSchema
//   NameType
//       Namespace
//       Name
//       Entries
//       TBS
//       Id
//       Start
//       Start1
//       End
//       Tag
//       First
//       Value
//       Wrapper
//       Text
//   TokenType
//       NamespaceType
//       ClassType

namespace Goedel.BootMark {


    public enum MarkSchemaType {
        _Top,

        Class,
        Meta,
        Layout,
        Block,
        Annotation,
        Item,
        Markup,
        XML,
        Default,
        Stack,
        Wrap,
        Level,
        Remark,
        Start,
        End,
        String,
        Flag,
        Integer,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public MarkSchemaType _Tag ();

		public abstract void Serialize (StructureWriter Output, bool tag);

		public virtual void Init (_Choice Parent) {
			}

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice Parent) {
			Init (Parent);
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Class : _Choice {
        public TOKEN<_Choice>			Namespace;
        public TOKEN<_Choice>			Name;
        public List <_Choice>           Entries = new List<_Choice> ();

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Class;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Class");
				}

	        Output.WriteId ("Namespace", Namespace.ToString());
	        Output.WriteId ("Name", Name.ToString());
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Class");
				}			
			}
		}

    public partial class Meta : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Entries = new List<_Choice> ();

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Meta;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Meta");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Meta");
				}			
			}
		}

    public partial class Layout : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Entries = new List<_Choice> ();

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Layout;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Layout");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Layout");
				}			
			}
		}

    public partial class Block : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Entries = new List<_Choice> ();

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Block;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Block");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Block");
				}			
			}
		}

    public partial class Annotation : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Entries = new List<_Choice> ();

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Annotation;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Annotation");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Annotation");
				}			
			}
		}

    public partial class Item : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Entries = new List<_Choice> ();

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Item;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Item");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Item");
				}			
			}
		}

    public partial class Markup : _Choice {
		public string					Start;
		public string					Start1;
		public string					End;

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Markup;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Markup");
				}

			Output.WriteAttribute ("Start", Start);
			Output.WriteAttribute ("Start1", Start1);
			Output.WriteAttribute ("End", End);
			if (tag) {
				Output.EndElement ("Markup");
				}			
			}
		}

    public partial class XML : _Choice {
		public string					Tag;
		public string					First;
        public List <_Choice>           Entries = new List<_Choice> ();

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.XML;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("XML");
				}

			Output.WriteAttribute ("Tag", Tag);
			Output.WriteAttribute ("First", First);
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("XML");
				}			
			}
		}

    public partial class Default : _Choice {
		public string					Tag;
		public string					Value;

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Default;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Default");
				}

			Output.WriteAttribute ("Tag", Tag);
			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Default");
				}			
			}
		}

    public partial class Stack : _Choice {
        public REF<_Choice>				Wrapper;

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Stack;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Stack");
				}

	        Output.WriteId ("Wrapper", Wrapper.ToString());
			if (tag) {
				Output.EndElement ("Stack");
				}			
			}
		}

    public partial class Wrap : _Choice {
        public REF<_Choice>				Wrapper;

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Wrap;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Wrap");
				}

	        Output.WriteId ("Wrapper", Wrapper.ToString());
			if (tag) {
				Output.EndElement ("Wrap");
				}			
			}
		}

    public partial class Level : _Choice {
		public int						Value;

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Level;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Level");
				}

			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Level");
				}			
			}
		}

    public partial class Remark : _Choice {
		public List <System.String>			Text = new List <System.String> (); 

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Remark;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Remark");
				}

			foreach (string _s in Text) {
				Output.WriteAttribute ("Text",_s);
				}
			if (tag) {
				Output.EndElement ("Remark");
				}			
			}
		}

    public partial class Start : _Choice {
		public List <System.String>			Text = new List <System.String> (); 

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Start;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Start");
				}

			foreach (string _s in Text) {
				Output.WriteAttribute ("Text",_s);
				}
			if (tag) {
				Output.EndElement ("Start");
				}			
			}
		}

    public partial class End : _Choice {
		public List <System.String>			Text = new List <System.String> (); 

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.End;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("End");
				}

			foreach (string _s in Text) {
				Output.WriteAttribute ("Text",_s);
				}
			if (tag) {
				Output.EndElement ("End");
				}			
			}
		}

    public partial class String : _Choice {
        public ID<_Choice>				Id; 

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.String;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("String");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			if (tag) {
				Output.EndElement ("String");
				}			
			}
		}

    public partial class Flag : _Choice {
        public ID<_Choice>				Id; 

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Flag;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Flag");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			if (tag) {
				Output.EndElement ("Flag");
				}			
			}
		}

    public partial class Integer : _Choice {
        public ID<_Choice>				Id; 

        public override MarkSchemaType _Tag () {
            return MarkSchemaType.Integer;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Integer");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			if (tag) {
				Output.EndElement ("Integer");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() {
            Label = null;
            }

        public override MarkSchemaType _Tag () {
            return MarkSchemaType._Label;
            }

		public override void Serialize (StructureWriter Output, bool tag) {
			Output.WriteId ("ID", Label.ToString());
			}
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Class_Start,
		Class__Namespace,				
		Class__Name,				
		Class__Entries,				
		Meta_Start,
		Meta__TBS,				
		Meta__Id,				
		Meta__Entries,				
		Layout_Start,
		Layout__Id,				
		Layout__Entries,				
		Block_Start,
		Block__Id,				
		Block__Entries,				
		Annotation_Start,
		Annotation__Id,				
		Annotation__Entries,				
		Item_Start,
		Item__Id,				
		Item__Entries,				
		Markup_Start,
		Markup__Start,				
		Markup__Start1,				
		Markup__End,				
		XML_Start,
		XML__Tag,				
		XML__First,				
		XML__Entries,				
		Default_Start,
		Default__Tag,				
		Default__Value,				
		Stack_Start,
		Stack__Wrapper,				
		Wrap_Start,
		Wrap__Wrapper,				
		Level_Start,
		Level__Value,				
		Remark_Start,
		Remark__Text,				
		Start_Start,
		Start__Text,				
		End_Start,
		End__Text,				
		String_Start,
		String__Id,				
		Flag_Start,
		Flag__Id,				
		Integer_Start,
		Integer__Id,				
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.BootMark._Choice     Token;
        }

    public partial class MarkSchema : Goedel.Registry.Parser{
        public List <Goedel.BootMark._Choice>        Top;
        public Registry	<Goedel.BootMark._Choice>	Registry;



        bool _StartOfEntry;
        public bool StartOfEntry {
            get {return _StartOfEntry;}
            private set { _StartOfEntry = value; }
            }

        StateCode								State;
        Goedel.BootMark._Choice				Current;
        List <_StackItem>						Stack;


        public static MarkSchema Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new MarkSchema();
            Result.Options = Options;

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
				Entry._InitChildren (null);
				}
			}

        public MarkSchema() {
            Top = new List<Goedel.BootMark._Choice> () ;
            Registry = new Registry <Goedel.BootMark._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            _StartOfEntry = true;

			TYPE__ElementID = Registry.TYPE ("ElementID"); 
			TYPE__AttributeID = Registry.TYPE ("AttributeID"); 
			TYPE__NamespaceType = Registry.TYPE ("NamespaceType"); 
			TYPE__ClassType = Registry.TYPE ("ClassType"); 



            }



        public TYPE<Goedel.BootMark._Choice> TYPE__ElementID ;
        public TYPE<Goedel.BootMark._Choice> TYPE__AttributeID ;
        public TYPE<Goedel.BootMark._Choice> TYPE__NamespaceType ;
        public TYPE<Goedel.BootMark._Choice> TYPE__ClassType ;

        private Goedel.BootMark._Choice New_Choice(string Label) {
            switch (Label) {

                case "Class": return NewClass();
                case "Meta": return NewMeta();
                case "Layout": return NewLayout();
                case "Block": return NewBlock();
                case "Annotation": return NewAnnotation();
                case "Item": return NewItem();
                case "Markup": return NewMarkup();
                case "XML": return NewXML();
                case "Default": return NewDefault();
                case "Stack": return NewStack();
                case "Wrap": return NewWrap();
                case "Level": return NewLevel();
                case "Remark": return NewRemark();
                case "Start": return NewStart();
                case "End": return NewEnd();
                case "String": return NewString();
                case "Flag": return NewFlag();
                case "Integer": return NewInteger();

				}
            throw new System.Exception ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.BootMark.Class NewClass() {
            Goedel.BootMark.Class result = new Goedel.BootMark.Class();
            Push (result);
            State = StateCode.Class_Start;
            return result;
            }


        private Goedel.BootMark.Meta NewMeta() {
            Goedel.BootMark.Meta result = new Goedel.BootMark.Meta();
            Push (result);
            State = StateCode.Meta_Start;
            return result;
            }


        private Goedel.BootMark.Layout NewLayout() {
            Goedel.BootMark.Layout result = new Goedel.BootMark.Layout();
            Push (result);
            State = StateCode.Layout_Start;
            return result;
            }


        private Goedel.BootMark.Block NewBlock() {
            Goedel.BootMark.Block result = new Goedel.BootMark.Block();
            Push (result);
            State = StateCode.Block_Start;
            return result;
            }


        private Goedel.BootMark.Annotation NewAnnotation() {
            Goedel.BootMark.Annotation result = new Goedel.BootMark.Annotation();
            Push (result);
            State = StateCode.Annotation_Start;
            return result;
            }


        private Goedel.BootMark.Item NewItem() {
            Goedel.BootMark.Item result = new Goedel.BootMark.Item();
            Push (result);
            State = StateCode.Item_Start;
            return result;
            }


        private Goedel.BootMark.Markup NewMarkup() {
            Goedel.BootMark.Markup result = new Goedel.BootMark.Markup();
            Push (result);
            State = StateCode.Markup_Start;
            return result;
            }


        private Goedel.BootMark.XML NewXML() {
            Goedel.BootMark.XML result = new Goedel.BootMark.XML();
            Push (result);
            State = StateCode.XML_Start;
            return result;
            }


        private Goedel.BootMark.Default NewDefault() {
            Goedel.BootMark.Default result = new Goedel.BootMark.Default();
            Push (result);
            State = StateCode.Default_Start;
            return result;
            }


        private Goedel.BootMark.Stack NewStack() {
            Goedel.BootMark.Stack result = new Goedel.BootMark.Stack();
            Push (result);
            State = StateCode.Stack_Start;
            return result;
            }


        private Goedel.BootMark.Wrap NewWrap() {
            Goedel.BootMark.Wrap result = new Goedel.BootMark.Wrap();
            Push (result);
            State = StateCode.Wrap_Start;
            return result;
            }


        private Goedel.BootMark.Level NewLevel() {
            Goedel.BootMark.Level result = new Goedel.BootMark.Level();
            Push (result);
            State = StateCode.Level_Start;
            return result;
            }


        private Goedel.BootMark.Remark NewRemark() {
            Goedel.BootMark.Remark result = new Goedel.BootMark.Remark();
            Push (result);
            State = StateCode.Remark_Start;
            return result;
            }


        private Goedel.BootMark.Start NewStart() {
            Goedel.BootMark.Start result = new Goedel.BootMark.Start();
            Push (result);
            State = StateCode.Start_Start;
            return result;
            }


        private Goedel.BootMark.End NewEnd() {
            Goedel.BootMark.End result = new Goedel.BootMark.End();
            Push (result);
            State = StateCode.End_Start;
            return result;
            }


        private Goedel.BootMark.String NewString() {
            Goedel.BootMark.String result = new Goedel.BootMark.String();
            Push (result);
            State = StateCode.String_Start;
            return result;
            }


        private Goedel.BootMark.Flag NewFlag() {
            Goedel.BootMark.Flag result = new Goedel.BootMark.Flag();
            Push (result);
            State = StateCode.Flag_Start;
            return result;
            }


        private Goedel.BootMark.Integer NewInteger() {
            Goedel.BootMark.Integer result = new Goedel.BootMark.Integer();
            Push (result);
            State = StateCode.Integer_Start;
            return result;
            }


        static Goedel.BootMark.MarkSchemaType _Reserved(string Label) {
            switch (Label) {

                case "Class": return Goedel.BootMark.MarkSchemaType.Class;
                case "Meta": return Goedel.BootMark.MarkSchemaType.Meta;
                case "Layout": return Goedel.BootMark.MarkSchemaType.Layout;
                case "Block": return Goedel.BootMark.MarkSchemaType.Block;
                case "Annotation": return Goedel.BootMark.MarkSchemaType.Annotation;
                case "Item": return Goedel.BootMark.MarkSchemaType.Item;
                case "Markup": return Goedel.BootMark.MarkSchemaType.Markup;
                case "XML": return Goedel.BootMark.MarkSchemaType.XML;
                case "Default": return Goedel.BootMark.MarkSchemaType.Default;
                case "Stack": return Goedel.BootMark.MarkSchemaType.Stack;
                case "Wrap": return Goedel.BootMark.MarkSchemaType.Wrap;
                case "Level": return Goedel.BootMark.MarkSchemaType.Level;
                case "Remark": return Goedel.BootMark.MarkSchemaType.Remark;
                case "Start": return Goedel.BootMark.MarkSchemaType.Start;
                case "End": return Goedel.BootMark.MarkSchemaType.End;
                case "String": return Goedel.BootMark.MarkSchemaType.String;
                case "Flag": return Goedel.BootMark.MarkSchemaType.Flag;
                case "Integer": return Goedel.BootMark.MarkSchemaType.Integer;

                }
            return Goedel.BootMark.MarkSchemaType._Bottom;
            }


		public void Serialize (TextWriter Output) {
			Serialize (Output, OutputFormat.Goedel);
			}

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.BootMark._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.BootMark._Choice Token) {
            _StackItem Item = new _StackItem ();
            Item.State = State;
            Item.Token = Current;

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
            if (Stack.Count == 0) throw new System.Exception ("Internal Parser Error");

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) return;
            if (Token == TokenType.INVALID)
                throw new System.Exception("Invalid Token");

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected START");

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Class)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new System.Exception("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) {
                            State = StateCode._End;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [Class]");

                    case StateCode._End:                   //      -
                        throw new System.Exception("Too Many Closing Braces");

                    case StateCode.Class_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Class Current_Cast = (Goedel.BootMark.Class)Current;
                            Current_Cast.Namespace = Registry.TOKEN(Position, Text, TYPE__NamespaceType, Current_Cast);
                            State = StateCode.Class__Namespace;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Class__Namespace:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Class Current_Cast = (Goedel.BootMark.Class)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__ClassType, Current_Cast);
                            State = StateCode.Class__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Class__Name:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Class__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Class__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.BootMark.Class Current_Cast = (Goedel.BootMark.Class)Current;
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Meta) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Item) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Annotation) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Layout) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Block) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Remark) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Meta Item Annotation Layout Block Remark ]");
								}
							}
                        break;


                    case StateCode.Meta_Start:

                    case StateCode.Meta__TBS:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Meta Current_Cast = (Goedel.BootMark.Meta)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ElementID, Current_Cast);
                            State = StateCode.Meta__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Meta__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Meta__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Meta__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.BootMark.Meta Current_Cast = (Goedel.BootMark.Meta)Current;
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Flag) |
									(LabelType == Goedel.BootMark.MarkSchemaType.String) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Remark) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Integer) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Meta) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Flag String Remark Integer Meta ]");
								}
							}
                        break;


                    case StateCode.Layout_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Layout Current_Cast = (Goedel.BootMark.Layout)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ElementID, Current_Cast);
                            State = StateCode.Layout__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Layout__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Layout__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Layout__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.BootMark.Layout Current_Cast = (Goedel.BootMark.Layout)Current;
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Flag) |
									(LabelType == Goedel.BootMark.MarkSchemaType.String) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Remark) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Integer) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Layout) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Markup) |
									(LabelType == Goedel.BootMark.MarkSchemaType.XML) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Stack) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Wrap) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Flag String Remark Integer Layout Markup XML Stack Wrap ]");
								}
							}
                        break;


                    case StateCode.Block_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Block Current_Cast = (Goedel.BootMark.Block)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ElementID, Current_Cast);
                            State = StateCode.Block__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Block__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Block__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Block__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.BootMark.Block Current_Cast = (Goedel.BootMark.Block)Current;
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Flag) |
									(LabelType == Goedel.BootMark.MarkSchemaType.String) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Remark) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Integer) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Markup) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Level) |
									(LabelType == Goedel.BootMark.MarkSchemaType.XML) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Stack) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Wrap) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Flag String Remark Integer Markup Level XML Stack Wrap ]");
								}
							}
                        break;


                    case StateCode.Annotation_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Annotation Current_Cast = (Goedel.BootMark.Annotation)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ElementID, Current_Cast);
                            State = StateCode.Annotation__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Annotation__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Annotation__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Annotation__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.BootMark.Annotation Current_Cast = (Goedel.BootMark.Annotation)Current;
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Flag) |
									(LabelType == Goedel.BootMark.MarkSchemaType.String) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Remark) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Integer) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Markup) |
									(LabelType == Goedel.BootMark.MarkSchemaType.XML) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Flag String Remark Integer Markup XML ]");
								}
							}
                        break;


                    case StateCode.Item_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Item Current_Cast = (Goedel.BootMark.Item)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ElementID, Current_Cast);
                            State = StateCode.Item__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Item__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Item__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Item__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.BootMark.Item Current_Cast = (Goedel.BootMark.Item)Current;
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Flag) |
									(LabelType == Goedel.BootMark.MarkSchemaType.String) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Remark) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Integer) |
									(LabelType == Goedel.BootMark.MarkSchemaType.Markup) |
									(LabelType == Goedel.BootMark.MarkSchemaType.XML) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Flag String Remark Integer Markup XML ]");
								}
							}
                        break;


                    case StateCode.Markup_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.BootMark.Markup Current_Cast = (Goedel.BootMark.Markup)Current;
                            Current_Cast.Start = Text;
                            State = StateCode.Markup__Start;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.Markup__Start:
                        if (Token == TokenType.STRING) {
                            Goedel.BootMark.Markup Current_Cast = (Goedel.BootMark.Markup)Current;
                            Current_Cast.Start1 = Text;
                            State = StateCode.Markup__Start1;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.Markup__Start1:
                        if (Token == TokenType.STRING) {
                            Goedel.BootMark.Markup Current_Cast = (Goedel.BootMark.Markup)Current;
                            Current_Cast.End = Text;
                            State = StateCode.Markup__End;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.Markup__End:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.XML_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.BootMark.XML Current_Cast = (Goedel.BootMark.XML)Current;
                            Current_Cast.Tag = Text;
                            State = StateCode.XML__Tag;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.XML__Tag:
                        if (Token == TokenType.STRING) {
                            Goedel.BootMark.XML Current_Cast = (Goedel.BootMark.XML)Current;
                            Current_Cast.First = Text;
                            State = StateCode.XML__First;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.XML__First:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.XML__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.XML__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.BootMark.XML Current_Cast = (Goedel.BootMark.XML)Current;
                            Goedel.BootMark.MarkSchemaType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.BootMark.MarkSchemaType.Default) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Default ]");
								}
							}
                        break;


                    case StateCode.Default_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.BootMark.Default Current_Cast = (Goedel.BootMark.Default)Current;
                            Current_Cast.Tag = Text;
                            State = StateCode.Default__Tag;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.Default__Tag:
                        if (Token == TokenType.STRING) {
                            Goedel.BootMark.Default Current_Cast = (Goedel.BootMark.Default)Current;
                            Current_Cast.Value = Text;
                            State = StateCode.Default__Value;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.Default__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Stack_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Stack Current_Cast = (Goedel.BootMark.Stack)Current;
                            Current_Cast.Wrapper = Registry.REF(Position, Text, TYPE__ElementID, Current_Cast);
                            State = StateCode.Stack__Wrapper;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Stack__Wrapper:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Wrap_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Wrap Current_Cast = (Goedel.BootMark.Wrap)Current;
                            Current_Cast.Wrapper = Registry.REF(Position, Text, TYPE__ElementID, Current_Cast);
                            State = StateCode.Wrap__Wrapper;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Wrap__Wrapper:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Level_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.BootMark.Level Current_Cast = (Goedel.BootMark.Level)Current;
                            Current_Cast.Value = Convert.ToInt32(Text);
                            State = StateCode.Level__Value;
                            break;
                            }
                        throw new System.Exception("Expected Integer");

                    case StateCode.Level__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Remark_Start:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Remark__Text;
                            break;
                            }
                        else {
                            Pop();
                            Represent = true;
                            break;
                            }
                    case StateCode.Remark__Text:
                       if (Token == TokenType.END) {
                            Pop();
                            break;
                            }
                       else if (Token == TokenType.TEXT) {
                            Goedel.BootMark.Remark Current_Cast = (Goedel.BootMark.Remark)Current;
                            Current_Cast.Text.Add (Text);
                            break;							
                            }
                       throw new System.Exception("Expected Text");


                    case StateCode.Start_Start:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Start__Text;
                            break;
                            }
                        else {
                            Pop();
                            Represent = true;
                            break;
                            }
                    case StateCode.Start__Text:
                       if (Token == TokenType.END) {
                            Pop();
                            break;
                            }
                       else if (Token == TokenType.TEXT) {
                            Goedel.BootMark.Start Current_Cast = (Goedel.BootMark.Start)Current;
                            Current_Cast.Text.Add (Text);
                            break;							
                            }
                       throw new System.Exception("Expected Text");


                    case StateCode.End_Start:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.End__Text;
                            break;
                            }
                        else {
                            Pop();
                            Represent = true;
                            break;
                            }
                    case StateCode.End__Text:
                       if (Token == TokenType.END) {
                            Pop();
                            break;
                            }
                       else if (Token == TokenType.TEXT) {
                            Goedel.BootMark.End Current_Cast = (Goedel.BootMark.End)Current;
                            Current_Cast.Text.Add (Text);
                            break;							
                            }
                       throw new System.Exception("Expected Text");


                    case StateCode.String_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.String Current_Cast = (Goedel.BootMark.String)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__AttributeID, Current_Cast);
                            State = StateCode.String__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.String__Id:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Flag_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Flag Current_Cast = (Goedel.BootMark.Flag)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__AttributeID, Current_Cast);
                            State = StateCode.Flag__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Flag__Id:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Integer_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.BootMark.Integer Current_Cast = (Goedel.BootMark.Integer)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__AttributeID, Current_Cast);
                            State = StateCode.Integer__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Integer__Id:
                        Pop ();
                        Represent = true; 
                        break;

                    default:
                        throw new System.Exception("Unreachable code reached");
                    }
                }
            }
        }
	}


