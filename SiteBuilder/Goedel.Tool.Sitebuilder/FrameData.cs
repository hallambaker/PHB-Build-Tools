
//  Copyright (c) 2025 by Threshold Secrets LLC.
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;
using Goedel.Utilities;




//
// Namespace Goedel.Tool.Sitebuilder
// Class FrameStruct
//


// Types
//   TopTypeType
//       Namespace
//   TypeType
//       Entry
//       Page
//       Menu
//       Selector
//       Class
//       SubClass
//       FieldItem
//       SubMenu
//       Struct
//       Fields
//       Description
//       Property
//       Button
//       Chooser
//       Separator
//       Return
//       Is
//       Boolean
//       Integer
//       DateTime
//       String
//       Text
//       Anchor
//       RichText
//       Image
//       Avatar
//       List
//       Choice
//       Count
//       Presentation
//       Icon
//       File
//       Hidden
//       Form
//       Selection
//       Container
//       FieldProperty
//       ButtonProperty
//       Link
//       Action
//       ChoiceEntry
//       ChoiceOption
//       ChooserOption
//       Section
//       SectionEntry
//       From
//       Field
//       Exclude
//       ReadOnly
//       Range
//       Compact
//       Local
//       UTC
//       Comment
//       Post
//       Rich
//       Prompt
//       Display
//   IdType
//       NamespaceT
//       EntryT
//   NamespaceType
//       Goedel.Tool.Sitebuilder
//   ClassType
//       FrameStruct
//   NameType
//       Id
//       Entries
//       Type
//       Title
//       TypeEntries
//       Parent
//       Properties
//       Uri
//       Of
//       Choices
//       Items
//       Tag
//       To
//       Sections
//   TokenType
//       Uid

#pragma warning disable IDE0022, IDE0066, IDE1006, IDE0059, IDE0161, CS1591, CS8618
namespace Goedel.Tool.Sitebuilder {


    public enum FrameStructType {
        _Top,

        Namespace,
        Entry,
        Page,
        Menu,
        SubMenu,
        Selector,
        Class,
        SubClass,
        Struct,
        Fields,
        FieldItem,
        Property,
        Anchor,
        ButtonProperty,
        Container,
        Action,
        Link,
        Is,
        List,
        Selection,
        Boolean,
        Integer,
        DateTime,
        String,
        RichText,
        File,
        Text,
        Image,
        Icon,
        Avatar,
        Count,
        Choice,
        ChoiceEntry,
        Choices,
        ChoiceOption,
        Separator,
        Return,
        Button,
        Chooser,
        ChooserOption,
        Presentation,
        Form,
        Section,
        SectionEntry,
        From,
        Field,
        FieldProperty,
        Display,
        Description,
        Prompt,
        Exclude,
        ReadOnly,
        Range,
        Compact,
        Local,
        UTC,
        Comment,
        Post,
        Rich,
        Hidden,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public FrameStructType _Tag ();

        public _Choice? _Parent;
        public FrameStruct? _Base;

		public abstract void Serialize (StructureWriter Output, bool tag);

    	public virtual void Init (_Choice? parent) {
            _Parent = parent;
            _Base ??= parent?._Base;
			}

        

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice? parent) {
			Init (parent);
            _Base = parent?._Base;
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Namespace : _Choice {
        public ID<_Choice>				Id; 
        public List <Entry>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Namespace;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Namespace");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (Entry _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Namespace");
				}			
			}
		}

    public partial class Entry : _Choice {
        public ID<_Choice>				Id; 
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.Entry;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Entry");
				}

	        Output.WriteId ("Id", Id.ToString()); 
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Entry");
				}			
			}
		}

    public partial class Page : _Choice {
		public string					Title;
        public List <FieldItem>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Page;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Page");
				}

			Output.WriteAttribute ("Title", Title);
			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Page");
				}			
			}
		}

    public partial class Menu : _Choice {
        public List <FieldItem>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Menu;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Menu");
				}

			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Menu");
				}			
			}
		}

    public partial class SubMenu : _Choice {
		public string					Title;
        public List <FieldItem>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.SubMenu;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SubMenu");
				}

			Output.WriteAttribute ("Title", Title);
			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("SubMenu");
				}			
			}
		}

    public partial class Selector : _Choice {
        public List <FieldItem>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Selector;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Selector");
				}

			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Selector");
				}			
			}
		}

    public partial class Class : _Choice {
        public List <Struct>           TypeEntries = [];

        public override FrameStructType _Tag () =>FrameStructType.Class;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in TypeEntries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Class");
				}

			Output.StartList ("");
			foreach (Struct _e in TypeEntries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Class");
				}			
			}
		}

    public partial class SubClass : _Choice {
        public REF<_Choice>				Parent;
        public List <Struct>           TypeEntries = [];

        public override FrameStructType _Tag () =>FrameStructType.SubClass;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in TypeEntries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SubClass");
				}

	        Output.WriteId ("Parent", Parent.ToString());
			Output.StartList ("");
			foreach (Struct _e in TypeEntries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("SubClass");
				}			
			}
		}

    public partial class Struct : _Choice {
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.Struct;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Struct");
				}

	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Struct");
				}			
			}
		}

    public partial class Fields : _Choice {
        public List <Property>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Fields;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Fields");
				}

			Output.StartList ("");
			foreach (Property _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Fields");
				}			
			}
		}

    public partial class FieldItem : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.FieldItem;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("FieldItem");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("FieldItem");
				}			
			}
		}

    public partial class Property : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.Property;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Property");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Property");
				}			
			}
		}

    public partial class Anchor : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Anchor;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Anchor");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Anchor");
				}			
			}
		}

    public partial class ButtonProperty : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.ButtonProperty;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ButtonProperty");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("ButtonProperty");
				}			
			}
		}

    public partial class Container : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Container;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Container");
				}

			if (tag) {
				Output.EndElement ("Container");
				}			
			}
		}

    public partial class Action : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Action;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Action");
				}

			if (tag) {
				Output.EndElement ("Action");
				}			
			}
		}

    public partial class Link : _Choice {
		public string					Uri;

        public override FrameStructType _Tag () =>FrameStructType.Link;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Link");
				}

			Output.WriteAttribute ("Uri", Uri);
			if (tag) {
				Output.EndElement ("Link");
				}			
			}
		}

    public partial class Is : _Choice {
        public REF<_Choice>				Parent;
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Is;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Is");
				}

	        Output.WriteId ("Parent", Parent.ToString());
			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Is");
				}			
			}
		}

    public partial class List : _Choice {
        public REF<_Choice>				Of;
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.List;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("List");
				}

	        Output.WriteId ("Of", Of.ToString());
			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("List");
				}			
			}
		}

    public partial class Selection : _Choice {
        public REF<_Choice>				Of;
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Selection;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Selection");
				}

	        Output.WriteId ("Of", Of.ToString());
			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Selection");
				}			
			}
		}

    public partial class Boolean : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Boolean;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Boolean");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Boolean");
				}			
			}
		}

    public partial class Integer : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Integer;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Integer");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Integer");
				}			
			}
		}

    public partial class DateTime : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.DateTime;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("DateTime");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("DateTime");
				}			
			}
		}

    public partial class String : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.String;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("String");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("String");
				}			
			}
		}

    public partial class RichText : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.RichText;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("RichText");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("RichText");
				}			
			}
		}

    public partial class File : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.File;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("File");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("File");
				}			
			}
		}

    public partial class Text : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Text;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Text");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Text");
				}			
			}
		}

    public partial class Image : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Image;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Image");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Image");
				}			
			}
		}

    public partial class Icon : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Icon;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Icon");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Icon");
				}			
			}
		}

    public partial class Avatar : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Avatar;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Avatar");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Avatar");
				}			
			}
		}

    public partial class Count : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Count;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Count");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Count");
				}			
			}
		}

    public partial class Choice : _Choice {
        public List <ChoiceEntry>           Choices = [];

        public override FrameStructType _Tag () =>FrameStructType.Choice;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Choices) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Choice");
				}

			Output.StartList ("");
			foreach (ChoiceEntry _e in Choices) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Choice");
				}			
			}
		}

    public partial class ChoiceEntry : _Choice {
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.ChoiceEntry;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ChoiceEntry");
				}

	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("ChoiceEntry");
				}			
			}
		}

    public partial class Choices : _Choice {
        public List <ChoiceOption>           Items = [];

        public override FrameStructType _Tag () =>FrameStructType.Choices;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Items) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Choices");
				}

			Output.StartList ("");
			foreach (ChoiceOption _e in Items) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Choices");
				}			
			}
		}

    public partial class ChoiceOption : _Choice {
        public REF<_Choice>				Tag;
		public string					Text;

        public override FrameStructType _Tag () =>FrameStructType.ChoiceOption;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ChoiceOption");
				}

	        Output.WriteId ("Tag", Tag.ToString());
			Output.WriteAttribute ("Text", Text);
			if (tag) {
				Output.EndElement ("ChoiceOption");
				}			
			}
		}

    public partial class Separator : _Choice {
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Separator;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Separator");
				}

			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Separator");
				}			
			}
		}

    public partial class Return : _Choice {
        public REF<_Choice>				To;
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Return;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Return");
				}

	        Output.WriteId ("To", To.ToString());
			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Return");
				}			
			}
		}

    public partial class Button : _Choice {
        public REF<_Choice>				Action;
		public string					Title;
        public List <ButtonProperty>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Button;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Button");
				}

	        Output.WriteId ("Action", Action.ToString());
			Output.WriteAttribute ("Title", Title);
			Output.StartList ("");
			foreach (ButtonProperty _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Button");
				}			
			}
		}

    public partial class Chooser : _Choice {
        public List <ChooserOption>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Chooser;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Chooser");
				}

			Output.StartList ("");
			foreach (ChooserOption _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Chooser");
				}			
			}
		}

    public partial class ChooserOption : _Choice {
        public TOKEN<_Choice>			Action;
		public string					Title;

        public override FrameStructType _Tag () =>FrameStructType.ChooserOption;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ChooserOption");
				}

	        Output.WriteId ("Action", Action.ToString());
			Output.WriteAttribute ("Title", Title);
			if (tag) {
				Output.EndElement ("ChooserOption");
				}			
			}
		}

    public partial class Presentation : _Choice {
        public TOKEN<_Choice>			Id;
        public List <Section>           Sections = [];

        public override FrameStructType _Tag () =>FrameStructType.Presentation;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Sections) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Presentation");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.StartList ("");
			foreach (Section _e in Sections) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Presentation");
				}			
			}
		}

    public partial class Form : _Choice {
        public TOKEN<_Choice>			Id;
        public List <FieldProperty>           Properties = [];

        public override FrameStructType _Tag () =>FrameStructType.Form;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Properties) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Form");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.StartList ("");
			foreach (FieldProperty _e in Properties) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Form");
				}			
			}
		}

    public partial class Section : _Choice {
        public TOKEN<_Choice>			Id;
        public List <FieldItem>           Entries = [];

        public override FrameStructType _Tag () =>FrameStructType.Section;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Section");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.StartList ("");
			foreach (FieldItem _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Section");
				}			
			}
		}

    public partial class SectionEntry : _Choice {
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.SectionEntry;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SectionEntry");
				}

	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("SectionEntry");
				}			
			}
		}

    public partial class From : _Choice {
        public TOKEN<_Choice>			Id;
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.From;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("From");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("From");
				}			
			}
		}

    public partial class Field : _Choice {
        public TOKEN<_Choice>			Id;

        public override FrameStructType _Tag () =>FrameStructType.Field;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Field");
				}

	        Output.WriteId ("Id", Id.ToString());
			if (tag) {
				Output.EndElement ("Field");
				}			
			}
		}

    public partial class FieldProperty : _Choice {
        public _Choice					Type;

        public override FrameStructType _Tag () =>FrameStructType.FieldProperty;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			Type._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("FieldProperty");
				}

	        Type.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("FieldProperty");
				}			
			}
		}

    public partial class Display : _Choice {
        public TOKEN<_Choice>			Id;

        public override FrameStructType _Tag () =>FrameStructType.Display;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Display");
				}

	        Output.WriteId ("Id", Id.ToString());
			if (tag) {
				Output.EndElement ("Display");
				}			
			}
		}

    public partial class Description : _Choice {
		public string					Text;

        public override FrameStructType _Tag () =>FrameStructType.Description;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Description");
				}

			Output.WriteAttribute ("Text", Text);
			if (tag) {
				Output.EndElement ("Description");
				}			
			}
		}

    public partial class Prompt : _Choice {
		public string					Text;

        public override FrameStructType _Tag () =>FrameStructType.Prompt;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Prompt");
				}

			Output.WriteAttribute ("Text", Text);
			if (tag) {
				Output.EndElement ("Prompt");
				}			
			}
		}

    public partial class Exclude : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Exclude;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Exclude");
				}

			if (tag) {
				Output.EndElement ("Exclude");
				}			
			}
		}

    public partial class ReadOnly : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.ReadOnly;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ReadOnly");
				}

			if (tag) {
				Output.EndElement ("ReadOnly");
				}			
			}
		}

    public partial class Range : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Range;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Range");
				}

			if (tag) {
				Output.EndElement ("Range");
				}			
			}
		}

    public partial class Compact : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Compact;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Compact");
				}

			if (tag) {
				Output.EndElement ("Compact");
				}			
			}
		}

    public partial class Local : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Local;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Local");
				}

			if (tag) {
				Output.EndElement ("Local");
				}			
			}
		}

    public partial class UTC : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.UTC;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("UTC");
				}

			if (tag) {
				Output.EndElement ("UTC");
				}			
			}
		}

    public partial class Comment : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Comment;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Comment");
				}

			if (tag) {
				Output.EndElement ("Comment");
				}			
			}
		}

    public partial class Post : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Post;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Post");
				}

			if (tag) {
				Output.EndElement ("Post");
				}			
			}
		}

    public partial class Rich : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Rich;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Rich");
				}

			if (tag) {
				Output.EndElement ("Rich");
				}			
			}
		}

    public partial class Hidden : _Choice {

        public override FrameStructType _Tag () =>FrameStructType.Hidden;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Hidden");
				}

			if (tag) {
				Output.EndElement ("Hidden");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>?            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() =>  Label = null;

        public override FrameStructType _Tag () => FrameStructType._Label;

		public override void Serialize (StructureWriter Output, bool tag) =>Output.WriteId ("ID", Label?.ToString()??"");
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Namespace_Start,
		Namespace__Id,				
		Namespace__Entries,				
		Entry_Start,
		Entry__Id,				
		Entry__Type,				
		Page_Start,
		Page__Title,				
		Page__Entries,				
		Menu_Start,
		Menu__Entries,				
		SubMenu_Start,
		SubMenu__Title,				
		SubMenu__Entries,				
		Selector_Start,
		Selector__Entries,				
		Class_Start,
		Class__TypeEntries,				
		SubClass_Start,
		SubClass__Parent,				
		SubClass__TypeEntries,				
		Struct_Start,
		Struct__Type,				
		Fields_Start,
		Fields__Entries,				
		FieldItem_Start,
		FieldItem__Id,				
		FieldItem__Type,				
		Property_Start,
		Property__Id,				
		Property__Type,				
		Anchor_Start,
		Anchor__Properties,				
		ButtonProperty_Start,
		ButtonProperty__Id,				
		ButtonProperty__Type,				
		Container_Start,
		Action_Start,
		Link_Start,
		Link__Uri,				
		Is_Start,
		Is__Parent,				
		Is__Properties,				
		List_Start,
		List__Of,				
		List__Properties,				
		Selection_Start,
		Selection__Of,				
		Selection__Properties,				
		Boolean_Start,
		Boolean__Properties,				
		Integer_Start,
		Integer__Properties,				
		DateTime_Start,
		DateTime__Properties,				
		String_Start,
		String__Properties,				
		RichText_Start,
		RichText__Properties,				
		File_Start,
		File__Properties,				
		Text_Start,
		Text__Properties,				
		Image_Start,
		Image__Properties,				
		Icon_Start,
		Icon__Properties,				
		Avatar_Start,
		Avatar__Properties,				
		Count_Start,
		Count__Properties,				
		Choice_Start,
		Choice__Choices,				
		ChoiceEntry_Start,
		ChoiceEntry__Type,				
		Choices_Start,
		Choices__Items,				
		ChoiceOption_Start,
		ChoiceOption__Tag,				
		ChoiceOption__Text,				
		Separator_Start,
		Separator__Properties,				
		Return_Start,
		Return__To,				
		Return__Properties,				
		Button_Start,
		Button__Action,				
		Button__Title,				
		Button__Entries,				
		Chooser_Start,
		Chooser__Entries,				
		ChooserOption_Start,
		ChooserOption__Action,				
		ChooserOption__Title,				
		Presentation_Start,
		Presentation__Id,				
		Presentation__Sections,				
		Form_Start,
		Form__Id,				
		Form__Properties,				
		Section_Start,
		Section__Id,				
		Section__Entries,				
		SectionEntry_Start,
		SectionEntry__Type,				
		From_Start,
		From__Id,				
		From__Type,				
		Field_Start,
		Field__Id,				
		FieldProperty_Start,
		FieldProperty__Type,				
		Display_Start,
		Display__Id,				
		Description_Start,
		Description__Text,				
		Prompt_Start,
		Prompt__Text,				
		Exclude_Start,
		ReadOnly_Start,
		Range_Start,
		Compact_Start,
		Local_Start,
		UTC_Start,
		Comment_Start,
		Post_Start,
		Rich_Start,
		Hidden_Start,
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.Tool.Sitebuilder._Choice     Token;
        }

    public partial class FrameStruct : Goedel.Registry.Parser{
        public List <Goedel.Tool.Sitebuilder._Choice>        Top = [];
        public Registry	<Goedel.Tool.Sitebuilder._Choice>	Registry;
        public bool StartOfEntry {get;  private set;}
        StateCode								State = StateCode._Start;
        Goedel.Tool.Sitebuilder._Choice				Current;
        readonly List <_StackItem>						Stack = [];


        public static FrameStruct Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new FrameStruct() {
				Options = Options
				};

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new (File);
                Schema.Process(infile, Result);
                }
            Result.Init ();
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
                Entry._Base = this;
				Entry._InitChildren (null);
				}
			}

        public FrameStruct() {
            Registry = new Registry <Goedel.Tool.Sitebuilder._Choice> ();
            StartOfEntry = true;

			TYPE__NamespaceT = Registry.TYPE ("NamespaceT"); 
			TYPE__EntryT = Registry.TYPE ("EntryT"); 
			TYPE__Uid = Registry.TYPE ("Uid"); 



            }



        public TYPE<Goedel.Tool.Sitebuilder._Choice> TYPE__NamespaceT ;
        public TYPE<Goedel.Tool.Sitebuilder._Choice> TYPE__EntryT ;
        public TYPE<Goedel.Tool.Sitebuilder._Choice> TYPE__Uid ;

        private Goedel.Tool.Sitebuilder._Choice New_Choice(string Label) {
            switch (Label) {

                case "Namespace": return NewNamespace();
                case "Entry": return NewEntry();
                case "Page": return NewPage();
                case "Menu": return NewMenu();
                case "SubMenu": return NewSubMenu();
                case "Selector": return NewSelector();
                case "Class": return NewClass();
                case "SubClass": return NewSubClass();
                case "Struct": return NewStruct();
                case "Fields": return NewFields();
                case "FieldItem": return NewFieldItem();
                case "Property": return NewProperty();
                case "Anchor": return NewAnchor();
                case "ButtonProperty": return NewButtonProperty();
                case "Container": return NewContainer();
                case "Action": return NewAction();
                case "Link": return NewLink();
                case "Is": return NewIs();
                case "List": return NewList();
                case "Selection": return NewSelection();
                case "Boolean": return NewBoolean();
                case "Integer": return NewInteger();
                case "DateTime": return NewDateTime();
                case "String": return NewString();
                case "RichText": return NewRichText();
                case "File": return NewFile();
                case "Text": return NewText();
                case "Image": return NewImage();
                case "Icon": return NewIcon();
                case "Avatar": return NewAvatar();
                case "Count": return NewCount();
                case "Choice": return NewChoice();
                case "ChoiceEntry": return NewChoiceEntry();
                case "Choices": return NewChoices();
                case "ChoiceOption": return NewChoiceOption();
                case "Separator": return NewSeparator();
                case "Return": return NewReturn();
                case "Button": return NewButton();
                case "Chooser": return NewChooser();
                case "ChooserOption": return NewChooserOption();
                case "Presentation": return NewPresentation();
                case "Form": return NewForm();
                case "Section": return NewSection();
                case "SectionEntry": return NewSectionEntry();
                case "From": return NewFrom();
                case "Field": return NewField();
                case "FieldProperty": return NewFieldProperty();
                case "Display": return NewDisplay();
                case "Description": return NewDescription();
                case "Prompt": return NewPrompt();
                case "Exclude": return NewExclude();
                case "ReadOnly": return NewReadOnly();
                case "Range": return NewRange();
                case "Compact": return NewCompact();
                case "Local": return NewLocal();
                case "UTC": return NewUTC();
                case "Comment": return NewComment();
                case "Post": return NewPost();
                case "Rich": return NewRich();
                case "Hidden": return NewHidden();

				}

            throw new NotFoundReserved ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.Tool.Sitebuilder.Namespace NewNamespace() {
            Goedel.Tool.Sitebuilder.Namespace result = new ();
            Push (result);
            State = StateCode.Namespace_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Entry NewEntry() {
            Goedel.Tool.Sitebuilder.Entry result = new ();
            Push (result);
            State = StateCode.Entry_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Page NewPage() {
            Goedel.Tool.Sitebuilder.Page result = new ();
            Push (result);
            State = StateCode.Page_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Menu NewMenu() {
            Goedel.Tool.Sitebuilder.Menu result = new ();
            Push (result);
            State = StateCode.Menu_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.SubMenu NewSubMenu() {
            Goedel.Tool.Sitebuilder.SubMenu result = new ();
            Push (result);
            State = StateCode.SubMenu_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Selector NewSelector() {
            Goedel.Tool.Sitebuilder.Selector result = new ();
            Push (result);
            State = StateCode.Selector_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Class NewClass() {
            Goedel.Tool.Sitebuilder.Class result = new ();
            Push (result);
            State = StateCode.Class_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.SubClass NewSubClass() {
            Goedel.Tool.Sitebuilder.SubClass result = new ();
            Push (result);
            State = StateCode.SubClass_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Struct NewStruct() {
            Goedel.Tool.Sitebuilder.Struct result = new ();
            Push (result);
            State = StateCode.Struct_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Fields NewFields() {
            Goedel.Tool.Sitebuilder.Fields result = new ();
            Push (result);
            State = StateCode.Fields_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.FieldItem NewFieldItem() {
            Goedel.Tool.Sitebuilder.FieldItem result = new ();
            Push (result);
            State = StateCode.FieldItem_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Property NewProperty() {
            Goedel.Tool.Sitebuilder.Property result = new ();
            Push (result);
            State = StateCode.Property_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Anchor NewAnchor() {
            Goedel.Tool.Sitebuilder.Anchor result = new ();
            Push (result);
            State = StateCode.Anchor_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.ButtonProperty NewButtonProperty() {
            Goedel.Tool.Sitebuilder.ButtonProperty result = new ();
            Push (result);
            State = StateCode.ButtonProperty_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Container NewContainer() {
            Goedel.Tool.Sitebuilder.Container result = new ();
            Push (result);
            State = StateCode.Container_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Action NewAction() {
            Goedel.Tool.Sitebuilder.Action result = new ();
            Push (result);
            State = StateCode.Action_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Link NewLink() {
            Goedel.Tool.Sitebuilder.Link result = new ();
            Push (result);
            State = StateCode.Link_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Is NewIs() {
            Goedel.Tool.Sitebuilder.Is result = new ();
            Push (result);
            State = StateCode.Is_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.List NewList() {
            Goedel.Tool.Sitebuilder.List result = new ();
            Push (result);
            State = StateCode.List_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Selection NewSelection() {
            Goedel.Tool.Sitebuilder.Selection result = new ();
            Push (result);
            State = StateCode.Selection_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Boolean NewBoolean() {
            Goedel.Tool.Sitebuilder.Boolean result = new ();
            Push (result);
            State = StateCode.Boolean_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Integer NewInteger() {
            Goedel.Tool.Sitebuilder.Integer result = new ();
            Push (result);
            State = StateCode.Integer_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.DateTime NewDateTime() {
            Goedel.Tool.Sitebuilder.DateTime result = new ();
            Push (result);
            State = StateCode.DateTime_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.String NewString() {
            Goedel.Tool.Sitebuilder.String result = new ();
            Push (result);
            State = StateCode.String_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.RichText NewRichText() {
            Goedel.Tool.Sitebuilder.RichText result = new ();
            Push (result);
            State = StateCode.RichText_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.File NewFile() {
            Goedel.Tool.Sitebuilder.File result = new ();
            Push (result);
            State = StateCode.File_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Text NewText() {
            Goedel.Tool.Sitebuilder.Text result = new ();
            Push (result);
            State = StateCode.Text_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Image NewImage() {
            Goedel.Tool.Sitebuilder.Image result = new ();
            Push (result);
            State = StateCode.Image_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Icon NewIcon() {
            Goedel.Tool.Sitebuilder.Icon result = new ();
            Push (result);
            State = StateCode.Icon_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Avatar NewAvatar() {
            Goedel.Tool.Sitebuilder.Avatar result = new ();
            Push (result);
            State = StateCode.Avatar_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Count NewCount() {
            Goedel.Tool.Sitebuilder.Count result = new ();
            Push (result);
            State = StateCode.Count_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Choice NewChoice() {
            Goedel.Tool.Sitebuilder.Choice result = new ();
            Push (result);
            State = StateCode.Choice_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.ChoiceEntry NewChoiceEntry() {
            Goedel.Tool.Sitebuilder.ChoiceEntry result = new ();
            Push (result);
            State = StateCode.ChoiceEntry_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Choices NewChoices() {
            Goedel.Tool.Sitebuilder.Choices result = new ();
            Push (result);
            State = StateCode.Choices_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.ChoiceOption NewChoiceOption() {
            Goedel.Tool.Sitebuilder.ChoiceOption result = new ();
            Push (result);
            State = StateCode.ChoiceOption_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Separator NewSeparator() {
            Goedel.Tool.Sitebuilder.Separator result = new ();
            Push (result);
            State = StateCode.Separator_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Return NewReturn() {
            Goedel.Tool.Sitebuilder.Return result = new ();
            Push (result);
            State = StateCode.Return_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Button NewButton() {
            Goedel.Tool.Sitebuilder.Button result = new ();
            Push (result);
            State = StateCode.Button_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Chooser NewChooser() {
            Goedel.Tool.Sitebuilder.Chooser result = new ();
            Push (result);
            State = StateCode.Chooser_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.ChooserOption NewChooserOption() {
            Goedel.Tool.Sitebuilder.ChooserOption result = new ();
            Push (result);
            State = StateCode.ChooserOption_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Presentation NewPresentation() {
            Goedel.Tool.Sitebuilder.Presentation result = new ();
            Push (result);
            State = StateCode.Presentation_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Form NewForm() {
            Goedel.Tool.Sitebuilder.Form result = new ();
            Push (result);
            State = StateCode.Form_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Section NewSection() {
            Goedel.Tool.Sitebuilder.Section result = new ();
            Push (result);
            State = StateCode.Section_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.SectionEntry NewSectionEntry() {
            Goedel.Tool.Sitebuilder.SectionEntry result = new ();
            Push (result);
            State = StateCode.SectionEntry_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.From NewFrom() {
            Goedel.Tool.Sitebuilder.From result = new ();
            Push (result);
            State = StateCode.From_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Field NewField() {
            Goedel.Tool.Sitebuilder.Field result = new ();
            Push (result);
            State = StateCode.Field_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.FieldProperty NewFieldProperty() {
            Goedel.Tool.Sitebuilder.FieldProperty result = new ();
            Push (result);
            State = StateCode.FieldProperty_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Display NewDisplay() {
            Goedel.Tool.Sitebuilder.Display result = new ();
            Push (result);
            State = StateCode.Display_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Description NewDescription() {
            Goedel.Tool.Sitebuilder.Description result = new ();
            Push (result);
            State = StateCode.Description_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Prompt NewPrompt() {
            Goedel.Tool.Sitebuilder.Prompt result = new ();
            Push (result);
            State = StateCode.Prompt_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Exclude NewExclude() {
            Goedel.Tool.Sitebuilder.Exclude result = new ();
            Push (result);
            State = StateCode.Exclude_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.ReadOnly NewReadOnly() {
            Goedel.Tool.Sitebuilder.ReadOnly result = new ();
            Push (result);
            State = StateCode.ReadOnly_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Range NewRange() {
            Goedel.Tool.Sitebuilder.Range result = new ();
            Push (result);
            State = StateCode.Range_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Compact NewCompact() {
            Goedel.Tool.Sitebuilder.Compact result = new ();
            Push (result);
            State = StateCode.Compact_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Local NewLocal() {
            Goedel.Tool.Sitebuilder.Local result = new ();
            Push (result);
            State = StateCode.Local_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.UTC NewUTC() {
            Goedel.Tool.Sitebuilder.UTC result = new ();
            Push (result);
            State = StateCode.UTC_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Comment NewComment() {
            Goedel.Tool.Sitebuilder.Comment result = new ();
            Push (result);
            State = StateCode.Comment_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Post NewPost() {
            Goedel.Tool.Sitebuilder.Post result = new ();
            Push (result);
            State = StateCode.Post_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Rich NewRich() {
            Goedel.Tool.Sitebuilder.Rich result = new ();
            Push (result);
            State = StateCode.Rich_Start;
            return result;
            }


        private Goedel.Tool.Sitebuilder.Hidden NewHidden() {
            Goedel.Tool.Sitebuilder.Hidden result = new ();
            Push (result);
            State = StateCode.Hidden_Start;
            return result;
            }


        static Goedel.Tool.Sitebuilder.FrameStructType _Reserved(string Label) {
            switch (Label) {

                case "Namespace": return Goedel.Tool.Sitebuilder.FrameStructType.Namespace;
                case "Entry": return Goedel.Tool.Sitebuilder.FrameStructType.Entry;
                case "Page": return Goedel.Tool.Sitebuilder.FrameStructType.Page;
                case "Menu": return Goedel.Tool.Sitebuilder.FrameStructType.Menu;
                case "SubMenu": return Goedel.Tool.Sitebuilder.FrameStructType.SubMenu;
                case "Selector": return Goedel.Tool.Sitebuilder.FrameStructType.Selector;
                case "Class": return Goedel.Tool.Sitebuilder.FrameStructType.Class;
                case "SubClass": return Goedel.Tool.Sitebuilder.FrameStructType.SubClass;
                case "Struct": return Goedel.Tool.Sitebuilder.FrameStructType.Struct;
                case "Fields": return Goedel.Tool.Sitebuilder.FrameStructType.Fields;
                case "FieldItem": return Goedel.Tool.Sitebuilder.FrameStructType.FieldItem;
                case "Property": return Goedel.Tool.Sitebuilder.FrameStructType.Property;
                case "Anchor": return Goedel.Tool.Sitebuilder.FrameStructType.Anchor;
                case "ButtonProperty": return Goedel.Tool.Sitebuilder.FrameStructType.ButtonProperty;
                case "Container": return Goedel.Tool.Sitebuilder.FrameStructType.Container;
                case "Action": return Goedel.Tool.Sitebuilder.FrameStructType.Action;
                case "Link": return Goedel.Tool.Sitebuilder.FrameStructType.Link;
                case "Is": return Goedel.Tool.Sitebuilder.FrameStructType.Is;
                case "List": return Goedel.Tool.Sitebuilder.FrameStructType.List;
                case "Selection": return Goedel.Tool.Sitebuilder.FrameStructType.Selection;
                case "Boolean": return Goedel.Tool.Sitebuilder.FrameStructType.Boolean;
                case "Integer": return Goedel.Tool.Sitebuilder.FrameStructType.Integer;
                case "DateTime": return Goedel.Tool.Sitebuilder.FrameStructType.DateTime;
                case "String": return Goedel.Tool.Sitebuilder.FrameStructType.String;
                case "RichText": return Goedel.Tool.Sitebuilder.FrameStructType.RichText;
                case "File": return Goedel.Tool.Sitebuilder.FrameStructType.File;
                case "Text": return Goedel.Tool.Sitebuilder.FrameStructType.Text;
                case "Image": return Goedel.Tool.Sitebuilder.FrameStructType.Image;
                case "Icon": return Goedel.Tool.Sitebuilder.FrameStructType.Icon;
                case "Avatar": return Goedel.Tool.Sitebuilder.FrameStructType.Avatar;
                case "Count": return Goedel.Tool.Sitebuilder.FrameStructType.Count;
                case "Choice": return Goedel.Tool.Sitebuilder.FrameStructType.Choice;
                case "ChoiceEntry": return Goedel.Tool.Sitebuilder.FrameStructType.ChoiceEntry;
                case "Choices": return Goedel.Tool.Sitebuilder.FrameStructType.Choices;
                case "ChoiceOption": return Goedel.Tool.Sitebuilder.FrameStructType.ChoiceOption;
                case "Separator": return Goedel.Tool.Sitebuilder.FrameStructType.Separator;
                case "Return": return Goedel.Tool.Sitebuilder.FrameStructType.Return;
                case "Button": return Goedel.Tool.Sitebuilder.FrameStructType.Button;
                case "Chooser": return Goedel.Tool.Sitebuilder.FrameStructType.Chooser;
                case "ChooserOption": return Goedel.Tool.Sitebuilder.FrameStructType.ChooserOption;
                case "Presentation": return Goedel.Tool.Sitebuilder.FrameStructType.Presentation;
                case "Form": return Goedel.Tool.Sitebuilder.FrameStructType.Form;
                case "Section": return Goedel.Tool.Sitebuilder.FrameStructType.Section;
                case "SectionEntry": return Goedel.Tool.Sitebuilder.FrameStructType.SectionEntry;
                case "From": return Goedel.Tool.Sitebuilder.FrameStructType.From;
                case "Field": return Goedel.Tool.Sitebuilder.FrameStructType.Field;
                case "FieldProperty": return Goedel.Tool.Sitebuilder.FrameStructType.FieldProperty;
                case "Display": return Goedel.Tool.Sitebuilder.FrameStructType.Display;
                case "Description": return Goedel.Tool.Sitebuilder.FrameStructType.Description;
                case "Prompt": return Goedel.Tool.Sitebuilder.FrameStructType.Prompt;
                case "Exclude": return Goedel.Tool.Sitebuilder.FrameStructType.Exclude;
                case "ReadOnly": return Goedel.Tool.Sitebuilder.FrameStructType.ReadOnly;
                case "Range": return Goedel.Tool.Sitebuilder.FrameStructType.Range;
                case "Compact": return Goedel.Tool.Sitebuilder.FrameStructType.Compact;
                case "Local": return Goedel.Tool.Sitebuilder.FrameStructType.Local;
                case "UTC": return Goedel.Tool.Sitebuilder.FrameStructType.UTC;
                case "Comment": return Goedel.Tool.Sitebuilder.FrameStructType.Comment;
                case "Post": return Goedel.Tool.Sitebuilder.FrameStructType.Post;
                case "Rich": return Goedel.Tool.Sitebuilder.FrameStructType.Rich;
                case "Hidden": return Goedel.Tool.Sitebuilder.FrameStructType.Hidden;

                }
            return Goedel.Tool.Sitebuilder.FrameStructType._Bottom;
            }


		public void Serialize (TextWriter Output)=> Serialize (Output, OutputFormat.Goedel);

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.Tool.Sitebuilder._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.Tool.Sitebuilder._Choice Token) {
            _StackItem Item = new  () {
					State = State,
					Token = Current
					};

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
			Assert.AssertFalse (Stack.Count == 0, InternalError.Throw);

            _StackItem Item = Stack[^1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) {
				return;
				}
			Assert.AssertFalse (Token == TokenType.INVALID, InvalidToken.Throw);

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else {
							throw new ExpectedStart ();
							}

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Namespace)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new Expected("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) { 
                            State = StateCode._End;
                            break;
                            }
                        else {
							throw new ExpectedClass();
							}

                    case StateCode._End: {                  //      -
                        throw new TooManyClose();
						}

                    case StateCode.Namespace_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Namespace Current_Cast = (Goedel.Tool.Sitebuilder.Namespace)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__NamespaceT, Current_Cast);
                            State = StateCode.Namespace__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Namespace__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Namespace__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Namespace Current_Cast = (Goedel.Tool.Sitebuilder.Namespace)Current;
                            Current_Cast.Entries.Add (NewEntry ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Entry_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Entry Current_Cast = (Goedel.Tool.Sitebuilder.Entry)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Entry__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Entry__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.Entry Current_Cast = (Goedel.Tool.Sitebuilder.Entry)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Page) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Menu) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Selector) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Class) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.SubClass) ) {
                                State = StateCode.Entry__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Page Menu Selector Class SubClass ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Page Menu Selector Class SubClass ]");
                            }

                    case StateCode.Entry__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Page_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.Page Current_Cast = (Goedel.Tool.Sitebuilder.Page)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.Page__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Page__Title:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Page__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Page__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Page Current_Cast = (Goedel.Tool.Sitebuilder.Page)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Menu_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Menu__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Menu__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Menu Current_Cast = (Goedel.Tool.Sitebuilder.Menu)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.SubMenu_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.SubMenu Current_Cast = (Goedel.Tool.Sitebuilder.SubMenu)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.SubMenu__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.SubMenu__Title:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.SubMenu__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.SubMenu__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.SubMenu Current_Cast = (Goedel.Tool.Sitebuilder.SubMenu)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Selector_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Selector__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Selector__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Selector Current_Cast = (Goedel.Tool.Sitebuilder.Selector)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Class_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Class__TypeEntries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Class__TypeEntries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Class Current_Cast = (Goedel.Tool.Sitebuilder.Class)Current;
                            Current_Cast.TypeEntries.Add (NewStruct ());
                            Represent = true;
                            }

                        break;


                    case StateCode.SubClass_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.SubClass Current_Cast = (Goedel.Tool.Sitebuilder.SubClass)Current;
                            Current_Cast.Parent = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.SubClass__Parent;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.SubClass__Parent:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.SubClass__TypeEntries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.SubClass__TypeEntries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.SubClass Current_Cast = (Goedel.Tool.Sitebuilder.SubClass)Current;
                            Current_Cast.TypeEntries.Add (NewStruct ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Struct_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.Struct Current_Cast = (Goedel.Tool.Sitebuilder.Struct)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Fields) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Description) ) {
                                State = StateCode.Struct__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Fields Description ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Fields Description ]");
                            }

                    case StateCode.Struct__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Fields_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Fields__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Fields__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Fields Current_Cast = (Goedel.Tool.Sitebuilder.Fields)Current;
                            Current_Cast.Entries.Add (NewProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.FieldItem_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.FieldItem Current_Cast = (Goedel.Tool.Sitebuilder.FieldItem)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.FieldItem__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.FieldItem__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.FieldItem Current_Cast = (Goedel.Tool.Sitebuilder.FieldItem)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Button) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Chooser) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Separator) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.SubMenu) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Return) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Is) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Boolean) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Integer) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.DateTime) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.String) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Text) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Anchor) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.RichText) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Image) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Avatar) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.List) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Choice) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Selector) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Count) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Presentation) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Icon) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.File) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Hidden) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Form) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Selection) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Container) ) {
                                State = StateCode.FieldItem__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Button Chooser Separator SubMenu Return Is Boolean Integer DateTime String Text Anchor RichText Image Avatar List Choice Selector Count Presentation Icon File Hidden Form Selection Container ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Button Chooser Separator SubMenu Return Is Boolean Integer DateTime String Text Anchor RichText Image Avatar List Choice Selector Count Presentation Icon File Hidden Form Selection Container ]");
                            }

                    case StateCode.FieldItem__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Property_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Property Current_Cast = (Goedel.Tool.Sitebuilder.Property)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Property__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Property__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.Property Current_Cast = (Goedel.Tool.Sitebuilder.Property)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Is) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Boolean) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Integer) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.DateTime) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.String) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Text) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Anchor) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Image) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.List) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Choice) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Separator) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.SubMenu) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Avatar) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Presentation) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Icon) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.File) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Hidden) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Selection) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Form) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.RichText) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Container) ) {
                                State = StateCode.Property__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Is Boolean Integer DateTime String Text Anchor Image List Choice Separator SubMenu Avatar Presentation Icon File Hidden Selection Form RichText Container ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Is Boolean Integer DateTime String Text Anchor Image List Choice Separator SubMenu Avatar Presentation Icon File Hidden Selection Form RichText Container ]");
                            }

                    case StateCode.Property__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Anchor_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Anchor__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Anchor__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Anchor Current_Cast = (Goedel.Tool.Sitebuilder.Anchor)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.ButtonProperty_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.ButtonProperty Current_Cast = (Goedel.Tool.Sitebuilder.ButtonProperty)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.ButtonProperty__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.ButtonProperty__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.ButtonProperty Current_Cast = (Goedel.Tool.Sitebuilder.ButtonProperty)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Boolean) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Integer) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.String) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Link) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Action) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Description) ) {
                                State = StateCode.ButtonProperty__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Boolean Integer String Link Action Description ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Boolean Integer String Link Action Description ]");
                            }

                    case StateCode.ButtonProperty__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Container_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Action_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Link_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.Link Current_Cast = (Goedel.Tool.Sitebuilder.Link)Current;
                            Current_Cast.Uri = Text;
                            State = StateCode.Link__Uri;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Link__Uri:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Is_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Is Current_Cast = (Goedel.Tool.Sitebuilder.Is)Current;
                            Current_Cast.Parent = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Is__Parent;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Is__Parent:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Is__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Is__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Is Current_Cast = (Goedel.Tool.Sitebuilder.Is)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.List_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.List Current_Cast = (Goedel.Tool.Sitebuilder.List)Current;
                            Current_Cast.Of = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.List__Of;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.List__Of:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.List__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.List__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.List Current_Cast = (Goedel.Tool.Sitebuilder.List)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Selection_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Selection Current_Cast = (Goedel.Tool.Sitebuilder.Selection)Current;
                            Current_Cast.Of = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Selection__Of;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Selection__Of:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Selection__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Selection__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Selection Current_Cast = (Goedel.Tool.Sitebuilder.Selection)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Boolean_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Boolean__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Boolean__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Boolean Current_Cast = (Goedel.Tool.Sitebuilder.Boolean)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Integer_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Integer__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Integer__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Integer Current_Cast = (Goedel.Tool.Sitebuilder.Integer)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.DateTime_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.DateTime__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.DateTime__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.DateTime Current_Cast = (Goedel.Tool.Sitebuilder.DateTime)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.String_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.String__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.String__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.String Current_Cast = (Goedel.Tool.Sitebuilder.String)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.RichText_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.RichText__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.RichText__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.RichText Current_Cast = (Goedel.Tool.Sitebuilder.RichText)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.File_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.File__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.File__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.File Current_Cast = (Goedel.Tool.Sitebuilder.File)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Text_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Text__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Text__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Text Current_Cast = (Goedel.Tool.Sitebuilder.Text)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Image_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Image__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Image__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Image Current_Cast = (Goedel.Tool.Sitebuilder.Image)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Icon_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Icon__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Icon__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Icon Current_Cast = (Goedel.Tool.Sitebuilder.Icon)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Avatar_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Avatar__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Avatar__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Avatar Current_Cast = (Goedel.Tool.Sitebuilder.Avatar)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Count_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Count__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Count__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Count Current_Cast = (Goedel.Tool.Sitebuilder.Count)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Choice_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Choice__Choices;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Choice__Choices: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Choice Current_Cast = (Goedel.Tool.Sitebuilder.Choice)Current;
                            Current_Cast.Choices.Add (NewChoiceEntry ());
                            Represent = true;
                            }

                        break;


                    case StateCode.ChoiceEntry_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.ChoiceEntry Current_Cast = (Goedel.Tool.Sitebuilder.ChoiceEntry)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Description) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Choices) ) {
                                State = StateCode.ChoiceEntry__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Description Choices ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Description Choices ]");
                            }

                    case StateCode.ChoiceEntry__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Choices_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Choices__Items;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Choices__Items: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Choices Current_Cast = (Goedel.Tool.Sitebuilder.Choices)Current;
                            Current_Cast.Items.Add (NewChoiceOption ());
                            Represent = true;
                            }

                        break;


                    case StateCode.ChoiceOption_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.ChoiceOption Current_Cast = (Goedel.Tool.Sitebuilder.ChoiceOption)Current;
                            Current_Cast.Tag = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.ChoiceOption__Tag;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.ChoiceOption__Tag:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.ChoiceOption Current_Cast = (Goedel.Tool.Sitebuilder.ChoiceOption)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.ChoiceOption__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.ChoiceOption__Text:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Separator_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Separator__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Separator__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Separator Current_Cast = (Goedel.Tool.Sitebuilder.Separator)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Return_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Return Current_Cast = (Goedel.Tool.Sitebuilder.Return)Current;
                            Current_Cast.To = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Return__To;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Return__To:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Return__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Return__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Return Current_Cast = (Goedel.Tool.Sitebuilder.Return)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Button_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Button Current_Cast = (Goedel.Tool.Sitebuilder.Button)Current;
                            Current_Cast.Action = Registry.REF(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Button__Action;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Button__Action:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.Button Current_Cast = (Goedel.Tool.Sitebuilder.Button)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.Button__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Button__Title:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Button__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Button__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Button Current_Cast = (Goedel.Tool.Sitebuilder.Button)Current;
                            Current_Cast.Entries.Add (NewButtonProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Chooser_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Chooser__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Chooser__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Chooser Current_Cast = (Goedel.Tool.Sitebuilder.Chooser)Current;
                            Current_Cast.Entries.Add (NewChooserOption ());
                            Represent = true;
                            }

                        break;


                    case StateCode.ChooserOption_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.ChooserOption Current_Cast = (Goedel.Tool.Sitebuilder.ChooserOption)Current;
                            Current_Cast.Action = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.ChooserOption__Action;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.ChooserOption__Action:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.ChooserOption Current_Cast = (Goedel.Tool.Sitebuilder.ChooserOption)Current;
                            Current_Cast.Title = Text;
                            State = StateCode.ChooserOption__Title;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.ChooserOption__Title:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Presentation_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Presentation Current_Cast = (Goedel.Tool.Sitebuilder.Presentation)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__Uid, Current_Cast);
                            State = StateCode.Presentation__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Presentation__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Presentation__Sections;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Presentation__Sections: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Presentation Current_Cast = (Goedel.Tool.Sitebuilder.Presentation)Current;
                            Current_Cast.Sections.Add (NewSection ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Form_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Form Current_Cast = (Goedel.Tool.Sitebuilder.Form)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Form__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Form__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Form__Properties;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Form__Properties: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Form Current_Cast = (Goedel.Tool.Sitebuilder.Form)Current;
                            Current_Cast.Properties.Add (NewFieldProperty ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Section_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Section Current_Cast = (Goedel.Tool.Sitebuilder.Section)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Section__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Section__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Section__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Section__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Sitebuilder.Section Current_Cast = (Goedel.Tool.Sitebuilder.Section)Current;
                            Current_Cast.Entries.Add (NewFieldItem ());
                            Represent = true;
                            }

                        break;


                    case StateCode.SectionEntry_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.SectionEntry Current_Cast = (Goedel.Tool.Sitebuilder.SectionEntry)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.From) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Field) ) {
                                State = StateCode.SectionEntry__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [From Field ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [From Field ]");
                            }

                    case StateCode.SectionEntry__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.From_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.From Current_Cast = (Goedel.Tool.Sitebuilder.From)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.From__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.From__Id:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.From Current_Cast = (Goedel.Tool.Sitebuilder.From)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.From) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Field) ) {
                                State = StateCode.From__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [From Field ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [From Field ]");
                            }

                    case StateCode.From__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Field_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Field Current_Cast = (Goedel.Tool.Sitebuilder.Field)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Field__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Field__Id:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.FieldProperty_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.Sitebuilder.FieldProperty Current_Cast = (Goedel.Tool.Sitebuilder.FieldProperty)Current;
                            Goedel.Tool.Sitebuilder.FrameStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Exclude) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Description) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.ReadOnly) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Range) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Compact) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Local) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.UTC) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Comment) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Post) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Rich) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Hidden) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Prompt) |
									(LabelType == Goedel.Tool.Sitebuilder.FrameStructType.Display) ) {
                                State = StateCode.FieldProperty__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new Expected ("Parser Error Expected [Exclude Description ReadOnly Range Compact Local UTC Comment Post Rich Hidden Prompt Display ]");
                                }
                            break;
                            }
                        else { 
						    throw new Expected("Parser Error Expected [Exclude Description ReadOnly Range Compact Local UTC Comment Post Rich Hidden Prompt Display ]");
                            }

                    case StateCode.FieldProperty__Type:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Display_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Sitebuilder.Display Current_Cast = (Goedel.Tool.Sitebuilder.Display)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__EntryT, Current_Cast);
                            State = StateCode.Display__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Display__Id:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Description_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.Description Current_Cast = (Goedel.Tool.Sitebuilder.Description)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Description__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Description__Text:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Prompt_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Sitebuilder.Prompt Current_Cast = (Goedel.Tool.Sitebuilder.Prompt)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Prompt__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Prompt__Text:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Exclude_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.ReadOnly_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Range_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Compact_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Local_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.UTC_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Comment_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Post_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Rich_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Hidden_Start:
                        Pop ();
                        Represent = true; 
                        break;

                    default: {
                        throw new UnreachableCode();
						}
                    }
                }
            }
        }
	}
#pragma warning restore IDE0022	

