
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;


//
// Namespace Goedel.Tool.ASN
// Class ASN2
//


// Types
//   TopTypeType
//       Namespace
//       ROOT
//       OID
//       Class
//       Object
//       SingularObject
//   TypeType
//       Entry
//       Member
//       OIDRef
//       Any
//       Bits
//       VBits
//       Octets
//       Integer
//       BigInteger
//       Boolean
//       Time
//       List
//       Set
//       Choice
//       IA5String
//       BMPString
//       UTF8String
//       PrintableString
//       Qualifier
//       Code
//       Implicit
//       Explicit
//       Optional
//       Default
//       Context
//   IdType
//       ArcName
//   NamespaceType
//       Goedel.Tool.ASN
//   ClassType
//       ASN2
//   NameType
//       Name
//       Entries
//       Value
//       Root
//       Spec
//       Qualifiers
//   TokenType
//       IDName

namespace Goedel.Tool.ASN {


    public enum ASN2Type {
        _Top,

        Namespace,
        ROOT,
        Entry,
        OID,
        Class,
        Object,
        SingularObject,
        Member,
        OIDRef,
        Any,
        Bits,
        VBits,
        Octets,
        Integer,
        BigInteger,
        Boolean,
        Time,
        List,
        Set,
        Choice,
        IA5String,
        BMPString,
        UTF8String,
        PrintableString,
        Qualifier,
        Code,
        Implicit,
        Explicit,
        Context,
        Optional,
        Default,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public ASN2Type _Tag ();

		public abstract void Serialize (StructureWriter Output, bool tag);

		public virtual void Init (_Choice Parent) {
			}

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice Parent) {
			Init (Parent);
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Namespace : _Choice {
        public TOKEN<_Choice>			Name;

        public override ASN2Type _Tag () {
            return ASN2Type.Namespace;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Namespace");
				}

	        Output.WriteId ("Name", Name.ToString());
			if (tag) {
				Output.EndElement ("Namespace");
				}			
			}
		}

    public partial class ROOT : _Choice {
        public ID<_Choice>				Name; 
        public List <Entry>           Entries = new List<Entry> ();

        public override ASN2Type _Tag () {
            return ASN2Type.ROOT;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ROOT");
				}

	        Output.WriteId ("Name", Name.ToString()); 
			Output.StartList ("");
			foreach (Entry _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("ROOT");
				}			
			}
		}

    public partial class Entry : _Choice {
        public TOKEN<_Choice>			Name;
		public int						Value;

        public override ASN2Type _Tag () {
            return ASN2Type.Entry;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Entry");
				}

	        Output.WriteId ("Name", Name.ToString());
			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Entry");
				}			
			}
		}

    public partial class OID : _Choice {
        public ID<_Choice>				Name; 
        public REF<_Choice>				Root;
		public int						Value;

        public override ASN2Type _Tag () {
            return ASN2Type.OID;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("OID");
				}

	        Output.WriteId ("Name", Name.ToString()); 
	        Output.WriteId ("Root", Root.ToString());
			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("OID");
				}			
			}
		}

    public partial class Class : _Choice {
        public ID<_Choice>				Name; 
        public List <Member>           Entries = new List<Member> ();

        public override ASN2Type _Tag () {
            return ASN2Type.Class;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Class");
				}

	        Output.WriteId ("Name", Name.ToString()); 
			Output.StartList ("");
			foreach (Member _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Class");
				}			
			}
		}

    public partial class Object : _Choice {
        public ID<_Choice>				Name; 
        public REF<_Choice>				OID;
        public List <Member>           Entries = new List<Member> ();

        public override ASN2Type _Tag () {
            return ASN2Type.Object;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Object");
				}

	        Output.WriteId ("Name", Name.ToString()); 
	        Output.WriteId ("OID", OID.ToString());
			Output.StartList ("");
			foreach (Member _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Object");
				}			
			}
		}

    public partial class SingularObject : _Choice {
        public ID<_Choice>				Name; 
        public REF<_Choice>				OID;
        public List <Member>           Entries = new List<Member> ();

        public override ASN2Type _Tag () {
            return ASN2Type.SingularObject;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SingularObject");
				}

	        Output.WriteId ("Name", Name.ToString()); 
	        Output.WriteId ("OID", OID.ToString());
			Output.StartList ("");
			foreach (Member _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("SingularObject");
				}			
			}
		}

    public partial class Member : _Choice {
        public TOKEN<_Choice>			Name;
        public _Choice					Spec;
        public List <Qualifier>           Qualifiers = new List<Qualifier> ();

        public override ASN2Type _Tag () {
            return ASN2Type.Member;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Spec._InitChildren (this);
			foreach (var Sub in Qualifiers) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Member");
				}

	        Output.WriteId ("Name", Name.ToString());
	        Spec.Serialize (Output, true);
			Output.StartList ("");
			foreach (Qualifier _e in Qualifiers) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Member");
				}			
			}
		}

    public partial class OIDRef : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.OIDRef;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("OIDRef");
				}

			if (tag) {
				Output.EndElement ("OIDRef");
				}			
			}
		}

    public partial class Any : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Any;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Any");
				}

			if (tag) {
				Output.EndElement ("Any");
				}			
			}
		}

    public partial class Bits : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Bits;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Bits");
				}

			if (tag) {
				Output.EndElement ("Bits");
				}			
			}
		}

    public partial class VBits : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.VBits;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("VBits");
				}

			if (tag) {
				Output.EndElement ("VBits");
				}			
			}
		}

    public partial class Octets : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Octets;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Octets");
				}

			if (tag) {
				Output.EndElement ("Octets");
				}			
			}
		}

    public partial class Integer : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Integer;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Integer");
				}

			if (tag) {
				Output.EndElement ("Integer");
				}			
			}
		}

    public partial class BigInteger : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.BigInteger;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("BigInteger");
				}

			if (tag) {
				Output.EndElement ("BigInteger");
				}			
			}
		}

    public partial class Boolean : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Boolean;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Boolean");
				}

			if (tag) {
				Output.EndElement ("Boolean");
				}			
			}
		}

    public partial class Time : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Time;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Time");
				}

			if (tag) {
				Output.EndElement ("Time");
				}			
			}
		}

    public partial class List : _Choice {
        public _Choice					Spec;

        public override ASN2Type _Tag () {
            return ASN2Type.List;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Spec._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("List");
				}

	        Spec.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("List");
				}			
			}
		}

    public partial class Set : _Choice {
        public _Choice					Spec;

        public override ASN2Type _Tag () {
            return ASN2Type.Set;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Spec._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Set");
				}

	        Spec.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Set");
				}			
			}
		}

    public partial class Choice : _Choice {
        public List <Member>           Entries = new List<Member> ();

        public override ASN2Type _Tag () {
            return ASN2Type.Choice;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Choice");
				}

			Output.StartList ("");
			foreach (Member _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Choice");
				}			
			}
		}

    public partial class IA5String : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.IA5String;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("IA5String");
				}

			if (tag) {
				Output.EndElement ("IA5String");
				}			
			}
		}

    public partial class BMPString : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.BMPString;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("BMPString");
				}

			if (tag) {
				Output.EndElement ("BMPString");
				}			
			}
		}

    public partial class UTF8String : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.UTF8String;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("UTF8String");
				}

			if (tag) {
				Output.EndElement ("UTF8String");
				}			
			}
		}

    public partial class PrintableString : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.PrintableString;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("PrintableString");
				}

			if (tag) {
				Output.EndElement ("PrintableString");
				}			
			}
		}

    public partial class Qualifier : _Choice {
        public _Choice					Entry;

        public override ASN2Type _Tag () {
            return ASN2Type.Qualifier;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			Entry._InitChildren (this);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Qualifier");
				}

	        Entry.Serialize (Output, true);
			if (tag) {
				Output.EndElement ("Qualifier");
				}			
			}
		}

    public partial class Code : _Choice {
		public int						Value;

        public override ASN2Type _Tag () {
            return ASN2Type.Code;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Code");
				}

			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Code");
				}			
			}
		}

    public partial class Implicit : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Implicit;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Implicit");
				}

			if (tag) {
				Output.EndElement ("Implicit");
				}			
			}
		}

    public partial class Explicit : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Explicit;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Explicit");
				}

			if (tag) {
				Output.EndElement ("Explicit");
				}			
			}
		}

    public partial class Context : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Context;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Context");
				}

			if (tag) {
				Output.EndElement ("Context");
				}			
			}
		}

    public partial class Optional : _Choice {

        public override ASN2Type _Tag () {
            return ASN2Type.Optional;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Optional");
				}

			if (tag) {
				Output.EndElement ("Optional");
				}			
			}
		}

    public partial class Default : _Choice {
		public string					Value;

        public override ASN2Type _Tag () {
            return ASN2Type.Default;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Default");
				}

			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Default");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() {
            Label = null;
            }

        public override ASN2Type _Tag () {
            return ASN2Type._Label;
            }

		public override void Serialize (StructureWriter Output, bool tag) {
			Output.WriteId ("ID", Label.ToString());
			}
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Namespace_Start,
		Namespace__Name,				
		ROOT_Start,
		ROOT__Name,				
		ROOT__Entries,				
		Entry_Start,
		Entry__Name,				
		Entry__Value,				
		OID_Start,
		OID__Name,				
		OID__Root,				
		OID__Value,				
		Class_Start,
		Class__Name,				
		Class__Entries,				
		Object_Start,
		Object__Name,				
		Object__OID,				
		Object__Entries,				
		SingularObject_Start,
		SingularObject__Name,				
		SingularObject__OID,				
		SingularObject__Entries,				
		Member_Start,
		Member__Name,				
		Member__Spec,				
		Member__Qualifiers,				
		OIDRef_Start,
		Any_Start,
		Bits_Start,
		VBits_Start,
		Octets_Start,
		Integer_Start,
		BigInteger_Start,
		Boolean_Start,
		Time_Start,
		List_Start,
		List__Spec,				
		Set_Start,
		Set__Spec,				
		Choice_Start,
		Choice__Entries,				
		IA5String_Start,
		BMPString_Start,
		UTF8String_Start,
		PrintableString_Start,
		Qualifier_Start,
		Qualifier__Entry,				
		Code_Start,
		Code__Value,				
		Implicit_Start,
		Explicit_Start,
		Context_Start,
		Optional_Start,
		Default_Start,
		Default__Value,				
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.Tool.ASN._Choice     Token;
        }

    public partial class ASN2 : Goedel.Registry.Parser{
        public List <Goedel.Tool.ASN._Choice>        Top;
        public Registry	<Goedel.Tool.ASN._Choice>	Registry;



        bool _StartOfEntry;
        public bool StartOfEntry {
            get {return _StartOfEntry;}
            private set { _StartOfEntry = value; }
            }

        StateCode								State;
        Goedel.Tool.ASN._Choice				Current;
        List <_StackItem>						Stack;
        TokenType								CurrentToken;
        Position								CurrentPosition;
        string									CurrentText;


        public static ASN2 Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new ASN2();
            Result.Options = Options;

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
				Entry._InitChildren (null);
				}
			}

        public ASN2() {
            Top = new List<Goedel.Tool.ASN._Choice> () ;
            Registry = new Registry <Goedel.Tool.ASN._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            _StartOfEntry = true;

			TYPE__ArcName = Registry.TYPE ("ArcName"); 
			TYPE__IDName = Registry.TYPE ("IDName"); 



            }



        public TYPE<Goedel.Tool.ASN._Choice> TYPE__ArcName ;
        public TYPE<Goedel.Tool.ASN._Choice> TYPE__IDName ;

        private Goedel.Tool.ASN._Choice New_Choice(string Label) {
            switch (Label) {

                case "Namespace": return NewNamespace();
                case "ROOT": return NewROOT();
                case "Entry": return NewEntry();
                case "OID": return NewOID();
                case "Class": return NewClass();
                case "Object": return NewObject();
                case "SingularObject": return NewSingularObject();
                case "Member": return NewMember();
                case "OIDRef": return NewOIDRef();
                case "Any": return NewAny();
                case "Bits": return NewBits();
                case "VBits": return NewVBits();
                case "Octets": return NewOctets();
                case "Integer": return NewInteger();
                case "BigInteger": return NewBigInteger();
                case "Boolean": return NewBoolean();
                case "Time": return NewTime();
                case "List": return NewList();
                case "Set": return NewSet();
                case "Choice": return NewChoice();
                case "IA5String": return NewIA5String();
                case "BMPString": return NewBMPString();
                case "UTF8String": return NewUTF8String();
                case "PrintableString": return NewPrintableString();
                case "Qualifier": return NewQualifier();
                case "Code": return NewCode();
                case "Implicit": return NewImplicit();
                case "Explicit": return NewExplicit();
                case "Context": return NewContext();
                case "Optional": return NewOptional();
                case "Default": return NewDefault();

				}
            throw new System.Exception ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.Tool.ASN.Namespace NewNamespace() {
            Goedel.Tool.ASN.Namespace result = new Goedel.Tool.ASN.Namespace();
            Push (result);
            State = StateCode.Namespace_Start;
            return result;
            }


        private Goedel.Tool.ASN.ROOT NewROOT() {
            Goedel.Tool.ASN.ROOT result = new Goedel.Tool.ASN.ROOT();
            Push (result);
            State = StateCode.ROOT_Start;
            return result;
            }


        private Goedel.Tool.ASN.Entry NewEntry() {
            Goedel.Tool.ASN.Entry result = new Goedel.Tool.ASN.Entry();
            Push (result);
            State = StateCode.Entry_Start;
            return result;
            }


        private Goedel.Tool.ASN.OID NewOID() {
            Goedel.Tool.ASN.OID result = new Goedel.Tool.ASN.OID();
            Push (result);
            State = StateCode.OID_Start;
            return result;
            }


        private Goedel.Tool.ASN.Class NewClass() {
            Goedel.Tool.ASN.Class result = new Goedel.Tool.ASN.Class();
            Push (result);
            State = StateCode.Class_Start;
            return result;
            }


        private Goedel.Tool.ASN.Object NewObject() {
            Goedel.Tool.ASN.Object result = new Goedel.Tool.ASN.Object();
            Push (result);
            State = StateCode.Object_Start;
            return result;
            }


        private Goedel.Tool.ASN.SingularObject NewSingularObject() {
            Goedel.Tool.ASN.SingularObject result = new Goedel.Tool.ASN.SingularObject();
            Push (result);
            State = StateCode.SingularObject_Start;
            return result;
            }


        private Goedel.Tool.ASN.Member NewMember() {
            Goedel.Tool.ASN.Member result = new Goedel.Tool.ASN.Member();
            Push (result);
            State = StateCode.Member_Start;
            return result;
            }


        private Goedel.Tool.ASN.OIDRef NewOIDRef() {
            Goedel.Tool.ASN.OIDRef result = new Goedel.Tool.ASN.OIDRef();
            Push (result);
            State = StateCode.OIDRef_Start;
            return result;
            }


        private Goedel.Tool.ASN.Any NewAny() {
            Goedel.Tool.ASN.Any result = new Goedel.Tool.ASN.Any();
            Push (result);
            State = StateCode.Any_Start;
            return result;
            }


        private Goedel.Tool.ASN.Bits NewBits() {
            Goedel.Tool.ASN.Bits result = new Goedel.Tool.ASN.Bits();
            Push (result);
            State = StateCode.Bits_Start;
            return result;
            }


        private Goedel.Tool.ASN.VBits NewVBits() {
            Goedel.Tool.ASN.VBits result = new Goedel.Tool.ASN.VBits();
            Push (result);
            State = StateCode.VBits_Start;
            return result;
            }


        private Goedel.Tool.ASN.Octets NewOctets() {
            Goedel.Tool.ASN.Octets result = new Goedel.Tool.ASN.Octets();
            Push (result);
            State = StateCode.Octets_Start;
            return result;
            }


        private Goedel.Tool.ASN.Integer NewInteger() {
            Goedel.Tool.ASN.Integer result = new Goedel.Tool.ASN.Integer();
            Push (result);
            State = StateCode.Integer_Start;
            return result;
            }


        private Goedel.Tool.ASN.BigInteger NewBigInteger() {
            Goedel.Tool.ASN.BigInteger result = new Goedel.Tool.ASN.BigInteger();
            Push (result);
            State = StateCode.BigInteger_Start;
            return result;
            }


        private Goedel.Tool.ASN.Boolean NewBoolean() {
            Goedel.Tool.ASN.Boolean result = new Goedel.Tool.ASN.Boolean();
            Push (result);
            State = StateCode.Boolean_Start;
            return result;
            }


        private Goedel.Tool.ASN.Time NewTime() {
            Goedel.Tool.ASN.Time result = new Goedel.Tool.ASN.Time();
            Push (result);
            State = StateCode.Time_Start;
            return result;
            }


        private Goedel.Tool.ASN.List NewList() {
            Goedel.Tool.ASN.List result = new Goedel.Tool.ASN.List();
            Push (result);
            State = StateCode.List_Start;
            return result;
            }


        private Goedel.Tool.ASN.Set NewSet() {
            Goedel.Tool.ASN.Set result = new Goedel.Tool.ASN.Set();
            Push (result);
            State = StateCode.Set_Start;
            return result;
            }


        private Goedel.Tool.ASN.Choice NewChoice() {
            Goedel.Tool.ASN.Choice result = new Goedel.Tool.ASN.Choice();
            Push (result);
            State = StateCode.Choice_Start;
            return result;
            }


        private Goedel.Tool.ASN.IA5String NewIA5String() {
            Goedel.Tool.ASN.IA5String result = new Goedel.Tool.ASN.IA5String();
            Push (result);
            State = StateCode.IA5String_Start;
            return result;
            }


        private Goedel.Tool.ASN.BMPString NewBMPString() {
            Goedel.Tool.ASN.BMPString result = new Goedel.Tool.ASN.BMPString();
            Push (result);
            State = StateCode.BMPString_Start;
            return result;
            }


        private Goedel.Tool.ASN.UTF8String NewUTF8String() {
            Goedel.Tool.ASN.UTF8String result = new Goedel.Tool.ASN.UTF8String();
            Push (result);
            State = StateCode.UTF8String_Start;
            return result;
            }


        private Goedel.Tool.ASN.PrintableString NewPrintableString() {
            Goedel.Tool.ASN.PrintableString result = new Goedel.Tool.ASN.PrintableString();
            Push (result);
            State = StateCode.PrintableString_Start;
            return result;
            }


        private Goedel.Tool.ASN.Qualifier NewQualifier() {
            Goedel.Tool.ASN.Qualifier result = new Goedel.Tool.ASN.Qualifier();
            Push (result);
            State = StateCode.Qualifier_Start;
            return result;
            }


        private Goedel.Tool.ASN.Code NewCode() {
            Goedel.Tool.ASN.Code result = new Goedel.Tool.ASN.Code();
            Push (result);
            State = StateCode.Code_Start;
            return result;
            }


        private Goedel.Tool.ASN.Implicit NewImplicit() {
            Goedel.Tool.ASN.Implicit result = new Goedel.Tool.ASN.Implicit();
            Push (result);
            State = StateCode.Implicit_Start;
            return result;
            }


        private Goedel.Tool.ASN.Explicit NewExplicit() {
            Goedel.Tool.ASN.Explicit result = new Goedel.Tool.ASN.Explicit();
            Push (result);
            State = StateCode.Explicit_Start;
            return result;
            }


        private Goedel.Tool.ASN.Context NewContext() {
            Goedel.Tool.ASN.Context result = new Goedel.Tool.ASN.Context();
            Push (result);
            State = StateCode.Context_Start;
            return result;
            }


        private Goedel.Tool.ASN.Optional NewOptional() {
            Goedel.Tool.ASN.Optional result = new Goedel.Tool.ASN.Optional();
            Push (result);
            State = StateCode.Optional_Start;
            return result;
            }


        private Goedel.Tool.ASN.Default NewDefault() {
            Goedel.Tool.ASN.Default result = new Goedel.Tool.ASN.Default();
            Push (result);
            State = StateCode.Default_Start;
            return result;
            }


        static Goedel.Tool.ASN.ASN2Type _Reserved(string Label) {
            switch (Label) {

                case "Namespace": return Goedel.Tool.ASN.ASN2Type.Namespace;
                case "ROOT": return Goedel.Tool.ASN.ASN2Type.ROOT;
                case "Entry": return Goedel.Tool.ASN.ASN2Type.Entry;
                case "OID": return Goedel.Tool.ASN.ASN2Type.OID;
                case "Class": return Goedel.Tool.ASN.ASN2Type.Class;
                case "Object": return Goedel.Tool.ASN.ASN2Type.Object;
                case "SingularObject": return Goedel.Tool.ASN.ASN2Type.SingularObject;
                case "Member": return Goedel.Tool.ASN.ASN2Type.Member;
                case "OIDRef": return Goedel.Tool.ASN.ASN2Type.OIDRef;
                case "Any": return Goedel.Tool.ASN.ASN2Type.Any;
                case "Bits": return Goedel.Tool.ASN.ASN2Type.Bits;
                case "VBits": return Goedel.Tool.ASN.ASN2Type.VBits;
                case "Octets": return Goedel.Tool.ASN.ASN2Type.Octets;
                case "Integer": return Goedel.Tool.ASN.ASN2Type.Integer;
                case "BigInteger": return Goedel.Tool.ASN.ASN2Type.BigInteger;
                case "Boolean": return Goedel.Tool.ASN.ASN2Type.Boolean;
                case "Time": return Goedel.Tool.ASN.ASN2Type.Time;
                case "List": return Goedel.Tool.ASN.ASN2Type.List;
                case "Set": return Goedel.Tool.ASN.ASN2Type.Set;
                case "Choice": return Goedel.Tool.ASN.ASN2Type.Choice;
                case "IA5String": return Goedel.Tool.ASN.ASN2Type.IA5String;
                case "BMPString": return Goedel.Tool.ASN.ASN2Type.BMPString;
                case "UTF8String": return Goedel.Tool.ASN.ASN2Type.UTF8String;
                case "PrintableString": return Goedel.Tool.ASN.ASN2Type.PrintableString;
                case "Qualifier": return Goedel.Tool.ASN.ASN2Type.Qualifier;
                case "Code": return Goedel.Tool.ASN.ASN2Type.Code;
                case "Implicit": return Goedel.Tool.ASN.ASN2Type.Implicit;
                case "Explicit": return Goedel.Tool.ASN.ASN2Type.Explicit;
                case "Context": return Goedel.Tool.ASN.ASN2Type.Context;
                case "Optional": return Goedel.Tool.ASN.ASN2Type.Optional;
                case "Default": return Goedel.Tool.ASN.ASN2Type.Default;

                }
            return Goedel.Tool.ASN.ASN2Type._Bottom;
            }


		public void Serialize (TextWriter Output) {
			Serialize (Output, OutputFormat.Goedel);
			}

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.Tool.ASN._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.Tool.ASN._Choice Token) {
            _StackItem Item = new _StackItem ();
            Item.State = State;
            Item.Token = Current;

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
            if (Stack.Count == 0) throw new System.Exception ("Internal Parser Error");

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {
            CurrentToken = Token;
            CurrentPosition = Position;
            CurrentText = Text;

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) return;
            if (Token == TokenType.INVALID)
                throw new System.Exception("Invalid Token");

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected START");

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.Tool.ASN.ASN2Type LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Namespace) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.ROOT) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.OID) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Class) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Object) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.SingularObject)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new System.Exception("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) {
                            State = StateCode._End;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [Class]");

                    case StateCode._End:                   //      -
                        throw new System.Exception("Too Many Closing Braces");

                    case StateCode.Namespace_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.Namespace Current_Cast = (Goedel.Tool.ASN.Namespace)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Namespace__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Name:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.ROOT_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.ROOT Current_Cast = (Goedel.Tool.ASN.ROOT)Current;
                            Current_Cast.Name = Registry.ID(Position, Text, TYPE__ArcName, Current_Cast);
                            State = StateCode.ROOT__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.ROOT__Name:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.ROOT__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.ROOT__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.ASN.ROOT Current_Cast = (Goedel.Tool.ASN.ROOT)Current;
                            Current_Cast.Entries.Add (NewEntry ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Entry_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.Entry Current_Cast = (Goedel.Tool.ASN.Entry)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__ArcName, Current_Cast);
                            State = StateCode.Entry__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Entry__Name:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.ASN.Entry Current_Cast = (Goedel.Tool.ASN.Entry)Current;
                            Current_Cast.Value = Convert.ToInt32(Text);
                            State = StateCode.Entry__Value;
                            break;
                            }
                        throw new System.Exception("Expected Integer");

                    case StateCode.Entry__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.OID_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.OID Current_Cast = (Goedel.Tool.ASN.OID)Current;
                            Current_Cast.Name = Registry.ID(Position, Text, TYPE__ArcName, Current_Cast);
                            State = StateCode.OID__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.OID__Name:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.OID Current_Cast = (Goedel.Tool.ASN.OID)Current;
                            Current_Cast.Root = Registry.REF(Position, Text, TYPE__ArcName, Current_Cast);
                            State = StateCode.OID__Root;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.OID__Root:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.ASN.OID Current_Cast = (Goedel.Tool.ASN.OID)Current;
                            Current_Cast.Value = Convert.ToInt32(Text);
                            State = StateCode.OID__Value;
                            break;
                            }
                        throw new System.Exception("Expected Integer");

                    case StateCode.OID__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Class_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.Class Current_Cast = (Goedel.Tool.ASN.Class)Current;
                            Current_Cast.Name = Registry.ID(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Class__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Class__Name:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Class__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Class__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.ASN.Class Current_Cast = (Goedel.Tool.ASN.Class)Current;
                            Current_Cast.Entries.Add (NewMember ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Object_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.Object Current_Cast = (Goedel.Tool.ASN.Object)Current;
                            Current_Cast.Name = Registry.ID(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Object__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Object__Name:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.Object Current_Cast = (Goedel.Tool.ASN.Object)Current;
                            Current_Cast.OID = Registry.REF(Position, Text, TYPE__ArcName, Current_Cast);
                            State = StateCode.Object__OID;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Object__OID:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Object__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Object__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.ASN.Object Current_Cast = (Goedel.Tool.ASN.Object)Current;
                            Current_Cast.Entries.Add (NewMember ());
                            Represent = true;
                            }

                        break;


                    case StateCode.SingularObject_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.SingularObject Current_Cast = (Goedel.Tool.ASN.SingularObject)Current;
                            Current_Cast.Name = Registry.ID(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.SingularObject__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.SingularObject__Name:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.SingularObject Current_Cast = (Goedel.Tool.ASN.SingularObject)Current;
                            Current_Cast.OID = Registry.REF(Position, Text, TYPE__ArcName, Current_Cast);
                            State = StateCode.SingularObject__OID;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.SingularObject__OID:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.SingularObject__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.SingularObject__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.ASN.SingularObject Current_Cast = (Goedel.Tool.ASN.SingularObject)Current;
                            Current_Cast.Entries.Add (NewMember ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Member_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.ASN.Member Current_Cast = (Goedel.Tool.ASN.Member)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__IDName, Current_Cast);
                            State = StateCode.Member__Name;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Member__Name:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.ASN.Member Current_Cast = (Goedel.Tool.ASN.Member)Current;
                            Goedel.Tool.ASN.ASN2Type LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.ASN.ASN2Type.OIDRef) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Any) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Bits) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.VBits) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Octets) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Integer) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.BigInteger) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Boolean) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Time) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.List) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Set) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Choice) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.IA5String) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.BMPString) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.UTF8String) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.PrintableString) ) {
                                State = StateCode.Member__Spec;
                                Current_Cast.Spec = New_Choice(Text);
                                }
                            else {
                                Goedel.Tool.ASN._Label result = new Goedel.Tool.ASN._Label();
                                result.Label = Registry.REF(Position, Text, TYPE__IDName, Current_Cast);
                                Current_Cast.Spec = result;
                                State = StateCode.Member__Spec;
                                }
                            break;
                            }
                        else if (Token == TokenType.LITERAL) {
                            Goedel.Tool.ASN._Label result = new Goedel.Tool.ASN._Label();
                            Goedel.Tool.ASN.Member Current_Cast = (Goedel.Tool.ASN.Member)Current;
                            result.Label = Registry.REF(Position, Text, TYPE__IDName, Current_Cast);
                            Current_Cast.Spec = result;
                            State = StateCode.Member__Spec;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [OIDRef Any Bits VBits Octets Integer BigInteger Boolean Time List Set Choice IA5String BMPString UTF8String PrintableString ]");

                    case StateCode.Member__Spec:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Member__Qualifiers;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Member__Qualifiers: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.ASN.Member Current_Cast = (Goedel.Tool.ASN.Member)Current;
                            Current_Cast.Qualifiers.Add (NewQualifier ());
                            Represent = true;
                            }

                        break;


                    case StateCode.OIDRef_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Any_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Bits_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.VBits_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Octets_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Integer_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.BigInteger_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Boolean_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Time_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.List_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.ASN.List Current_Cast = (Goedel.Tool.ASN.List)Current;
                            Goedel.Tool.ASN.ASN2Type LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.ASN.ASN2Type.OIDRef) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Any) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Bits) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.VBits) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Octets) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Integer) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.BigInteger) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Boolean) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Time) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.List) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Set) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Choice) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.IA5String) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.BMPString) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.UTF8String) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.PrintableString) ) {
                                State = StateCode.List__Spec;
                                Current_Cast.Spec = New_Choice(Text);
                                }
                            else {
                                Goedel.Tool.ASN._Label result = new Goedel.Tool.ASN._Label();
                                result.Label = Registry.REF(Position, Text, TYPE__IDName, Current_Cast);
                                Current_Cast.Spec = result;
                                State = StateCode.List__Spec;
                                }
                            break;
                            }
                        else if (Token == TokenType.LITERAL) {
                            Goedel.Tool.ASN._Label result = new Goedel.Tool.ASN._Label();
                            Goedel.Tool.ASN.List Current_Cast = (Goedel.Tool.ASN.List)Current;
                            result.Label = Registry.REF(Position, Text, TYPE__IDName, Current_Cast);
                            Current_Cast.Spec = result;
                            State = StateCode.List__Spec;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [OIDRef Any Bits VBits Octets Integer BigInteger Boolean Time List Set Choice IA5String BMPString UTF8String PrintableString ]");

                    case StateCode.List__Spec:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Set_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.ASN.Set Current_Cast = (Goedel.Tool.ASN.Set)Current;
                            Goedel.Tool.ASN.ASN2Type LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.ASN.ASN2Type.OIDRef) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Any) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Bits) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.VBits) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Octets) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Integer) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.BigInteger) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Boolean) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Time) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.List) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Set) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Choice) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.IA5String) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.BMPString) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.UTF8String) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.PrintableString) ) {
                                State = StateCode.Set__Spec;
                                Current_Cast.Spec = New_Choice(Text);
                                }
                            else {
                                Goedel.Tool.ASN._Label result = new Goedel.Tool.ASN._Label();
                                result.Label = Registry.REF(Position, Text, TYPE__IDName, Current_Cast);
                                Current_Cast.Spec = result;
                                State = StateCode.Set__Spec;
                                }
                            break;
                            }
                        else if (Token == TokenType.LITERAL) {
                            Goedel.Tool.ASN._Label result = new Goedel.Tool.ASN._Label();
                            Goedel.Tool.ASN.Set Current_Cast = (Goedel.Tool.ASN.Set)Current;
                            result.Label = Registry.REF(Position, Text, TYPE__IDName, Current_Cast);
                            Current_Cast.Spec = result;
                            State = StateCode.Set__Spec;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [OIDRef Any Bits VBits Octets Integer BigInteger Boolean Time List Set Choice IA5String BMPString UTF8String PrintableString ]");

                    case StateCode.Set__Spec:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Choice_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Choice__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Choice__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.ASN.Choice Current_Cast = (Goedel.Tool.ASN.Choice)Current;
                            Current_Cast.Entries.Add (NewMember ());
                            Represent = true;
                            }

                        break;


                    case StateCode.IA5String_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.BMPString_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.UTF8String_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.PrintableString_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Qualifier_Start:
                        if (Token == TokenType.LABEL) {
							Goedel.Tool.ASN.Qualifier Current_Cast = (Goedel.Tool.ASN.Qualifier)Current;
                            Goedel.Tool.ASN.ASN2Type LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Code) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Implicit) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Explicit) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Optional) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Default) |
									(LabelType == Goedel.Tool.ASN.ASN2Type.Context) ) {
                                State = StateCode.Qualifier__Entry;
                                Current_Cast.Entry = New_Choice(Text);
                                }
                            else {
                               throw new System.Exception("Parser Error Expected [Code Implicit Explicit Optional Default Context ]");
                                }
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [Code Implicit Explicit Optional Default Context ]");

                    case StateCode.Qualifier__Entry:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Code_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.ASN.Code Current_Cast = (Goedel.Tool.ASN.Code)Current;
                            Current_Cast.Value = Convert.ToInt32(Text);
                            State = StateCode.Code__Value;
                            break;
                            }
                        throw new System.Exception("Expected Integer");

                    case StateCode.Code__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Implicit_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Explicit_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Context_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Optional_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Default_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.ASN.Default Current_Cast = (Goedel.Tool.ASN.Default)Current;
                            Current_Cast.Value = Text;
                            State = StateCode.Default__Value;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.Default__Value:
                        Pop ();
                        Represent = true; 
                        break;

                    default:
                        throw new System.Exception("Unreachable code reached");
                    }
                }
            }
        }
	}


