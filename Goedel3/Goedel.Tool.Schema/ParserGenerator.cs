// #script 1.0 
// Script Syntax Version:  1.0
// #license MITLicense 

//  Unknown by Unknown
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// #pclass GoedelSchema GenerateParser 
using System;
using System.IO;
using System.Collections.Generic;
using Goedel.Registry;
namespace GoedelSchema {
	public partial class GenerateParser : global::Goedel.Registry.Script {
		public GenerateParser () : base () {
			}
		public GenerateParser (TextWriter Output) : base (Output) {
			}

		// #% Goedel Goedel; 
		 Goedel Goedel;
		// #method GenerateCS Goedel GoedelIn 
		

		//
		// GenerateCS
		//
		public void GenerateCS (Goedel GoedelIn) {
			// #% Goedel = GoedelIn; 
			 Goedel = GoedelIn;
			// #% // Boilerplate.Header (_Output, "//  ", GenerateTime); 
			 // Boilerplate.Header (_Output, "//  ", GenerateTime);
			// #foreach (_Choice Item in Goedel.Top) 
			foreach  (_Choice Item in Goedel.Top) {
				// #switchcast GoedelType Item 
				switch (Item._Tag ()) {
					// #casecast Copyright Copyright 
					case GoedelType.Copyright: {
					  Copyright Copyright = (Copyright) Item; 
					// #switchcast GoedelType Copyright.License 
					switch (Copyright.License._Tag ()) {
						// #casecast MITLicense null 
						case GoedelType.MITLicense: { 
						// #% Boilerplate.MITLicense (_Output, "//  ", "Copyright (c) " + Copyright.Date, Copyright.Holder); 
						
						 Boilerplate.MITLicense (_Output, "//  ", "Copyright (c) " + Copyright.Date, Copyright.Holder);
						// #casecast BSD2License null 
						break; }
						case GoedelType.BSD2License: { 
						// #% Boilerplate.BSD2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder); 
						
						 Boilerplate.BSD2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
						// #casecast BSD3License null 
						break; }
						case GoedelType.BSD3License: { 
						// #% Boilerplate.BSD3License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder); 
						
						 Boilerplate.BSD3License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
						// #casecast ISCLicense null 
						break; }
						case GoedelType.ISCLicense: { 
						// #% Boilerplate.ISCLicense (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder); 
						
						 Boilerplate.ISCLicense (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
						// #casecast Apache2License null 
						break; }
						case GoedelType.Apache2License: { 
						// #% Boilerplate.Apache2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder); 
						
						 Boilerplate.Apache2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
						// #casecast OtherLicense License 
						break; }
						case GoedelType.OtherLicense: {
						  OtherLicense License = (OtherLicense) Copyright.License; 
						// // Copyright (1) #{Copyright.Date} by #{Copyright.Holder} 
						_Output.Write ("// Copyright (1) {1} by {2}\n{0}", _Indent, Copyright.Date, Copyright.Holder);
						// // #{License.Text} 
						_Output.Write ("// {1}\n{0}", _Indent, License.Text);
						// #end switchcast 
					break; }
						}
					// #end switchcast 
				break; }
					}
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			// // This file is automatically generated from the following source files: 
			_Output.Write ("// This file is automatically generated from the following source files:\n{0}", _Indent);
			// #foreach (Source File in Goedel.Registry.Files) 
			foreach  (Source File in Goedel.Registry.Files) {
				// // Input file  #{File.Name} 
				_Output.Write ("// Input file  {1}\n{0}", _Indent, File.Name);
				// #end foreach 
				}
			// // Command line options:  
			_Output.Write ("// Command line options: \n{0}", _Indent);
			// //     /dlexer=#{GoedelIn.DebugLexer} 
			_Output.Write ("//     /dlexer={1}\n{0}", _Indent, GoedelIn.DebugLexer);
			// //     /dparser=#{GoedelIn.DebugParser} 
			_Output.Write ("//     /dparser={1}\n{0}", _Indent, GoedelIn.DebugParser);
			// //     /dstack=#{GoedelIn.DebugStack} 
			_Output.Write ("//     /dstack={1}\n{0}", _Indent, GoedelIn.DebugStack);
			//  
			_Output.Write ("\n{0}", _Indent);
			// using System; 
			_Output.Write ("using System;\n{0}", _Indent);
			// using System.Collections.Generic; 
			_Output.Write ("using System.Collections.Generic;\n{0}", _Indent);
			// using System.IO; 
			_Output.Write ("using System.IO;\n{0}", _Indent);
			// using System.Text; 
			_Output.Write ("using System.Text;\n{0}", _Indent);
			// using Goedel.Registry; 
			_Output.Write ("using Goedel.Registry;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Goedel.Top) 
			foreach  (_Choice Item in Goedel.Top) {
				// #if (Item._Tag() ==  GoedelType.Class) 
				if (  (Item._Tag() ==  GoedelType.Class) ) {
					// #call GenerateClass (Class)Item 
					GenerateClass ((Class)Item);
					// #end if 
					}
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			// #end method 
			}
		//  
		// #method GenerateClass Class Class 
		

		//
		// GenerateClass
		//
		public void GenerateClass (Class Class) {
			// #% TYPE<_Choice> IdTYPE = Goedel.Registry.FindType ("IdType"); 
			 TYPE<_Choice> IdTYPE = Goedel.Registry.FindType ("IdType");
			// #% TYPE<_Choice> TokenTYPE = Goedel.Registry.FindType ("TokenType"); 
			 TYPE<_Choice> TokenTYPE = Goedel.Registry.FindType ("TokenType");
			//  
			_Output.Write ("\n{0}", _Indent);
			// // 
			_Output.Write ("//\n{0}", _Indent);
			// // Namespace #{Class.Namespace} 
			_Output.Write ("// Namespace {1}\n{0}", _Indent, Class.Namespace);
			// // Class #{Class.Name} 
			_Output.Write ("// Class {1}\n{0}", _Indent, Class.Name);
			// // 
			_Output.Write ("//\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// // Types 
			_Output.Write ("// Types\n{0}", _Indent);
			// #foreach (TYPE<_Choice> Type in Goedel.Registry.Types) 
			foreach  (TYPE<_Choice> Type in Goedel.Registry.Types) {
				// //   #{Type.Label} 
				_Output.Write ("//   {1}\n{0}", _Indent, Type.Label);
				// #foreach (ID<_Choice> ID in Type.IDs) 
				foreach  (ID<_Choice> ID in Type.IDs) {
					// //       #{ID} 
					_Output.Write ("//       {1}\n{0}", _Indent, ID);
					// #end foreach 
					}
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			// namespace #{Class.Namespace} { 
			_Output.Write ("namespace {1} {{\n{0}", _Indent, Class.Namespace);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//     public enum #{Class.Name}Type { 
			_Output.Write ("    public enum {1}Type {{\n{0}", _Indent, Class.Name);
			//         _Top, 
			_Output.Write ("        _Top,\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #elseif (Item._Tag() == GoedelType.Type) 
					} else if (  (Item._Tag() == GoedelType.Type)) {
					// #% Type T = (Type) Item; 
					 Type T = (Type) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #end if 
					}
				//         #{ID}, 
				_Output.Write ("        {1},\n{0}", _Indent, ID);
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			//         _Label, 
			_Output.Write ("        _Label,\n{0}", _Indent);
			//         _Bottom 
			_Output.Write ("        _Bottom\n{0}", _Indent);
			//         }     
			_Output.Write ("        }}    \n{0}", _Indent);
			//      
			_Output.Write ("    \n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//     public abstract partial class _Choice { 
			_Output.Write ("    public abstract partial class _Choice {{\n{0}", _Indent);
			//         abstract public #{Class.Name}Type _Tag (); 
			_Output.Write ("        abstract public {1}Type _Tag ();\n{0}", _Indent, Class.Name);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		public abstract void Serialize (StructureWriter Output, bool tag); 
			_Output.Write ("		public abstract void Serialize (StructureWriter Output, bool tag);\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		public virtual void Init (_Choice Parent) { 
			_Output.Write ("		public virtual void Init (_Choice Parent) {{\n{0}", _Indent);
			// 			} 
			_Output.Write ("			}}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		bool _Initialized = false; 
			_Output.Write ("		bool _Initialized = false;\n{0}", _Indent);
			// 		public virtual void _InitChildren (_Choice Parent) { 
			_Output.Write ("		public virtual void _InitChildren (_Choice Parent) {{\n{0}", _Indent);
			// 			Init (Parent); 
			_Output.Write ("			Init (Parent);\n{0}", _Indent);
			// 			if (_Initialized) { 
			_Output.Write ("			if (_Initialized) {{\n{0}", _Indent);
			// 				return; 
			_Output.Write ("				return;\n{0}", _Indent);
			// 				} 
			_Output.Write ("				}}\n{0}", _Indent);
			// 			_Initialized = true; 
			_Output.Write ("			_Initialized = true;\n{0}", _Indent);
			// 			} 
			_Output.Write ("			}}\n{0}", _Indent);
			//         } 
			_Output.Write ("        }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #% List <Entry> Entries = null; 
				 List <Entry> Entries = null;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #% Entries = T.Entries; 
					 Entries = T.Entries;
					// #elseif (Item._Tag() == GoedelType.Type) 
					} else if (  (Item._Tag() == GoedelType.Type)) {
					// #% Type T = (Type) Item; 
					 Type T = (Type) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #% Entries = T.Entries; 
					 Entries = T.Entries;
					// #end if 
					}
				//  
				_Output.Write ("\n{0}", _Indent);
				//     public partial class #{ID} : _Choice { 
				_Output.Write ("    public partial class {1} : _Choice {{\n{0}", _Indent, ID);
				// #foreach (Entry Entry in Entries) 
				foreach  (Entry Entry in Entries) {
					// #call DeclareEntry Entry 
					DeclareEntry (Entry);
					// #end foreach 
					}
				//  
				_Output.Write ("\n{0}", _Indent);
				//         public override #{Class.Name}Type _Tag () { 
				_Output.Write ("        public override {1}Type _Tag () {{\n{0}", _Indent, Class.Name);
				//             return #{Class.Name}Type.#{ID}; 
				_Output.Write ("            return {1}Type.{2};\n{0}", _Indent, Class.Name, ID);
				//             } 
				_Output.Write ("            }}\n{0}", _Indent);
				//  
				_Output.Write ("\n{0}", _Indent);
				// 		public override void _InitChildren (_Choice Parent) { 
				_Output.Write ("		public override void _InitChildren (_Choice Parent) {{\n{0}", _Indent);
				// 			Init (Parent); 
				_Output.Write ("			Init (Parent);\n{0}", _Indent);
				// #foreach (Entry Entry in Entries) 
				foreach  (Entry Entry in Entries) {
					// #switchcast GoedelType Entry.Type 
					switch (Entry.Type._Tag ()) {
						// #casecast Choice null 
						case GoedelType.Choice: { 
						// 			#{Entry.Name}._InitChildren (this); 
						_Output.Write ("			{1}._InitChildren (this);\n{0}", _Indent, Entry.Name);
						// #casecast ChoiceREF null 
						break; }
						case GoedelType.ChoiceREF: { 
						// 			#{Entry.Name}._InitChildren (this); 
						_Output.Write ("			{1}._InitChildren (this);\n{0}", _Indent, Entry.Name);
						// #casecast _Label null 
						break; }
						case GoedelType._Label: { 
						// 			#{Entry.Name}._InitChildren (this); 
						_Output.Write ("			{1}._InitChildren (this);\n{0}", _Indent, Entry.Name);
						// #casecast List List 
						break; }
						case GoedelType.List: {
						  List List = (List) Entry.Type; 
						// #if ((List.Type._Tag() == GoedelType._Label) |  (List.Type._Tag() == GoedelType.Choice) | (List.Type._Tag() == GoedelType.ChoiceREF)) 
						if (  ((List.Type._Tag() == GoedelType._Label) |  (List.Type._Tag() == GoedelType.Choice) | (List.Type._Tag() == GoedelType.ChoiceREF)) ) {
							// 			foreach (var Sub in #{Entry.Name}) { 
							_Output.Write ("			foreach (var Sub in {1}) {{\n{0}", _Indent, Entry.Name);
							// 				Sub._InitChildren (this); 
							_Output.Write ("				Sub._InitChildren (this);\n{0}", _Indent);
							// 				} 
							_Output.Write ("				}}\n{0}", _Indent);
							// #end if 
							}
						// #end switchcast 
					break; }
						}
					// #end foreach 
					}
				// 			} 
				_Output.Write ("			}}\n{0}", _Indent);
				//  
				_Output.Write ("\n{0}", _Indent);
				// 		public override void Serialize (StructureWriter Output, bool tag) { 
				_Output.Write ("		public override void Serialize (StructureWriter Output, bool tag) {{\n{0}", _Indent);
				//  
				_Output.Write ("\n{0}", _Indent);
				// 			if (tag) { 
				_Output.Write ("			if (tag) {{\n{0}", _Indent);
				// 				Output.StartElement ("#{ID}"); 
				_Output.Write ("				Output.StartElement (\"{1}\");\n{0}", _Indent, ID);
				// 				} 
				_Output.Write ("				}}\n{0}", _Indent);
				//  
				_Output.Write ("\n{0}", _Indent);
				// #foreach (Entry Entry in Entries) 
				foreach  (Entry Entry in Entries) {
					// #call SerializeEntry Entry 
					SerializeEntry (Entry);
					// #end foreach 
					}
				// 			if (tag) { 
				_Output.Write ("			if (tag) {{\n{0}", _Indent);
				// 				Output.EndElement ("#{ID}"); 
				_Output.Write ("				Output.EndElement (\"{1}\");\n{0}", _Indent, ID);
				// 				}			 
				_Output.Write ("				}}			\n{0}", _Indent);
				// 			} 
				_Output.Write ("			}}\n{0}", _Indent);
				// 		} 
				_Output.Write ("		}}\n{0}", _Indent);
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			//     class _Label : _Choice { 
			_Output.Write ("    class _Label : _Choice {{\n{0}", _Indent);
			//         public REF<_Choice>            Label; 
			_Output.Write ("        public REF<_Choice>            Label;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		// This method is never called. It exists only to prevent a warning when a 
			_Output.Write ("		// This method is never called. It exists only to prevent a warning when a\n{0}", _Indent);
			// 		// Schema does not contain a ChoiceREF element. 
			_Output.Write ("		// Schema does not contain a ChoiceREF element.\n{0}", _Indent);
			//         public void Reach() { 
			_Output.Write ("        public void Reach() {{\n{0}", _Indent);
			//             Label = null; 
			_Output.Write ("            Label = null;\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         public override #{Class.Name}Type _Tag () { 
			_Output.Write ("        public override {1}Type _Tag () {{\n{0}", _Indent, Class.Name);
			//             return #{Class.Name}Type._Label; 
			_Output.Write ("            return {1}Type._Label;\n{0}", _Indent, Class.Name);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		public override void Serialize (StructureWriter Output, bool tag) { 
			_Output.Write ("		public override void Serialize (StructureWriter Output, bool tag) {{\n{0}", _Indent);
			// 			Output.WriteId ("ID", Label.ToString()); 
			_Output.Write ("			Output.WriteId (\"ID\", Label.ToString());\n{0}", _Indent);
			// 			} 
			_Output.Write ("			}}\n{0}", _Indent);
			//         } 
			_Output.Write ("        }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//     public enum StateCode {   
			_Output.Write ("    public enum StateCode {{  \n{0}", _Indent);
			//         _Start, 
			_Output.Write ("        _Start,\n{0}", _Indent);
			//         _Choice, 
			_Output.Write ("        _Choice,\n{0}", _Indent);
			//         _End, 
			_Output.Write ("        _End,\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #% List <Entry> Entries = null; 
				 List <Entry> Entries = null;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #% Entries = T.Entries; 
					 Entries = T.Entries;
					// #elseif (Item._Tag() == GoedelType.Type) 
					} else if (  (Item._Tag() == GoedelType.Type)) {
					// #% Type T = (Type) Item; 
					 Type T = (Type) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #% Entries = T.Entries; 
					 Entries = T.Entries;
					// #end if 
					}
				// 		#{ID}_Start, 
				_Output.Write ("		{1}_Start,\n{0}", _Indent, ID);
				// #foreach (Entry Entry in Entries) 
				foreach  (Entry Entry in Entries) {
					// 		#{ID}__#{Entry.Name},				 
					_Output.Write ("		{1}__{2},				\n{0}", _Indent, ID, Entry.Name);
					// #end foreach 
					}
				// #end foreach 
				}
			//         } 
			_Output.Write ("        }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//     struct _StackItem { 
			_Output.Write ("    struct _StackItem {{\n{0}", _Indent);
			//         public StateCode   State; 
			_Output.Write ("        public StateCode   State;\n{0}", _Indent);
			//         public #{Class.Namespace}._Choice     Token; 
			_Output.Write ("        public {1}._Choice     Token;\n{0}", _Indent, Class.Namespace);
			//         } 
			_Output.Write ("        }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//     public partial class #{Class.Name} : Goedel.Registry.Parser{ 
			_Output.Write ("    public partial class {1} : Goedel.Registry.Parser{{\n{0}", _Indent, Class.Name);
			//         public List <#{Class.Namespace}._Choice>        Top; 
			_Output.Write ("        public List <{1}._Choice>        Top;\n{0}", _Indent, Class.Namespace);
			//         public Registry	<#{Class.Namespace}._Choice>	Registry; 
			_Output.Write ("        public Registry	<{1}._Choice>	Registry;\n{0}", _Indent, Class.Namespace);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         bool _StartOfEntry; 
			_Output.Write ("        bool _StartOfEntry;\n{0}", _Indent);
			//         public bool StartOfEntry { 
			_Output.Write ("        public bool StartOfEntry {{\n{0}", _Indent);
			//             get {return _StartOfEntry;} 
			_Output.Write ("            get {{return _StartOfEntry;}}\n{0}", _Indent);
			//             private set { _StartOfEntry = value; } 
			_Output.Write ("            private set {{ _StartOfEntry = value; }}\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         StateCode								State; 
			_Output.Write ("        StateCode								State;\n{0}", _Indent);
			//         #{Class.Namespace}._Choice				Current; 
			_Output.Write ("        {1}._Choice				Current;\n{0}", _Indent, Class.Namespace);
			//         List <_StackItem>						Stack; 
			_Output.Write ("        List <_StackItem>						Stack;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         public static #{Class.Name} Parse(string File, Goedel.Registry.Dispatch Options) { 
			_Output.Write ("        public static {1} Parse(string File, Goedel.Registry.Dispatch Options) {{\n{0}", _Indent, Class.Name);
			//             var Result = new #{Class.Name}(); 
			_Output.Write ("            var Result = new {1}();\n{0}", _Indent, Class.Name);
			//             Result.Options = Options; 
			_Output.Write ("            Result.Options = Options;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             using (Stream infile = 
			_Output.Write ("            using (Stream infile =\n{0}", _Indent);
			//                         new FileStream(File, FileMode.Open, FileAccess.Read)) { 
			_Output.Write ("                        new FileStream(File, FileMode.Open, FileAccess.Read)) {{\n{0}", _Indent);
			//                 Lexer Schema = new Lexer(File); 
			_Output.Write ("                Lexer Schema = new Lexer(File);\n{0}", _Indent);
			//                 Schema.Process(infile, Result); 
			_Output.Write ("                Schema.Process(infile, Result);\n{0}", _Indent);
			//                 } 
			_Output.Write ("                }}\n{0}", _Indent);
			// 			Result._InitChildren (); 
			_Output.Write ("			Result._InitChildren ();\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             return Result; 
			_Output.Write ("            return Result;\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		bool _Initialized = false; 
			_Output.Write ("		bool _Initialized = false;\n{0}", _Indent);
			// 		public virtual void _InitChildren () { 
			_Output.Write ("		public virtual void _InitChildren () {{\n{0}", _Indent);
			// 			if (_Initialized) { 
			_Output.Write ("			if (_Initialized) {{\n{0}", _Indent);
			// 				return; 
			_Output.Write ("				return;\n{0}", _Indent);
			// 				} 
			_Output.Write ("				}}\n{0}", _Indent);
			// 			_Initialized = true; 
			_Output.Write ("			_Initialized = true;\n{0}", _Indent);
			// 			foreach (var Entry in Top) { 
			_Output.Write ("			foreach (var Entry in Top) {{\n{0}", _Indent);
			// 				Entry._InitChildren (null); 
			_Output.Write ("				Entry._InitChildren (null);\n{0}", _Indent);
			// 				} 
			_Output.Write ("				}}\n{0}", _Indent);
			// 			} 
			_Output.Write ("			}}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         public #{Class.Name}() { 
			_Output.Write ("        public {1}() {{\n{0}", _Indent, Class.Name);
			//             Top = new List<#{Class.Namespace}._Choice> () ; 
			_Output.Write ("            Top = new List<{1}._Choice> () ;\n{0}", _Indent, Class.Namespace);
			//             Registry = new Registry <#{Class.Namespace}._Choice> (); 
			_Output.Write ("            Registry = new Registry <{1}._Choice> ();\n{0}", _Indent, Class.Namespace);
			//             State = StateCode._Start; 
			_Output.Write ("            State = StateCode._Start;\n{0}", _Indent);
			//             Stack = new List <_StackItem> (); 
			_Output.Write ("            Stack = new List <_StackItem> ();\n{0}", _Indent);
			//             _StartOfEntry = true; 
			_Output.Write ("            _StartOfEntry = true;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #! Seems to be a bug here, IDs are only created if there is a reference to a type 
			// Seems to be a bug here, IDs are only created if there is a reference to a type
			// #!  
			// 
			// #foreach (ID<_Choice> ID in IdTYPE.IDs) 
			foreach  (ID<_Choice> ID in IdTYPE.IDs) {
				// 			TYPE__#{ID} = Registry.TYPE ("#{ID}");  
				_Output.Write ("			TYPE__{1} = Registry.TYPE (\"{2}\"); \n{0}", _Indent, ID, ID);
				// #end foreach 
				}
			// #foreach (ID<_Choice> ID in TokenTYPE.IDs) 
			foreach  (ID<_Choice> ID in TokenTYPE.IDs) {
				// 			TYPE__#{ID} = Registry.TYPE ("#{ID}");  
				_Output.Write ("			TYPE__{1} = Registry.TYPE (\"{2}\"); \n{0}", _Indent, ID, ID);
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #!#foreach (TYPE<_Choice> Type in Goedel.Registry.Types) 
			// #!            TYPE__#{Type.Label} = Registry.TYPE ("#{Type.Label}"); ; 
			//            TYPE__#{Type.Label} = Registry.TYPE ("#{Type.Label}"); ;
			// #!#end foreach 
			//  
			_Output.Write ("\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #! #foreach (TYPE<_Choice> Type in Goedel.Registry.Types) 
			// #foreach (TYPE<_Choice> Type in Goedel.Registry.Types)
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (ID<_Choice> ID in IdTYPE.IDs) 
			foreach  (ID<_Choice> ID in IdTYPE.IDs) {
				//         public TYPE<#{Class.Namespace}._Choice> TYPE__#{ID} ; 
				_Output.Write ("        public TYPE<{1}._Choice> TYPE__{2} ;\n{0}", _Indent, Class.Namespace, ID);
				// #end foreach 
				}
			// #foreach (ID<_Choice> ID in TokenTYPE.IDs) 
			foreach  (ID<_Choice> ID in TokenTYPE.IDs) {
				//         public TYPE<#{Class.Namespace}._Choice> TYPE__#{ID} ; 
				_Output.Write ("        public TYPE<{1}._Choice> TYPE__{2} ;\n{0}", _Indent, Class.Namespace, ID);
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			//         private #{Class.Namespace}._Choice New_Choice(string Label) { 
			_Output.Write ("        private {1}._Choice New_Choice(string Label) {{\n{0}", _Indent, Class.Namespace);
			//             switch (Label) { 
			_Output.Write ("            switch (Label) {{\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #elseif (Item._Tag() == GoedelType.Type) 
					} else if (  (Item._Tag() == GoedelType.Type)) {
					// #% Type T = (Type) Item; 
					 Type T = (Type) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #end if 
					}
				//                 case "#{ID}": return New#{ID}(); 
				_Output.Write ("                case \"{1}\": return New{2}();\n{0}", _Indent, ID, ID);
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			// 				} 
			_Output.Write ("				}}\n{0}", _Indent);
			//             throw new System.Exception ("Reserved word not recognized \"" + Label + "\""); 
			_Output.Write ("            throw new System.Exception (\"Reserved word not recognized \\\"\" + Label + \"\\\"\");\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #elseif (Item._Tag() == GoedelType.Type) 
					} else if (  (Item._Tag() == GoedelType.Type)) {
					// #% Type T = (Type) Item; 
					 Type T = (Type) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #end if 
					}
				//  
				_Output.Write ("\n{0}", _Indent);
				//         private #{Class.Namespace}.#{ID} New#{ID}() { 
				_Output.Write ("        private {1}.{2} New{3}() {{\n{0}", _Indent, Class.Namespace, ID, ID);
				//             #{Class.Namespace}.#{ID} result = new #{Class.Namespace}.#{ID}(); 
				_Output.Write ("            {1}.{2} result = new {3}.{4}();\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
				//             Push (result); 
				_Output.Write ("            Push (result);\n{0}", _Indent);
				//             State = StateCode.#{ID}_Start; 
				_Output.Write ("            State = StateCode.{1}_Start;\n{0}", _Indent, ID);
				//             return result; 
				_Output.Write ("            return result;\n{0}", _Indent);
				//             } 
				_Output.Write ("            }}\n{0}", _Indent);
				//  
				_Output.Write ("\n{0}", _Indent);
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			//         static #{Class.Namespace}.#{Class.Name}Type _Reserved(string Label) { 
			_Output.Write ("        static {1}.{2}Type _Reserved(string Label) {{\n{0}", _Indent, Class.Namespace, Class.Name);
			//             switch (Label) { 
			_Output.Write ("            switch (Label) {{\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #elseif (Item._Tag() == GoedelType.Type) 
					} else if (  (Item._Tag() == GoedelType.Type)) {
					// #% Type T = (Type) Item; 
					 Type T = (Type) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #end if 
					}
				//                 case "#{ID}": return #{Class.Namespace}.#{Class.Name}Type.#{ID}; 
				_Output.Write ("                case \"{1}\": return {2}.{3}Type.{4};\n{0}", _Indent, ID, Class.Namespace, Class.Name, ID);
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			//                 } 
			_Output.Write ("                }}\n{0}", _Indent);
			//             return #{Class.Namespace}.#{Class.Name}Type._Bottom; 
			_Output.Write ("            return {1}.{2}Type._Bottom;\n{0}", _Indent, Class.Namespace, Class.Name);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		public void Serialize (TextWriter Output) { 
			_Output.Write ("		public void Serialize (TextWriter Output) {{\n{0}", _Indent);
			// 			Serialize (Output, OutputFormat.Goedel); 
			_Output.Write ("			Serialize (Output, OutputFormat.Goedel);\n{0}", _Indent);
			// 			} 
			_Output.Write ("			}}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 		public void Serialize (TextWriter Output, OutputFormat OutputFormat) { 
			_Output.Write ("		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {{\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// 			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat); 
			_Output.Write ("			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);\n{0}", _Indent);
			// 			StructureWriter.StartDocument (); 
			_Output.Write ("			StructureWriter.StartDocument ();\n{0}", _Indent);
			// 			foreach (#{Class.Namespace}._Choice Entry in Top) { 
			_Output.Write ("			foreach ({1}._Choice Entry in Top) {{\n{0}", _Indent, Class.Namespace);
			// 				Entry.Serialize (StructureWriter, true); 
			_Output.Write ("				Entry.Serialize (StructureWriter, true);\n{0}", _Indent);
			// 				} 
			_Output.Write ("				}}\n{0}", _Indent);
			// 			StructureWriter.EndDocument (); 
			_Output.Write ("			StructureWriter.EndDocument ();\n{0}", _Indent);
			// 			} 
			_Output.Write ("			}}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         void Push (#{Class.Namespace}._Choice Token) { 
			_Output.Write ("        void Push ({1}._Choice Token) {{\n{0}", _Indent, Class.Namespace);
			//             _StackItem Item = new _StackItem (); 
			_Output.Write ("            _StackItem Item = new _StackItem ();\n{0}", _Indent);
			//             Item.State = State; 
			_Output.Write ("            Item.State = State;\n{0}", _Indent);
			//             Item.Token = Current; 
			_Output.Write ("            Item.Token = Current;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             Stack.Add (Item); 
			_Output.Write ("            Stack.Add (Item);\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             //Console.WriteLine ("$$$$PUSH {0}", Current); 
			_Output.Write ("            //Console.WriteLine (\"$$$$PUSH {{0}}\", Current);\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             Current = Token; 
			_Output.Write ("            Current = Token;\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         void Pop () { 
			_Output.Write ("        void Pop () {{\n{0}", _Indent);
			//             if (Stack.Count == 0) throw new System.Exception ("Internal Parser Error"); 
			_Output.Write ("            if (Stack.Count == 0) throw new System.Exception (\"Internal Parser Error\");\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             _StackItem Item = Stack[Stack.Count -1]; 
			_Output.Write ("            _StackItem Item = Stack[Stack.Count -1];\n{0}", _Indent);
			//             State = Item.State; 
			_Output.Write ("            State = Item.State;\n{0}", _Indent);
			//             Current = Item.Token; 
			_Output.Write ("            Current = Item.Token;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             Stack.RemoveAt (Stack.Count -1 ) ; 
			_Output.Write ("            Stack.RemoveAt (Stack.Count -1 ) ;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             //Console.WriteLine ("$$$$POP {0}", Current); 
			_Output.Write ("            //Console.WriteLine (\"$$$$POP {{0}}\", Current);\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//         public override void Process(TokenType Token, Position Position, string Text) { 
			_Output.Write ("        public override void Process(TokenType Token, Position Position, string Text) {{\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             if ((Token == TokenType.SEPARATOR) | 
			_Output.Write ("            if ((Token == TokenType.SEPARATOR) |\n{0}", _Indent);
			//                 (Token == TokenType.NULL) | 
			_Output.Write ("                (Token == TokenType.NULL) |\n{0}", _Indent);
			//                 (Token == TokenType.COMMENT)) return; 
			_Output.Write ("                (Token == TokenType.COMMENT)) return;\n{0}", _Indent);
			//             if (Token == TokenType.INVALID) 
			_Output.Write ("            if (Token == TokenType.INVALID)\n{0}", _Indent);
			//                 throw new System.Exception("Invalid Token"); 
			_Output.Write ("                throw new System.Exception(\"Invalid Token\");\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             bool Represent = true; 
			_Output.Write ("            bool Represent = true;\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//             while (Represent) { 
			_Output.Write ("            while (Represent) {{\n{0}", _Indent);
			//                 //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State); 
			_Output.Write ("                //Console.WriteLine (\"    {{3}}: {{0}} {{1}} '{{2}}'\", Token, Position, Text, State);\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//                 Represent = false; 
			_Output.Write ("                Represent = false;\n{0}", _Indent);
			//                 switch (State) { 
			_Output.Write ("                switch (State) {{\n{0}", _Indent);
			//                     case StateCode._Start:                 //      BEGIN 
			_Output.Write ("                    case StateCode._Start:                 //      BEGIN\n{0}", _Indent);
			//                         if (Token == TokenType.BEGIN) { 
			_Output.Write ("                        if (Token == TokenType.BEGIN) {{\n{0}", _Indent);
			//                             State = StateCode._Choice; 
			_Output.Write ("                            State = StateCode._Choice;\n{0}", _Indent);
			//                             break; 
			_Output.Write ("                            break;\n{0}", _Indent);
			//                             } 
			_Output.Write ("                            }}\n{0}", _Indent);
			//                         else throw new System.Exception("Parser Error Expected START"); 
			_Output.Write ("                        else throw new System.Exception(\"Parser Error Expected START\");\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//                     case StateCode._Choice:                //      LABEL Class | END 
			_Output.Write ("                    case StateCode._Choice:                //      LABEL Class | END\n{0}", _Indent);
			//                         if (Token == TokenType.LABEL) { 
			_Output.Write ("                        if (Token == TokenType.LABEL) {{\n{0}", _Indent);
			//                             #{Class.Namespace}.#{Class.Name}Type LabelType = _Reserved (Text); 
			_Output.Write ("                            {1}.{2}Type LabelType = _Reserved (Text);\n{0}", _Indent, Class.Namespace, Class.Name);
			//                             if (false#! 
			_Output.Write ("                            if (false", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					//  | 
					_Output.Write (" |\n{0}", _Indent);
					// 									(LabelType == #{Class.Namespace}.#{Class.Name}Type.#{ID})#! 
					_Output.Write ("									(LabelType == {1}.{2}Type.{3})", _Indent, Class.Namespace, Class.Name, ID);
					// #end if 
					}
				// #end foreach							 
				}
			// ) { 
			_Output.Write (") {{\n{0}", _Indent);
			//                                 Top.Add(New_Choice(Text)); 
			_Output.Write ("                                Top.Add(New_Choice(Text));\n{0}", _Indent);
			//                                 } 
			_Output.Write ("                                }}\n{0}", _Indent);
			//                             else { 
			_Output.Write ("                            else {{\n{0}", _Indent);
			//                                 throw new System.Exception("Parser Error Expected [Class]"); 
			_Output.Write ("                                throw new System.Exception(\"Parser Error Expected [Class]\");\n{0}", _Indent);
			//                                 } 
			_Output.Write ("                                }}\n{0}", _Indent);
			//                             break; 
			_Output.Write ("                            break;\n{0}", _Indent);
			//                             } 
			_Output.Write ("                            }}\n{0}", _Indent);
			//                         if (Token == TokenType.END) { 
			_Output.Write ("                        if (Token == TokenType.END) {{\n{0}", _Indent);
			//                             State = StateCode._End; 
			_Output.Write ("                            State = StateCode._End;\n{0}", _Indent);
			//                             break; 
			_Output.Write ("                            break;\n{0}", _Indent);
			//                             } 
			_Output.Write ("                            }}\n{0}", _Indent);
			//                         else throw new System.Exception("Parser Error Expected [Class]"); 
			_Output.Write ("                        else throw new System.Exception(\"Parser Error Expected [Class]\");\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			//                     case StateCode._End:                   //      - 
			_Output.Write ("                    case StateCode._End:                   //      -\n{0}", _Indent);
			//                         throw new System.Exception("Too Many Closing Braces"); 
			_Output.Write ("                        throw new System.Exception(\"Too Many Closing Braces\");\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #foreach (_Choice Item in Class.Entries) 
			foreach  (_Choice Item in Class.Entries) {
				// #% string ID = null; 
				 string ID = null;
				// #% List <Entry> Entries = null; 
				 List <Entry> Entries = null;
				// #% bool IsList = false; 
				 bool IsList = false;
				// #if (Item._Tag() == GoedelType.TopType) 
				if (  (Item._Tag() == GoedelType.TopType) ) {
					// #% TopType T = (TopType) Item; 
					 TopType T = (TopType) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #% Entries = T.Entries; 
					 Entries = T.Entries;
					// #elseif (Item._Tag() == GoedelType.Type) 
					} else if (  (Item._Tag() == GoedelType.Type)) {
					// #% Type T = (Type) Item; 
					 Type T = (Type) Item;
					// #% ID = T.Id.ToString(); 
					 ID = T.Id.ToString();
					// #% Entries = T.Entries; 
					 Entries = T.Entries;
					// #end if 
					}
				//                     case StateCode.#{ID}_Start: 
				_Output.Write ("                    case StateCode.{1}_Start:\n{0}", _Indent, ID);
				// #foreach (Entry Entry in Entries) 
				foreach  (Entry Entry in Entries) {
					// #% IsList = false; 
					 IsList = false;
					// #switchcast GoedelType Entry.Type 
					switch (Entry.Type._Tag ()) {
						// #casecast _Label null 
						case GoedelType._Label: { 
						// 						// Parser transition for _Label $$$$$ 
						_Output.Write ("						// Parser transition for _Label $$$$$\n{0}", _Indent);
						// #casecast Options Options 
						break; }
						case GoedelType.Options: {
						  Options Options = (Options) Entry.Type; 
						// #% IsList = true; 
						
						 IsList = true;
						//                         if (Token == TokenType.BEGIN) { 
						_Output.Write ("                        if (Token == TokenType.BEGIN) {{\n{0}", _Indent);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         else { 
						_Output.Write ("                        else {{\n{0}", _Indent);
						// 							Pop (); 
						_Output.Write ("							Pop ();\n{0}", _Indent);
						//                             Represent = true; 
						_Output.Write ("                            Represent = true;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         break; 
						_Output.Write ("                        break;\n{0}", _Indent);
						//                     case StateCode.#{ID}__#{Entry.Name}:  
						_Output.Write ("                    case StateCode.{1}__{2}: \n{0}", _Indent, ID, Entry.Name);
						//                         if (Token == TokenType.END) { 
						_Output.Write ("                        if (Token == TokenType.END) {{\n{0}", _Indent);
						//                             Pop(); 
						_Output.Write ("                            Pop();\n{0}", _Indent);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//  
						_Output.Write ("\n{0}", _Indent);
						// 						// Parser transition for OPTIONS $$$$$ 
						_Output.Write ("						// Parser transition for OPTIONS $$$$$\n{0}", _Indent);
						//                         else if (Token == TokenType.LABEL) { 
						_Output.Write ("                        else if (Token == TokenType.LABEL) {{\n{0}", _Indent);
						// 							#{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("							{1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             #{Class.Namespace}.#{Class.Name}Type LabelType = _Reserved (Text); 
						_Output.Write ("                            {1}.{2}Type LabelType = _Reserved (Text);\n{0}", _Indent, Class.Namespace, Class.Name);
						// 							switch (LabelType) { 
						_Output.Write ("							switch (LabelType) {{\n{0}", _Indent);
						// #foreach (OptionEntry OEntry in Options.Entries) 
						foreach  (OptionEntry OEntry in Options.Entries) {
							// 								case #{Class.Namespace}.#{Class.Name}Type.#{OEntry.Type} : { 
							_Output.Write ("								case {1}.{2}Type.{3} : {{\n{0}", _Indent, Class.Namespace, Class.Name, OEntry.Type);
							//  
							_Output.Write ("\n{0}", _Indent);
							// 									// #{OEntry.Name}  #{OEntry.Type} 
							_Output.Write ("									// {1}  {2}\n{0}", _Indent, OEntry.Name, OEntry.Type);
							// #switchcast GoedelType OEntry.Occurs 
							switch (OEntry.Occurs._Tag ()) {
								// #casecast Single null 
								case GoedelType.Single: { 
								// 									Current_Cast.#{OEntry.Name} = New#{OEntry.Type} (); 
								_Output.Write ("									Current_Cast.{1} = New{2} ();\n{0}", _Indent, OEntry.Name, OEntry.Type);
								// #casecast Multiple null 
								break; }
								case GoedelType.Multiple: { 
								// 									Current_Cast.#{OEntry.Name}.Add (New#{OEntry.Type} ()); 
								_Output.Write ("									Current_Cast.{1}.Add (New{2} ());\n{0}", _Indent, OEntry.Name, OEntry.Type);
								// #end switchcast 
							break; }
								}
							// 									break; 
							_Output.Write ("									break;\n{0}", _Indent);
							// 									} 
							_Output.Write ("									}}\n{0}", _Indent);
							// #end foreach 
							}
						// 								default : { 
						_Output.Write ("								default : {{\n{0}", _Indent);
						// 									throw new System.Exception("Parser Error Expected [#! 
						_Output.Write ("									throw new System.Exception(\"Parser Error Expected [", _Indent);
						// #foreach (OptionEntry OEntry in Options.Entries) 
						foreach  (OptionEntry OEntry in Options.Entries) {
							// #{OEntry.Type} #! 
							_Output.Write ("{1} ", _Indent, OEntry.Type);
							// #end foreach						 
							}
						// ]"); 
						_Output.Write ("]\");\n{0}", _Indent);
						// 									} 
						_Output.Write ("									}}\n{0}", _Indent);
						// 								} 
						_Output.Write ("								}}\n{0}", _Indent);
						// 							} 
						_Output.Write ("							}}\n{0}", _Indent);
						//                         break; 
						_Output.Write ("                        break;\n{0}", _Indent);
						// #casecast List List 
						break; }
						case GoedelType.List: {
						  List List = (List) Entry.Type; 
						//  
						_Output.Write ("\n{0}", _Indent);
						//                         if (Token == TokenType.BEGIN) { 
						_Output.Write ("                        if (Token == TokenType.BEGIN) {{\n{0}", _Indent);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         else { 
						_Output.Write ("                        else {{\n{0}", _Indent);
						// 							Pop (); 
						_Output.Write ("							Pop ();\n{0}", _Indent);
						//                             Represent = true; 
						_Output.Write ("                            Represent = true;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         break; 
						_Output.Write ("                        break;\n{0}", _Indent);
						//                     case StateCode.#{ID}__#{Entry.Name}:  
						_Output.Write ("                    case StateCode.{1}__{2}: \n{0}", _Indent, ID, Entry.Name);
						//                         if (Token == TokenType.END) { 
						_Output.Write ("                        if (Token == TokenType.END) {{\n{0}", _Indent);
						//                             Pop(); 
						_Output.Write ("                            Pop();\n{0}", _Indent);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//  
						_Output.Write ("\n{0}", _Indent);
						// 						// Parser transition for LIST $$$$$ 
						_Output.Write ("						// Parser transition for LIST $$$$$\n{0}", _Indent);
						//  
						_Output.Write ("\n{0}", _Indent);
						// #% IsList = true; 
						
						 IsList = true;
						// #switch (List.Type._Tag()) 
						switch ( (List.Type._Tag())) {
							// #case GoedelType._Label 
							case  GoedelType._Label: {
							// #% _Label LLabel = (_Label) List.Type; 
							
							 _Label LLabel = (_Label) List.Type;
							//  
							_Output.Write ("\n{0}", _Indent);
							// 						/// Label 
							_Output.Write ("						/// Label\n{0}", _Indent);
							//                         else { 
							_Output.Write ("                        else {{\n{0}", _Indent);
							//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
							_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
							//                             Current_Cast.#{Entry.Name}.Add (New#{LLabel.Label} ()); 
							_Output.Write ("                            Current_Cast.{1}.Add (New{2} ());\n{0}", _Indent, Entry.Name, LLabel.Label);
							//                             Represent = true; 
							_Output.Write ("                            Represent = true;\n{0}", _Indent);
							//                             } 
							_Output.Write ("                            }}\n{0}", _Indent);
							//  
							_Output.Write ("\n{0}", _Indent);
							// #case GoedelType.Choice 
							break; }
							case  GoedelType.Choice: {
							// #% Choice Choice = (Choice) List.Type;  
							
							 Choice Choice = (Choice) List.Type; 
							//                         else if (Token == TokenType.LABEL) { 
							_Output.Write ("                        else if (Token == TokenType.LABEL) {{\n{0}", _Indent);
							// 							#{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
							_Output.Write ("							{1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
							//                             #{Class.Namespace}.#{Class.Name}Type LabelType = _Reserved (Text); 
							_Output.Write ("                            {1}.{2}Type LabelType = _Reserved (Text);\n{0}", _Indent, Class.Namespace, Class.Name);
							//                             if ( false #! 
							_Output.Write ("                            if ( false ", _Indent);
							// #foreach (REF<_Choice> Ref in Choice.Entries) 
							foreach  (REF<_Choice> Ref in Choice.Entries) {
								// | 
								_Output.Write ("|\n{0}", _Indent);
								// 									(LabelType == #{Class.Namespace}.#{Class.Name}Type.#{Ref}) #! 
								_Output.Write ("									(LabelType == {1}.{2}Type.{3}) ", _Indent, Class.Namespace, Class.Name, Ref);
								// #end foreach 
								}
							// ) { 
							_Output.Write (") {{\n{0}", _Indent);
							//                                 Current_Cast.#{Entry.Name}.Add (New_Choice(Text)); 
							_Output.Write ("                                Current_Cast.{1}.Add (New_Choice(Text));\n{0}", _Indent, Entry.Name);
							//                                 } 
							_Output.Write ("                                }}\n{0}", _Indent);
							//                             else { 
							_Output.Write ("                            else {{\n{0}", _Indent);
							// 								throw new System.Exception("Parser Error Expected [#! 
							_Output.Write ("								throw new System.Exception(\"Parser Error Expected [", _Indent);
							// #foreach (REF<_Choice> Ref in Choice.Entries) 
							foreach  (REF<_Choice> Ref in Choice.Entries) {
								// #{Ref} #! 
								_Output.Write ("{1} ", _Indent, Ref);
								// #end foreach						 
								}
							// ]"); 
							_Output.Write ("]\");\n{0}", _Indent);
							// 								} 
							_Output.Write ("								}}\n{0}", _Indent);
							// 							} 
							_Output.Write ("							}}\n{0}", _Indent);
							// #case GoedelType.ChoiceREF 
							break; }
							case  GoedelType.ChoiceREF: {
							//  
							_Output.Write ("\n{0}", _Indent);
							//  
							_Output.Write ("\n{0}", _Indent);
							// #case GoedelType.ID 
							break; }
							case  GoedelType.ID: {
							// #case GoedelType.REF 
							break; }
							case  GoedelType.REF: {
							// #% REF REF = (REF) List.Type; 
							
							 REF REF = (REF) List.Type;
							//                         else if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) { 
							_Output.Write ("                        else if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {{\n{0}", _Indent);
							//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
							_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
							//                             Current_Cast.#{Entry.Name}.Add ( Registry.REF(Position, Text, TYPE__#{REF.Type}, Current_Cast ) ); 
							_Output.Write ("                            Current_Cast.{1}.Add ( Registry.REF(Position, Text, TYPE__{2}, Current_Cast ) );\n{0}", _Indent, Entry.Name, REF.Type);
							//                             break; 
							_Output.Write ("                            break;\n{0}", _Indent);
							//                             } 
							_Output.Write ("                            }}\n{0}", _Indent);
							//  
							_Output.Write ("\n{0}", _Indent);
							// #case GoedelType.Token 
							break; }
							case  GoedelType.Token: {
							// #case GoedelType.String 
							break; }
							case  GoedelType.String: {
							// #case GoedelType.Text 
							break; }
							case  GoedelType.Text: {
							// #case GoedelType.Integer 
							break; }
							case  GoedelType.Integer: {
							// #end switch 
						break; }
							}
						//                         break; 
						_Output.Write ("                        break;\n{0}", _Indent);
						//  
						_Output.Write ("\n{0}", _Indent);
						// #casecast Choice Entry_Cast 
						break; }
						case GoedelType.Choice: {
						  Choice Entry_Cast = (Choice) Entry.Type; 
						//                         if (Token == TokenType.LABEL) { 
						_Output.Write ("                        if (Token == TokenType.LABEL) {{\n{0}", _Indent);
						// 							#{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("							{1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             #{Class.Namespace}.#{Class.Name}Type LabelType = _Reserved (Text); 
						_Output.Write ("                            {1}.{2}Type LabelType = _Reserved (Text);\n{0}", _Indent, Class.Namespace, Class.Name);
						//                             if ( false #! 
						_Output.Write ("                            if ( false ", _Indent);
						// #foreach (REF<_Choice> Ref in Entry_Cast.Entries) 
						foreach  (REF<_Choice> Ref in Entry_Cast.Entries) {
							// | 
							_Output.Write ("|\n{0}", _Indent);
							// 									(LabelType == #{Class.Namespace}.#{Class.Name}Type.#{Ref}) #! 
							_Output.Write ("									(LabelType == {1}.{2}Type.{3}) ", _Indent, Class.Namespace, Class.Name, Ref);
							// #end foreach 
							}
						// ) { 
						_Output.Write (") {{\n{0}", _Indent);
						//                                 State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                                State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                                 Current_Cast.#{Entry.Name} = New_Choice(Text); 
						_Output.Write ("                                Current_Cast.{1} = New_Choice(Text);\n{0}", _Indent, Entry.Name);
						//                                 } 
						_Output.Write ("                                }}\n{0}", _Indent);
						//                             else { 
						_Output.Write ("                            else {{\n{0}", _Indent);
						//                                throw new System.Exception("Parser Error Expected [#! 
						_Output.Write ("                               throw new System.Exception(\"Parser Error Expected [", _Indent);
						// #foreach (REF<_Choice> Ref in Entry_Cast.Entries) 
						foreach  (REF<_Choice> Ref in Entry_Cast.Entries) {
							// #{Ref} #! 
							_Output.Write ("{1} ", _Indent, Ref);
							// #end foreach						 
							}
						// ]"); 
						_Output.Write ("]\");\n{0}", _Indent);
						//                                 } 
						_Output.Write ("                                }}\n{0}", _Indent);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         else throw new System.Exception("Parser Error Expected [#! 
						_Output.Write ("                        else throw new System.Exception(\"Parser Error Expected [", _Indent);
						// #foreach (REF<_Choice> Ref in Entry_Cast.Entries) 
						foreach  (REF<_Choice> Ref in Entry_Cast.Entries) {
							// #{Ref} #! 
							_Output.Write ("{1} ", _Indent, Ref);
							// #end foreach						 
							}
						// ]"); 
						_Output.Write ("]\");\n{0}", _Indent);
						// #casecast ChoiceREF Entry_Cast 
						break; }
						case GoedelType.ChoiceREF: {
						  ChoiceREF Entry_Cast = (ChoiceREF) Entry.Type; 
						//                         if (Token == TokenType.LABEL) { 
						_Output.Write ("                        if (Token == TokenType.LABEL) {{\n{0}", _Indent);
						// 							#{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("							{1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             #{Class.Namespace}.#{Class.Name}Type LabelType = _Reserved (Text); 
						_Output.Write ("                            {1}.{2}Type LabelType = _Reserved (Text);\n{0}", _Indent, Class.Namespace, Class.Name);
						//                             if ( false #! 
						_Output.Write ("                            if ( false ", _Indent);
						// #foreach (REF<_Choice> Ref in Entry_Cast.Entries) 
						foreach  (REF<_Choice> Ref in Entry_Cast.Entries) {
							// | 
							_Output.Write ("|\n{0}", _Indent);
							// 									(LabelType == #{Class.Namespace}.#{Class.Name}Type.#{Ref}) #! 
							_Output.Write ("									(LabelType == {1}.{2}Type.{3}) ", _Indent, Class.Namespace, Class.Name, Ref);
							// #end foreach 
							}
						// ) { 
						_Output.Write (") {{\n{0}", _Indent);
						//                                 State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                                State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                                 Current_Cast.#{Entry.Name} = New_Choice(Text); 
						_Output.Write ("                                Current_Cast.{1} = New_Choice(Text);\n{0}", _Indent, Entry.Name);
						//                                 } 
						_Output.Write ("                                }}\n{0}", _Indent);
						//                             else { 
						_Output.Write ("                            else {{\n{0}", _Indent);
						//                                 #{Class.Namespace}._Label result = new #{Class.Namespace}._Label(); 
						_Output.Write ("                                {1}._Label result = new {2}._Label();\n{0}", _Indent, Class.Namespace, Class.Namespace);
						//                                 result.Label = Registry.REF(Position, Text, TYPE__#{Entry_Cast.ID}, Current_Cast); 
						_Output.Write ("                                result.Label = Registry.REF(Position, Text, TYPE__{1}, Current_Cast);\n{0}", _Indent, Entry_Cast.ID);
						//                                 Current_Cast.#{Entry.Name} = result; 
						_Output.Write ("                                Current_Cast.{1} = result;\n{0}", _Indent, Entry.Name);
						//                                 State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                                State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                                 } 
						_Output.Write ("                                }}\n{0}", _Indent);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         else if (Token == TokenType.LITERAL) { 
						_Output.Write ("                        else if (Token == TokenType.LITERAL) {{\n{0}", _Indent);
						//                             #{Class.Namespace}._Label result = new #{Class.Namespace}._Label(); 
						_Output.Write ("                            {1}._Label result = new {2}._Label();\n{0}", _Indent, Class.Namespace, Class.Namespace);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             result.Label = Registry.REF(Position, Text, TYPE__#{Entry_Cast.ID}, Current_Cast); 
						_Output.Write ("                            result.Label = Registry.REF(Position, Text, TYPE__{1}, Current_Cast);\n{0}", _Indent, Entry_Cast.ID);
						//                             Current_Cast.#{Entry.Name} = result; 
						_Output.Write ("                            Current_Cast.{1} = result;\n{0}", _Indent, Entry.Name);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         else throw new System.Exception("Parser Error Expected [#! 
						_Output.Write ("                        else throw new System.Exception(\"Parser Error Expected [", _Indent);
						// #foreach (REF<_Choice> Ref in Entry_Cast.Entries) 
						foreach  (REF<_Choice> Ref in Entry_Cast.Entries) {
							// #{Ref} #! 
							_Output.Write ("{1} ", _Indent, Ref);
							// #end foreach						 
							}
						// ]"); 
						_Output.Write ("]\");\n{0}", _Indent);
						// #casecast ID Entry_Cast 
						break; }
						case GoedelType.ID: {
						  ID Entry_Cast = (ID) Entry.Type; 
						//                         if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) { 
						_Output.Write ("                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {{\n{0}", _Indent);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             Current_Cast.#{Entry.Name} = Registry.ID(Position, Text, TYPE__#{Entry_Cast.Type}, Current_Cast); 
						_Output.Write ("                            Current_Cast.{1} = Registry.ID(Position, Text, TYPE__{2}, Current_Cast);\n{0}", _Indent, Entry.Name, Entry_Cast.Type);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         throw new System.Exception("Expected LABEL or LITERAL"); 
						_Output.Write ("                        throw new System.Exception(\"Expected LABEL or LITERAL\");\n{0}", _Indent);
						// #casecast REF Entry_Cast 
						break; }
						case GoedelType.REF: {
						  REF Entry_Cast = (REF) Entry.Type; 
						//                         if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) { 
						_Output.Write ("                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {{\n{0}", _Indent);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             Current_Cast.#{Entry.Name} = Registry.REF(Position, Text, TYPE__#{Entry_Cast.Type}, Current_Cast); 
						_Output.Write ("                            Current_Cast.{1} = Registry.REF(Position, Text, TYPE__{2}, Current_Cast);\n{0}", _Indent, Entry.Name, Entry_Cast.Type);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         throw new System.Exception("Expected LABEL or LITERAL"); 
						_Output.Write ("                        throw new System.Exception(\"Expected LABEL or LITERAL\");\n{0}", _Indent);
						// #casecast Token Entry_Cast 
						break; }
						case GoedelType.Token: {
						  Token Entry_Cast = (Token) Entry.Type; 
						//                         if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) { 
						_Output.Write ("                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {{\n{0}", _Indent);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             Current_Cast.#{Entry.Name} = Registry.TOKEN(Position, Text, TYPE__#{Entry_Cast.Type}, Current_Cast); 
						_Output.Write ("                            Current_Cast.{1} = Registry.TOKEN(Position, Text, TYPE__{2}, Current_Cast);\n{0}", _Indent, Entry.Name, Entry_Cast.Type);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         throw new System.Exception("Expected LABEL or LITERAL"); 
						_Output.Write ("                        throw new System.Exception(\"Expected LABEL or LITERAL\");\n{0}", _Indent);
						// #casecast String null 
						break; }
						case GoedelType.String: { 
						//                         if (Token == TokenType.STRING) { 
						_Output.Write ("                        if (Token == TokenType.STRING) {{\n{0}", _Indent);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             Current_Cast.#{Entry.Name} = Text; 
						_Output.Write ("                            Current_Cast.{1} = Text;\n{0}", _Indent, Entry.Name);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         throw new System.Exception("Expected String"); 
						_Output.Write ("                        throw new System.Exception(\"Expected String\");\n{0}", _Indent);
						// #casecast Text null 
						break; }
						case GoedelType.Text: { 
						//                         if (Token == TokenType.BEGIN) { 
						_Output.Write ("                        if (Token == TokenType.BEGIN) {{\n{0}", _Indent);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         else { 
						_Output.Write ("                        else {{\n{0}", _Indent);
						//                             Pop(); 
						_Output.Write ("                            Pop();\n{0}", _Indent);
						//                             Represent = true; 
						_Output.Write ("                            Represent = true;\n{0}", _Indent);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                     case StateCode.#{ID}__#{Entry.Name}: 
						_Output.Write ("                    case StateCode.{1}__{2}:\n{0}", _Indent, ID, Entry.Name);
						//                        if (Token == TokenType.END) { 
						_Output.Write ("                       if (Token == TokenType.END) {{\n{0}", _Indent);
						//                             Pop(); 
						_Output.Write ("                            Pop();\n{0}", _Indent);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                        else if (Token == TokenType.TEXT) { 
						_Output.Write ("                       else if (Token == TokenType.TEXT) {{\n{0}", _Indent);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             Current_Cast.#{Entry.Name}.Add (Text); 
						_Output.Write ("                            Current_Cast.{1}.Add (Text);\n{0}", _Indent, Entry.Name);
						//                             break;							 
						_Output.Write ("                            break;							\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                        throw new System.Exception("Expected Text"); 
						_Output.Write ("                       throw new System.Exception(\"Expected Text\");\n{0}", _Indent);
						//  
						_Output.Write ("\n{0}", _Indent);
						// #% IsList = true; 
						
						 IsList = true;
						// #casecast Integer null 
						break; }
						case GoedelType.Integer: { 
						//                         if (Token == TokenType.INTEGER) { 
						_Output.Write ("                        if (Token == TokenType.INTEGER) {{\n{0}", _Indent);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             Current_Cast.#{Entry.Name} = Convert.ToInt32(Text); 
						_Output.Write ("                            Current_Cast.{1} = Convert.ToInt32(Text);\n{0}", _Indent, Entry.Name);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         throw new System.Exception("Expected Integer"); 
						_Output.Write ("                        throw new System.Exception(\"Expected Integer\");\n{0}", _Indent);
						// #casecast Boolean null 
						break; }
						case GoedelType.Boolean: { 
						//                         if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL))  { 
						_Output.Write ("                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL))  {{\n{0}", _Indent);
						//                             #{Class.Namespace}.#{ID} Current_Cast = (#{Class.Namespace}.#{ID})Current; 
						_Output.Write ("                            {1}.{2} Current_Cast = ({3}.{4})Current;\n{0}", _Indent, Class.Namespace, ID, Class.Namespace, ID);
						//                             Current_Cast.#{Entry.Name} = Convert.ToBoolean (Text); 
						_Output.Write ("                            Current_Cast.{1} = Convert.ToBoolean (Text);\n{0}", _Indent, Entry.Name);
						//                             State = StateCode.#{ID}__#{Entry.Name}; 
						_Output.Write ("                            State = StateCode.{1}__{2};\n{0}", _Indent, ID, Entry.Name);
						//                             break; 
						_Output.Write ("                            break;\n{0}", _Indent);
						//                             } 
						_Output.Write ("                            }}\n{0}", _Indent);
						//                         throw new System.Exception("Expected True or False");						 
						_Output.Write ("                        throw new System.Exception(\"Expected True or False\");						\n{0}", _Indent);
						// #end switchcast 
					break; }
						}
					//  
					_Output.Write ("\n{0}", _Indent);
					// #if !IsList 
					if (  !IsList ) {
						//                     case StateCode.#{ID}__#{Entry.Name}: 
						_Output.Write ("                    case StateCode.{1}__{2}:\n{0}", _Indent, ID, Entry.Name);
						// #end if 
						}
					// #end foreach 
					}
				// #if !IsList 
				if (  !IsList ) {
					//                         Pop (); 
					_Output.Write ("                        Pop ();\n{0}", _Indent);
					//                         Represent = true;  
					_Output.Write ("                        Represent = true; \n{0}", _Indent);
					//                         break; 
					_Output.Write ("                        break;\n{0}", _Indent);
					// #end if 
					}
				// #end foreach 
				}
			//  
			_Output.Write ("\n{0}", _Indent);
			//                     default: 
			_Output.Write ("                    default:\n{0}", _Indent);
			//                         throw new System.Exception("Unreachable code reached"); 
			_Output.Write ("                        throw new System.Exception(\"Unreachable code reached\");\n{0}", _Indent);
			//                     } 
			_Output.Write ("                    }}\n{0}", _Indent);
			//                 } 
			_Output.Write ("                }}\n{0}", _Indent);
			//             } 
			_Output.Write ("            }}\n{0}", _Indent);
			//         } 
			_Output.Write ("        }}\n{0}", _Indent);
			// 	} 
			_Output.Write ("	}}\n{0}", _Indent);
			//  
			_Output.Write ("\n{0}", _Indent);
			// #end method 
			}
		//  
		// #method DeclareEntry Entry Entry 
		

		//
		// DeclareEntry
		//
		public void DeclareEntry (Entry Entry) {
			// #switchcast GoedelType Entry.Type 
			switch (Entry.Type._Tag ()) {
				// #casecast _Label Label 
				case GoedelType._Label: {
				  _Label Label = (_Label) Entry.Type; 
				//         public #{Label.Label}					#{Entry.Name}; 
				_Output.Write ("        public {1}					{2};\n{0}", _Indent, Label.Label, Entry.Name);
				// #casecast Options Options 
				break; }
				case GoedelType.Options: {
				  Options Options = (Options) Entry.Type; 
				// #foreach (OptionEntry OEntry in Options.Entries) 
				foreach  (OptionEntry OEntry in Options.Entries) {
					// #switchcast GoedelType OEntry.Occurs 
					switch (OEntry.Occurs._Tag ()) {
						// #casecast Single null 
						case GoedelType.Single: { 
						// 		public #{OEntry.Type}  #{OEntry.Name} = new  #{OEntry.Type}(); 
						_Output.Write ("		public {1}  {2} = new  {3}();\n{0}", _Indent, OEntry.Type, OEntry.Name, OEntry.Type);
						// #casecast Multiple null 
						break; }
						case GoedelType.Multiple: { 
						// 		public List<#{OEntry.Type}>  #{OEntry.Name} = new  List <#{OEntry.Type}> (); 
						_Output.Write ("		public List<{1}>  {2} = new  List <{3}> ();\n{0}", _Indent, OEntry.Type, OEntry.Name, OEntry.Type);
						// #end switchcast 
					break; }
						}
					// #end foreach 
					}
				// #casecast List List 
				break; }
				case GoedelType.List: {
				  List List = (List) Entry.Type; 
				// #% string Type = "???"; 
				
				 string Type = "???";
				// #switch (List.Type._Tag()) 
				switch ( (List.Type._Tag())) {
					// #case GoedelType._Label 
					case  GoedelType._Label: {
					// #% _Label LLabel = (_Label) List.Type; 
					
					 _Label LLabel = (_Label) List.Type;
					// #% Type = LLabel.Label.ToString (); 
					
					 Type = LLabel.Label.ToString ();
					// #case GoedelType.Choice 
					break; }
					case  GoedelType.Choice: {
					// #% Type = "_Choice"; 
					
					 Type = "_Choice";
					// #case GoedelType.ChoiceREF 
					break; }
					case  GoedelType.ChoiceREF: {
					// #% Type = "_Choice"; 
					
					 Type = "_Choice";
					// #case GoedelType.ID 
					break; }
					case  GoedelType.ID: {
					// #% Type = "ID<_Choice>"; 
					
					 Type = "ID<_Choice>";
					// #case GoedelType.REF 
					break; }
					case  GoedelType.REF: {
					// #% Type = "REF<_Choice>"; 
					
					 Type = "REF<_Choice>";
					// #case GoedelType.Token 
					break; }
					case  GoedelType.Token: {
					// #% Type = "TOKEN<_Choice>"; 
					
					 Type = "TOKEN<_Choice>";
					// #case GoedelType.String 
					break; }
					case  GoedelType.String: {
					// #% Type = "string"; 
					
					 Type = "string";
					// #case GoedelType.Text 
					break; }
					case  GoedelType.Text: {
					// #% Type = "String"; 
					
					 Type = "String";
					// #case GoedelType.Integer 
					break; }
					case  GoedelType.Integer: {
					// #% Type = "int"; 
					
					 Type = "int";
					// #case GoedelType.Boolean 
					break; }
					case  GoedelType.Boolean: {
					// #% Type = "bool"; 
					
					 Type = "bool";
					// #end switch 
				break; }
					}
				//         public List <#{Type}>           #{Entry.Name} = new List<#{Type}> (); 
				_Output.Write ("        public List <{1}>           {2} = new List<{3}> ();\n{0}", _Indent, Type, Entry.Name, Type);
				// #casecast Choice null 
				break; }
				case GoedelType.Choice: { 
				//         public _Choice					#{Entry.Name}; 
				_Output.Write ("        public _Choice					{1};\n{0}", _Indent, Entry.Name);
				// #casecast ChoiceREF null 
				break; }
				case GoedelType.ChoiceREF: { 
				//         public _Choice					#{Entry.Name}; 
				_Output.Write ("        public _Choice					{1};\n{0}", _Indent, Entry.Name);
				// #casecast ID null 
				break; }
				case GoedelType.ID: { 
				//         public ID<_Choice>				#{Entry.Name};  
				_Output.Write ("        public ID<_Choice>				{1}; \n{0}", _Indent, Entry.Name);
				// #casecast REF null 
				break; }
				case GoedelType.REF: { 
				//         public REF<_Choice>				#{Entry.Name}; 
				_Output.Write ("        public REF<_Choice>				{1};\n{0}", _Indent, Entry.Name);
				// #casecast Token null 
				break; }
				case GoedelType.Token: { 
				//         public TOKEN<_Choice>			#{Entry.Name}; 
				_Output.Write ("        public TOKEN<_Choice>			{1};\n{0}", _Indent, Entry.Name);
				// #casecast String null 
				break; }
				case GoedelType.String: { 
				// 		public string					#{Entry.Name}; 
				_Output.Write ("		public string					{1};\n{0}", _Indent, Entry.Name);
				// #casecast Text null 
				break; }
				case GoedelType.Text: { 
				// 		public List <System.String>			#{Entry.Name} = new List <System.String> ();  
				_Output.Write ("		public List <System.String>			{1} = new List <System.String> (); \n{0}", _Indent, Entry.Name);
				// #casecast Integer null 
				break; }
				case GoedelType.Integer: { 
				// 		public int						#{Entry.Name}; 
				_Output.Write ("		public int						{1};\n{0}", _Indent, Entry.Name);
				// #casecast Boolean null 
				break; }
				case GoedelType.Boolean: { 
				// 		public bool						#{Entry.Name}; 
				_Output.Write ("		public bool						{1};\n{0}", _Indent, Entry.Name);
				// #end switchcast 
			break; }
				}
			// #end method 
			}
		//  
		//  
		// #method SerializeEntry Entry Entry 
		

		//
		// SerializeEntry
		//
		public void SerializeEntry (Entry Entry) {
			// #switchcast GoedelType Entry.Type 
			switch (Entry.Type._Tag ()) {
				// #casecast _Label null 
				case GoedelType._Label: { 
				// #casecast Options Options 
				break; }
				case GoedelType.Options: {
				  Options Options = (Options) Entry.Type; 
				// 			Output.StartList (""); 
				_Output.Write ("			Output.StartList (\"\");\n{0}", _Indent);
				// #foreach (OptionEntry OEntry in Options.Entries) 
				foreach  (OptionEntry OEntry in Options.Entries) {
					// #switchcast GoedelType OEntry.Occurs 
					switch (OEntry.Occurs._Tag ()) {
						// #casecast Single null 
						case GoedelType.Single: { 
						// 		// public #{OEntry.Type}  #{OEntry.Name} = new  #{OEntry.Type}(); 
						_Output.Write ("		// public {1}  {2} = new  {3}();\n{0}", _Indent, OEntry.Type, OEntry.Name, OEntry.Type);
						// 			#{OEntry.Name}.Serialize (Output, true); 
						_Output.Write ("			{1}.Serialize (Output, true);\n{0}", _Indent, OEntry.Name);
						// #casecast Multiple null 
						break; }
						case GoedelType.Multiple: { 
						// 			foreach (#{OEntry.Type} _e in #{OEntry.Name}) { 
						_Output.Write ("			foreach ({1} _e in {2}) {{\n{0}", _Indent, OEntry.Type, OEntry.Name);
						// 				_e.Serialize (Output, true); 
						_Output.Write ("				_e.Serialize (Output, true);\n{0}", _Indent);
						// 				} 
						_Output.Write ("				}}\n{0}", _Indent);
						// #end switchcast 
					break; }
						}
					// #end foreach 
					}
				// 			Output.EndList (""); 
				_Output.Write ("			Output.EndList (\"\");\n{0}", _Indent);
				// #casecast List List 
				break; }
				case GoedelType.List: {
				  List List = (List) Entry.Type; 
				// 			Output.StartList (""); 
				_Output.Write ("			Output.StartList (\"\");\n{0}", _Indent);
				// #switchcast GoedelType List.Type 
				switch (List.Type._Tag ()) {
					// #casecast _Label LLabel 
					case GoedelType._Label: {
					  _Label LLabel = (_Label) List.Type; 
					// 			foreach (#{LLabel.Label} _e in #{Entry.Name}) { 
					_Output.Write ("			foreach ({1} _e in {2}) {{\n{0}", _Indent, LLabel.Label, Entry.Name);
					// 				_e.Serialize (Output, true); 
					_Output.Write ("				_e.Serialize (Output, true);\n{0}", _Indent);
					// #casecast Choice null 
					break; }
					case GoedelType.Choice: { 
					// 			foreach (_Choice _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (_Choice _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				_e.Serialize (Output, true); 
					_Output.Write ("				_e.Serialize (Output, true);\n{0}", _Indent);
					// #casecast ChoiceREF null 
					break; }
					case GoedelType.ChoiceREF: { 
					// 			foreach (_Choice _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (_Choice _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				_e.Serialize (Output, true); 
					_Output.Write ("				_e.Serialize (Output, true);\n{0}", _Indent);
					// #casecast ID null 
					break; }
					case GoedelType.ID: { 
					// 			foreach (ID<_Choice> _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (ID<_Choice> _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				Output.WriteId ("#{Entry.Name}", _e.ToString());  
					_Output.Write ("				Output.WriteId (\"{1}\", _e.ToString()); \n{0}", _Indent, Entry.Name);
					// #casecast REF null 
					break; }
					case GoedelType.REF: { 
					// 			foreach (REF<_Choice> _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (REF<_Choice> _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				Output.WriteId ("#{Entry.Name}", _e.ToString()); 
					_Output.Write ("				Output.WriteId (\"{1}\", _e.ToString());\n{0}", _Indent, Entry.Name);
					// #casecast Token null 
					break; }
					case GoedelType.Token: { 
					// 			foreach (TOKEN<_Choice> _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (TOKEN<_Choice> _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				Output.WriteId ("#{Entry.Name}", _e.ToString()); 
					_Output.Write ("				Output.WriteId (\"{1}\", _e.ToString());\n{0}", _Indent, Entry.Name);
					// #casecast String null 
					break; }
					case GoedelType.String: { 
					// 			foreach (string _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (string _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				Output.WriteAttribute ("#{Entry.Name}", _e); 
					_Output.Write ("				Output.WriteAttribute (\"{1}\", _e);\n{0}", _Indent, Entry.Name);
					// #casecast Integer null 
					break; }
					case GoedelType.Integer: { 
					// 			foreach (int _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (int _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				Output.Write ("#{Entry.Name}", _e); 
					_Output.Write ("				Output.Write (\"{1}\", _e);\n{0}", _Indent, Entry.Name);
					// #casecast Boolean null 
					break; }
					case GoedelType.Boolean: { 
					// 			foreach (bool _e in #{Entry.Name}) { 
					_Output.Write ("			foreach (bool _e in {1}) {{\n{0}", _Indent, Entry.Name);
					// 				Output.WriteAttribute ("#{Entry.Name}", _e); 
					_Output.Write ("				Output.WriteAttribute (\"{1}\", _e);\n{0}", _Indent, Entry.Name);
					// #end switchcast 
				break; }
					}
				// 				} 
				_Output.Write ("				}}\n{0}", _Indent);
				// 			Output.EndList (""); 
				_Output.Write ("			Output.EndList (\"\");\n{0}", _Indent);
				// #casecast Choice null 
				break; }
				case GoedelType.Choice: { 
				// 	        #{Entry.Name}.Serialize (Output, true); 
				_Output.Write ("	        {1}.Serialize (Output, true);\n{0}", _Indent, Entry.Name);
				// #casecast ChoiceREF null 
				break; }
				case GoedelType.ChoiceREF: { 
				// 	        #{Entry.Name}.Serialize (Output, true); 
				_Output.Write ("	        {1}.Serialize (Output, true);\n{0}", _Indent, Entry.Name);
				// #casecast ID null 
				break; }
				case GoedelType.ID: { 
				// 	        Output.WriteId ("#{Entry.Name}", #{Entry.Name}.ToString());  
				_Output.Write ("	        Output.WriteId (\"{1}\", {2}.ToString()); \n{0}", _Indent, Entry.Name, Entry.Name);
				// #casecast REF null 
				break; }
				case GoedelType.REF: { 
				// 	        Output.WriteId ("#{Entry.Name}", #{Entry.Name}.ToString()); 
				_Output.Write ("	        Output.WriteId (\"{1}\", {2}.ToString());\n{0}", _Indent, Entry.Name, Entry.Name);
				// #casecast Token null 
				break; }
				case GoedelType.Token: { 
				// 	        Output.WriteId ("#{Entry.Name}", #{Entry.Name}.ToString()); 
				_Output.Write ("	        Output.WriteId (\"{1}\", {2}.ToString());\n{0}", _Indent, Entry.Name, Entry.Name);
				// #casecast String null 
				break; }
				case GoedelType.String: { 
				// 			Output.WriteAttribute ("#{Entry.Name}", #{Entry.Name}); 
				_Output.Write ("			Output.WriteAttribute (\"{1}\", {2});\n{0}", _Indent, Entry.Name, Entry.Name);
				// #casecast Text null 
				break; }
				case GoedelType.Text: { 
				// 			foreach (string _s in #{Entry.Name}) { 
				_Output.Write ("			foreach (string _s in {1}) {{\n{0}", _Indent, Entry.Name);
				// 				Output.WriteAttribute ("#{Entry.Name}",_s); 
				_Output.Write ("				Output.WriteAttribute (\"{1}\",_s);\n{0}", _Indent, Entry.Name);
				// 				} 
				_Output.Write ("				}}\n{0}", _Indent);
				// #casecast Integer null 
				break; }
				case GoedelType.Integer: { 
				// 			Output.WriteAttribute ("#{Entry.Name}", #{Entry.Name}); 
				_Output.Write ("			Output.WriteAttribute (\"{1}\", {2});\n{0}", _Indent, Entry.Name, Entry.Name);
				// #casecast Boolean null 
				break; }
				case GoedelType.Boolean: { 
				// 			Output.WriteAttribute ("#{Entry.Name}", #{Entry.Name}); 
				_Output.Write ("			Output.WriteAttribute (\"{1}\", {2});\n{0}", _Indent, Entry.Name, Entry.Name);
				// #end switchcast 
			break; }
				}
			// #end method 
			}
		//  
		// #end pclass 
		}
	}
