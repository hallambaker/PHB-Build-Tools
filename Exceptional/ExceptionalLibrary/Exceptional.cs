
//  Copyright (c) 2012 by Default Deny Security Inc.
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;


//
// Namespace Exceptional
// Class Exceptions
//


// Types
//   TopTypeType
//       Namespace
//   TypeType
//       Parent
//       Exception
//       Console
//       Description
//   IdType
//       NamespaceT
//       ExceptionT
//   NamespaceType
//       Exceptional
//   ClassType
//       Exceptions
//   NameType
//       Id
//       Options
//       Message
//       Text
//   TokenType

namespace Exceptional {


    public enum ExceptionsType {
        _Top,

        Namespace,
        Parent,
        Exception,
        Console,
        Description,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public ExceptionsType _Tag ();

		public abstract void Serialize (StructureWriter Output, bool tag);
        }



    public partial class Namespace : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Options = new List<_Choice> ();

        public override ExceptionsType _Tag () {
            return ExceptionsType.Namespace;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Namespace");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Options) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Namespace");
				}			
			}
		}

    public partial class Parent : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Exceptions = new List<_Choice> ();

        public override ExceptionsType _Tag () {
            return ExceptionsType.Parent;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Parent");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Exceptions) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Parent");
				}			
			}
		}

    public partial class Exception : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Options = new List<_Choice> ();

        public override ExceptionsType _Tag () {
            return ExceptionsType.Exception;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Exception");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Options) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Exception");
				}			
			}
		}

    public partial class Console : _Choice {
		public string					Message;

        public override ExceptionsType _Tag () {
            return ExceptionsType.Console;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Console");
				}

			Output.WriteAttribute ("Message", Message);
			if (tag) {
				Output.EndElement ("Console");
				}			
			}
		}

    public partial class Description : _Choice {
		public List <System.String>			Text = new List <System.String> (); 

        public override ExceptionsType _Tag () {
            return ExceptionsType.Description;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Description");
				}

			foreach (string _s in Text) {
				Output.WriteAttribute ("Text",_s);
				}
			if (tag) {
				Output.EndElement ("Description");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() {
            Label = null;
            }

        public override ExceptionsType _Tag () {
            return ExceptionsType._Label;
            }

		public override void Serialize (StructureWriter Output, bool tag) {
			Output.WriteId ("ID", Label.ToString());
			}
        }
//	}

//namespace Goedel.Registry {

    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Namespace_Start,
		Namespace__Id,				
		Namespace__Options,				
		Parent_Start,
		Parent__Id,				
		Parent__Exceptions,				
		Exception_Start,
		Exception__Id,				
		Exception__Options,				
		Console_Start,
		Console__Message,				
		Description_Start,
		Description__Text,				
        }


    struct _StackItem {
        public StateCode   State;
        public Exceptional._Choice     Token;
        }

    public partial class Exceptions : Goedel.Registry.Parser{
        public List <Exceptional._Choice>        Top;
        public Registry	<Exceptional._Choice>	Registry;



        bool _StartOfEntry;
        public bool StartOfEntry {
            get {return _StartOfEntry;}
            private set { _StartOfEntry = value; }
            }

        StateCode								State;
        Exceptional._Choice				Current;
        List <_StackItem>						Stack;
        TokenType								CurrentToken;
        Position								CurrentPosition;
        string									CurrentText;


        public static Exceptions Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new Exceptions();
            Result.Options = Options;

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }

            return Result;
            }


        public Exceptions() {
            Top = new List<Exceptional._Choice> () ;
            Registry = new Registry <Exceptional._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            _StartOfEntry = true;

			TYPE__NamespaceT = Registry.TYPE ("NamespaceT"); 
			TYPE__ExceptionT = Registry.TYPE ("ExceptionT"); 



            }



        public TYPE<Exceptional._Choice> TYPE__NamespaceT ;
        public TYPE<Exceptional._Choice> TYPE__ExceptionT ;

        private Exceptional._Choice New_Choice(string Label) {
            switch (Label) {

                case "Namespace": return NewNamespace();
                case "Parent": return NewParent();
                case "Exception": return NewException();
                case "Console": return NewConsole();
                case "Description": return NewDescription();

				}
            throw new System.Exception ("Reserved word not recognized \"" + Label + "\"");
            }



        private Exceptional.Namespace NewNamespace() {
            Exceptional.Namespace result = new Exceptional.Namespace();
            Push (result);
            State = StateCode.Namespace_Start;
            return result;
            }


        private Exceptional.Parent NewParent() {
            Exceptional.Parent result = new Exceptional.Parent();
            Push (result);
            State = StateCode.Parent_Start;
            return result;
            }


        private Exceptional.Exception NewException() {
            Exceptional.Exception result = new Exceptional.Exception();
            Push (result);
            State = StateCode.Exception_Start;
            return result;
            }


        private Exceptional.Console NewConsole() {
            Exceptional.Console result = new Exceptional.Console();
            Push (result);
            State = StateCode.Console_Start;
            return result;
            }


        private Exceptional.Description NewDescription() {
            Exceptional.Description result = new Exceptional.Description();
            Push (result);
            State = StateCode.Description_Start;
            return result;
            }


        static Exceptional.ExceptionsType _Reserved(string Label) {
            switch (Label) {

                case "Namespace": return Exceptional.ExceptionsType.Namespace;
                case "Parent": return Exceptional.ExceptionsType.Parent;
                case "Exception": return Exceptional.ExceptionsType.Exception;
                case "Console": return Exceptional.ExceptionsType.Console;
                case "Description": return Exceptional.ExceptionsType.Description;

                }
            return Exceptional.ExceptionsType._Bottom;
            }


		public void Serialize (TextWriter Output) {
			Serialize (Output, OutputFormat.Goedel);
			}

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Exceptional._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Exceptional._Choice Token) {
            _StackItem Item = new _StackItem ();
            Item.State = State;
            Item.Token = Current;

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
            if (Stack.Count == 0) throw new System.Exception ("Internal Parser Error");

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {
            CurrentToken = Token;
            CurrentPosition = Position;
            CurrentText = Text;

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) return;
            if (Token == TokenType.INVALID)
                throw new System.Exception("Invalid Token");

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected START");

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Exceptional.ExceptionsType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Exceptional.ExceptionsType.Namespace)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new System.Exception("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) {
                            State = StateCode._End;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [Class]");

                    case StateCode._End:                   //      -
                        throw new System.Exception("Too Many Closing Braces");

                    case StateCode.Namespace_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Exceptional.Namespace Current_Cast = (Exceptional.Namespace)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__NamespaceT, Current_Cast);
                            State = StateCode.Namespace__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Namespace__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Namespace__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Exceptional.Namespace Current_Cast = (Exceptional.Namespace)Current;
                            Exceptional.ExceptionsType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Exceptional.ExceptionsType.Parent) ) {
                                Current_Cast.Options.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Parent ]");
								}
							}
                        break;


                    case StateCode.Parent_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Exceptional.Parent Current_Cast = (Exceptional.Parent)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ExceptionT, Current_Cast);
                            State = StateCode.Parent__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Parent__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Parent__Exceptions;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Parent__Exceptions: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Exceptional.Parent Current_Cast = (Exceptional.Parent)Current;
                            Exceptional.ExceptionsType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Exceptional.ExceptionsType.Exception) ) {
                                Current_Cast.Exceptions.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Exception ]");
								}
							}
                        break;


                    case StateCode.Exception_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Exceptional.Exception Current_Cast = (Exceptional.Exception)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ExceptionT, Current_Cast);
                            State = StateCode.Exception__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Exception__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Exception__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Exception__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Exceptional.Exception Current_Cast = (Exceptional.Exception)Current;
                            Exceptional.ExceptionsType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Exceptional.ExceptionsType.Console) |
									(LabelType == Exceptional.ExceptionsType.Description) ) {
                                Current_Cast.Options.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [Console Description ]");
								}
							}
                        break;


                    case StateCode.Console_Start:
                        if (Token == TokenType.STRING) {
                            Exceptional.Console Current_Cast = (Exceptional.Console)Current;
                            Current_Cast.Message = Text;
                            State = StateCode.Console__Message;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.Console__Message:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Description_Start:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Description__Text;
                            break;
                            }
                        else {
                            Pop();
                            Represent = true;
                            break;
                            }
                    case StateCode.Description__Text:
                       if (Token == TokenType.END) {
                            Pop();
                            break;
                            }
                       else if (Token == TokenType.TEXT) {
                            Exceptional.Description Current_Cast = (Exceptional.Description)Current;
                            Current_Cast.Text.Add (Text);
                            break;							
                            }
                       throw new System.Exception("Expected Text");



                    default:
                        throw new System.Exception("Unreachable code reached");
                    }
                }
            }
        }
	}


