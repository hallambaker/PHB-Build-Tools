
//  Copyright (c) 2012-2016 by Default Deny Security Inc.
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;
using Goedel.Utilities;




//
// Namespace Goedel.Tool.Exceptional
// Class Exceptions
//


// Types
//   TopTypeType
//       Namespace
//       Using
//   TypeType
//       Exception
//       Trace
//       Debug
//       Information
//       Warning
//       Error
//       Critical
//       Abstract
//       Console
//       Description
//       Object
//       TypedParameter
//       Parameter
//   IdType
//       NamespaceT
//       ExceptionT
//       EventT
//   NamespaceType
//       Goedel.Tool.Exceptional
//   ClassType
//       Exceptions
//   NameType
//       Id
//       Options
//       Code
//       Text
//       Parameters
//       Name
//       Type
//       Message
//   TokenType
//       TypeType
//       IdType

#pragma warning disable IDE0022, IDE0066, IDE1006, IDE0059, IDE0161, CS1591, CS8618
namespace Goedel.Tool.Exceptional {


    public enum ExceptionsType {
        _Top,

        Namespace,
        Using,
        Exception,
        Trace,
        Debug,
        Information,
        Warning,
        Error,
        Critical,
        TypedParameter,
        Object,
        Parameter,
        Console,
        Description,
        Abstract,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public ExceptionsType _Tag ();

        public _Choice? _Parent;
        public Exceptions? _Base;

		public abstract void Serialize (StructureWriter Output, bool tag);

    	public virtual void Init (_Choice? parent) {
            _Parent = parent;
            _Base ??= parent?._Base;
			}

        

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice? parent) {
			Init (parent);
            _Base = parent?._Base;
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Namespace : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Options = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Namespace;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Options) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Namespace");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Options) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Namespace");
				}			
			}
		}

    public partial class Using : _Choice {
        public ID<_Choice>				Id; 

        public override ExceptionsType _Tag () =>ExceptionsType.Using;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Using");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			if (tag) {
				Output.EndElement ("Using");
				}			
			}
		}

    public partial class Exception : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Options = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Exception;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Options) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Exception");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Options) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Exception");
				}			
			}
		}

    public partial class Trace : _Choice {
		public int						Code;
        public ID<_Choice>				Id; 
		public string					Text;
        public List <TypedParameter>           Parameters = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Trace;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Parameters) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Trace");
				}

			Output.WriteAttribute ("Code", Code);
	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Text", Text);
			Output.StartList ("");
			foreach (TypedParameter _e in Parameters) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Trace");
				}			
			}
		}

    public partial class Debug : _Choice {
		public int						Code;
        public ID<_Choice>				Id; 
		public string					Text;
        public List <TypedParameter>           Parameters = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Debug;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Parameters) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Debug");
				}

			Output.WriteAttribute ("Code", Code);
	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Text", Text);
			Output.StartList ("");
			foreach (TypedParameter _e in Parameters) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Debug");
				}			
			}
		}

    public partial class Information : _Choice {
		public int						Code;
        public ID<_Choice>				Id; 
		public string					Text;
        public List <TypedParameter>           Parameters = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Information;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Parameters) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Information");
				}

			Output.WriteAttribute ("Code", Code);
	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Text", Text);
			Output.StartList ("");
			foreach (TypedParameter _e in Parameters) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Information");
				}			
			}
		}

    public partial class Warning : _Choice {
		public int						Code;
        public ID<_Choice>				Id; 
		public string					Text;
        public List <TypedParameter>           Parameters = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Warning;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Parameters) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Warning");
				}

			Output.WriteAttribute ("Code", Code);
	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Text", Text);
			Output.StartList ("");
			foreach (TypedParameter _e in Parameters) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Warning");
				}			
			}
		}

    public partial class Error : _Choice {
		public int						Code;
        public ID<_Choice>				Id; 
		public string					Text;
        public List <TypedParameter>           Parameters = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Error;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Parameters) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Error");
				}

			Output.WriteAttribute ("Code", Code);
	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Text", Text);
			Output.StartList ("");
			foreach (TypedParameter _e in Parameters) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Error");
				}			
			}
		}

    public partial class Critical : _Choice {
		public int						Code;
        public ID<_Choice>				Id; 
		public string					Text;
        public List <TypedParameter>           Parameters = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Critical;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Parameters) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Critical");
				}

			Output.WriteAttribute ("Code", Code);
	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Text", Text);
			Output.StartList ("");
			foreach (TypedParameter _e in Parameters) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Critical");
				}			
			}
		}

    public partial class TypedParameter : _Choice {
        public TOKEN<_Choice>			Name;
        public TOKEN<_Choice>			Type;
		public string					Text;

        public override ExceptionsType _Tag () =>ExceptionsType.TypedParameter;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("TypedParameter");
				}

	        Output.WriteId ("Name", Name.ToString());
	        Output.WriteId ("Type", Type.ToString());
			Output.WriteAttribute ("Text", Text);
			if (tag) {
				Output.EndElement ("TypedParameter");
				}			
			}
		}

    public partial class Object : _Choice {
        public TOKEN<_Choice>			Type;
		public string					Text;
        public List <Parameter>           Parameters = [];

        public override ExceptionsType _Tag () =>ExceptionsType.Object;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			foreach (var Sub in Parameters) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Object");
				}

	        Output.WriteId ("Type", Type.ToString());
			Output.WriteAttribute ("Text", Text);
			Output.StartList ("");
			foreach (Parameter _e in Parameters) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Object");
				}			
			}
		}

    public partial class Parameter : _Choice {
        public TOKEN<_Choice>			Name;

        public override ExceptionsType _Tag () =>ExceptionsType.Parameter;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Parameter");
				}

	        Output.WriteId ("Name", Name.ToString());
			if (tag) {
				Output.EndElement ("Parameter");
				}			
			}
		}

    public partial class Console : _Choice {
		public string					Message;

        public override ExceptionsType _Tag () =>ExceptionsType.Console;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Console");
				}

			Output.WriteAttribute ("Message", Message);
			if (tag) {
				Output.EndElement ("Console");
				}			
			}
		}

    public partial class Description : _Choice {
		public List <System.String>			Text = []; 

        public override ExceptionsType _Tag () =>ExceptionsType.Description;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Description");
				}

			foreach (string _s in Text) {
				Output.WriteAttribute ("Text",_s);
				}
			if (tag) {
				Output.EndElement ("Description");
				}			
			}
		}

    public partial class Abstract : _Choice {

        public override ExceptionsType _Tag () =>ExceptionsType.Abstract;


		public override void _InitChildren (_Choice? Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Abstract");
				}

			if (tag) {
				Output.EndElement ("Abstract");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>?            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() =>  Label = null;

        public override ExceptionsType _Tag () => ExceptionsType._Label;

		public override void Serialize (StructureWriter Output, bool tag) =>Output.WriteId ("ID", Label?.ToString()??"");
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Namespace_Start,
		Namespace__Id,				
		Namespace__Options,				
		Using_Start,
		Using__Id,				
		Exception_Start,
		Exception__Id,				
		Exception__Options,				
		Trace_Start,
		Trace__Code,				
		Trace__Id,				
		Trace__Text,				
		Trace__Parameters,				
		Debug_Start,
		Debug__Code,				
		Debug__Id,				
		Debug__Text,				
		Debug__Parameters,				
		Information_Start,
		Information__Code,				
		Information__Id,				
		Information__Text,				
		Information__Parameters,				
		Warning_Start,
		Warning__Code,				
		Warning__Id,				
		Warning__Text,				
		Warning__Parameters,				
		Error_Start,
		Error__Code,				
		Error__Id,				
		Error__Text,				
		Error__Parameters,				
		Critical_Start,
		Critical__Code,				
		Critical__Id,				
		Critical__Text,				
		Critical__Parameters,				
		TypedParameter_Start,
		TypedParameter__Name,				
		TypedParameter__Type,				
		TypedParameter__Text,				
		Object_Start,
		Object__Type,				
		Object__Text,				
		Object__Parameters,				
		Parameter_Start,
		Parameter__Name,				
		Console_Start,
		Console__Message,				
		Description_Start,
		Description__Text,				
		Abstract_Start,
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.Tool.Exceptional._Choice     Token;
        }

    public partial class Exceptions : Goedel.Registry.Parser{
        public List <Goedel.Tool.Exceptional._Choice>        Top = [];
        public Registry	<Goedel.Tool.Exceptional._Choice>	Registry;
        public bool StartOfEntry {get;  private set;}
        StateCode								State = StateCode._Start;
        Goedel.Tool.Exceptional._Choice				Current;
        readonly List <_StackItem>						Stack = [];


        public static Exceptions Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new Exceptions() {
				Options = Options
				};

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new (File);
                Schema.Process(infile, Result);
                }
            Result.Init ();
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
                Entry._Base = this;
				Entry._InitChildren (null);
				}
			}

        public Exceptions() {
            Registry = new Registry <Goedel.Tool.Exceptional._Choice> ();
            StartOfEntry = true;

			TYPE__NamespaceT = Registry.TYPE ("NamespaceT"); 
			TYPE__ExceptionT = Registry.TYPE ("ExceptionT"); 
			TYPE__EventT = Registry.TYPE ("EventT"); 
			TYPE__TypeType = Registry.TYPE ("TypeType"); 
			TYPE__IdType = Registry.TYPE ("IdType"); 



            }



        public TYPE<Goedel.Tool.Exceptional._Choice> TYPE__NamespaceT ;
        public TYPE<Goedel.Tool.Exceptional._Choice> TYPE__ExceptionT ;
        public TYPE<Goedel.Tool.Exceptional._Choice> TYPE__EventT ;
        public TYPE<Goedel.Tool.Exceptional._Choice> TYPE__TypeType ;
        public TYPE<Goedel.Tool.Exceptional._Choice> TYPE__IdType ;

        private Goedel.Tool.Exceptional._Choice New_Choice(string Label) {
            switch (Label) {

                case "Namespace": return NewNamespace();
                case "Using": return NewUsing();
                case "Exception": return NewException();
                case "Trace": return NewTrace();
                case "Debug": return NewDebug();
                case "Information": return NewInformation();
                case "Warning": return NewWarning();
                case "Error": return NewError();
                case "Critical": return NewCritical();
                case "TypedParameter": return NewTypedParameter();
                case "Object": return NewObject();
                case "Parameter": return NewParameter();
                case "Console": return NewConsole();
                case "Description": return NewDescription();
                case "Abstract": return NewAbstract();

				}

            throw new NotFoundReserved ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.Tool.Exceptional.Namespace NewNamespace() {
            Goedel.Tool.Exceptional.Namespace result = new ();
            Push (result);
            State = StateCode.Namespace_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Using NewUsing() {
            Goedel.Tool.Exceptional.Using result = new ();
            Push (result);
            State = StateCode.Using_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Exception NewException() {
            Goedel.Tool.Exceptional.Exception result = new ();
            Push (result);
            State = StateCode.Exception_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Trace NewTrace() {
            Goedel.Tool.Exceptional.Trace result = new ();
            Push (result);
            State = StateCode.Trace_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Debug NewDebug() {
            Goedel.Tool.Exceptional.Debug result = new ();
            Push (result);
            State = StateCode.Debug_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Information NewInformation() {
            Goedel.Tool.Exceptional.Information result = new ();
            Push (result);
            State = StateCode.Information_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Warning NewWarning() {
            Goedel.Tool.Exceptional.Warning result = new ();
            Push (result);
            State = StateCode.Warning_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Error NewError() {
            Goedel.Tool.Exceptional.Error result = new ();
            Push (result);
            State = StateCode.Error_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Critical NewCritical() {
            Goedel.Tool.Exceptional.Critical result = new ();
            Push (result);
            State = StateCode.Critical_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.TypedParameter NewTypedParameter() {
            Goedel.Tool.Exceptional.TypedParameter result = new ();
            Push (result);
            State = StateCode.TypedParameter_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Object NewObject() {
            Goedel.Tool.Exceptional.Object result = new ();
            Push (result);
            State = StateCode.Object_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Parameter NewParameter() {
            Goedel.Tool.Exceptional.Parameter result = new ();
            Push (result);
            State = StateCode.Parameter_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Console NewConsole() {
            Goedel.Tool.Exceptional.Console result = new ();
            Push (result);
            State = StateCode.Console_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Description NewDescription() {
            Goedel.Tool.Exceptional.Description result = new ();
            Push (result);
            State = StateCode.Description_Start;
            return result;
            }


        private Goedel.Tool.Exceptional.Abstract NewAbstract() {
            Goedel.Tool.Exceptional.Abstract result = new ();
            Push (result);
            State = StateCode.Abstract_Start;
            return result;
            }


        static Goedel.Tool.Exceptional.ExceptionsType _Reserved(string Label) {
            switch (Label) {

                case "Namespace": return Goedel.Tool.Exceptional.ExceptionsType.Namespace;
                case "Using": return Goedel.Tool.Exceptional.ExceptionsType.Using;
                case "Exception": return Goedel.Tool.Exceptional.ExceptionsType.Exception;
                case "Trace": return Goedel.Tool.Exceptional.ExceptionsType.Trace;
                case "Debug": return Goedel.Tool.Exceptional.ExceptionsType.Debug;
                case "Information": return Goedel.Tool.Exceptional.ExceptionsType.Information;
                case "Warning": return Goedel.Tool.Exceptional.ExceptionsType.Warning;
                case "Error": return Goedel.Tool.Exceptional.ExceptionsType.Error;
                case "Critical": return Goedel.Tool.Exceptional.ExceptionsType.Critical;
                case "TypedParameter": return Goedel.Tool.Exceptional.ExceptionsType.TypedParameter;
                case "Object": return Goedel.Tool.Exceptional.ExceptionsType.Object;
                case "Parameter": return Goedel.Tool.Exceptional.ExceptionsType.Parameter;
                case "Console": return Goedel.Tool.Exceptional.ExceptionsType.Console;
                case "Description": return Goedel.Tool.Exceptional.ExceptionsType.Description;
                case "Abstract": return Goedel.Tool.Exceptional.ExceptionsType.Abstract;

                }
            return Goedel.Tool.Exceptional.ExceptionsType._Bottom;
            }


		public void Serialize (TextWriter Output)=> Serialize (Output, OutputFormat.Goedel);

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.Tool.Exceptional._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.Tool.Exceptional._Choice Token) {
            _StackItem Item = new  () {
					State = State,
					Token = Current
					};

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
			Assert.AssertFalse (Stack.Count == 0, InternalError.Throw);

            _StackItem Item = Stack[^1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) {
				return;
				}
			Assert.AssertFalse (Token == TokenType.INVALID, InvalidToken.Throw);

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else {
							throw new ExpectedStart ();
							}

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.Tool.Exceptional.ExceptionsType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Namespace) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Using)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new Expected("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) { 
                            State = StateCode._End;
                            break;
                            }
                        else {
							throw new ExpectedClass();
							}

                    case StateCode._End: {                  //      -
                        throw new TooManyClose();
						}

                    case StateCode.Namespace_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Namespace Current_Cast = (Goedel.Tool.Exceptional.Namespace)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__NamespaceT, Current_Cast);
                            State = StateCode.Namespace__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Namespace__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Namespace__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.Exceptional.Namespace Current_Cast = (Goedel.Tool.Exceptional.Namespace)Current;
                            Goedel.Tool.Exceptional.ExceptionsType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Exception) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Trace) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Debug) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Information) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Warning) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Error) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Critical) ) {
                                Current_Cast.Options.Add (New_Choice(Text));
                                }
                            else {
								throw new Expected ("Parser Error Expected [Exception Trace Debug Information Warning Error Critical ]");
								}
							}
                        break;


                    case StateCode.Using_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Using Current_Cast = (Goedel.Tool.Exceptional.Using)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__NamespaceT, Current_Cast);
                            State = StateCode.Using__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Using__Id:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Exception_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Exception Current_Cast = (Goedel.Tool.Exceptional.Exception)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ExceptionT, Current_Cast);
                            State = StateCode.Exception__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Exception__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Exception__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Exception__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.Exceptional.Exception Current_Cast = (Goedel.Tool.Exceptional.Exception)Current;
                            Goedel.Tool.Exceptional.ExceptionsType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Abstract) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Console) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Description) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Object) |
									(LabelType == Goedel.Tool.Exceptional.ExceptionsType.Exception) ) {
                                Current_Cast.Options.Add (New_Choice(Text));
                                }
                            else {
								throw new Expected ("Parser Error Expected [Abstract Console Description Object Exception ]");
								}
							}
                        break;


                    case StateCode.Trace_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.Exceptional.Trace Current_Cast = (Goedel.Tool.Exceptional.Trace)Current;
                            Current_Cast.Code = Convert.ToInt32(Text);
                            State = StateCode.Trace__Code;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Trace__Code:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Trace Current_Cast = (Goedel.Tool.Exceptional.Trace)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EventT, Current_Cast);
                            State = StateCode.Trace__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Trace__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Trace Current_Cast = (Goedel.Tool.Exceptional.Trace)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Trace__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Trace__Text:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Trace__Parameters;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Trace__Parameters: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Exceptional.Trace Current_Cast = (Goedel.Tool.Exceptional.Trace)Current;
                            Current_Cast.Parameters.Add (NewTypedParameter ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Debug_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.Exceptional.Debug Current_Cast = (Goedel.Tool.Exceptional.Debug)Current;
                            Current_Cast.Code = Convert.ToInt32(Text);
                            State = StateCode.Debug__Code;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Debug__Code:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Debug Current_Cast = (Goedel.Tool.Exceptional.Debug)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EventT, Current_Cast);
                            State = StateCode.Debug__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Debug__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Debug Current_Cast = (Goedel.Tool.Exceptional.Debug)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Debug__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Debug__Text:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Debug__Parameters;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Debug__Parameters: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Exceptional.Debug Current_Cast = (Goedel.Tool.Exceptional.Debug)Current;
                            Current_Cast.Parameters.Add (NewTypedParameter ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Information_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.Exceptional.Information Current_Cast = (Goedel.Tool.Exceptional.Information)Current;
                            Current_Cast.Code = Convert.ToInt32(Text);
                            State = StateCode.Information__Code;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Information__Code:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Information Current_Cast = (Goedel.Tool.Exceptional.Information)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EventT, Current_Cast);
                            State = StateCode.Information__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Information__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Information Current_Cast = (Goedel.Tool.Exceptional.Information)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Information__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Information__Text:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Information__Parameters;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Information__Parameters: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Exceptional.Information Current_Cast = (Goedel.Tool.Exceptional.Information)Current;
                            Current_Cast.Parameters.Add (NewTypedParameter ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Warning_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.Exceptional.Warning Current_Cast = (Goedel.Tool.Exceptional.Warning)Current;
                            Current_Cast.Code = Convert.ToInt32(Text);
                            State = StateCode.Warning__Code;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Warning__Code:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Warning Current_Cast = (Goedel.Tool.Exceptional.Warning)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EventT, Current_Cast);
                            State = StateCode.Warning__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Warning__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Warning Current_Cast = (Goedel.Tool.Exceptional.Warning)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Warning__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Warning__Text:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Warning__Parameters;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Warning__Parameters: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Exceptional.Warning Current_Cast = (Goedel.Tool.Exceptional.Warning)Current;
                            Current_Cast.Parameters.Add (NewTypedParameter ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Error_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.Exceptional.Error Current_Cast = (Goedel.Tool.Exceptional.Error)Current;
                            Current_Cast.Code = Convert.ToInt32(Text);
                            State = StateCode.Error__Code;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Error__Code:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Error Current_Cast = (Goedel.Tool.Exceptional.Error)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EventT, Current_Cast);
                            State = StateCode.Error__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Error__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Error Current_Cast = (Goedel.Tool.Exceptional.Error)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Error__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Error__Text:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Error__Parameters;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Error__Parameters: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Exceptional.Error Current_Cast = (Goedel.Tool.Exceptional.Error)Current;
                            Current_Cast.Parameters.Add (NewTypedParameter ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Critical_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.Exceptional.Critical Current_Cast = (Goedel.Tool.Exceptional.Critical)Current;
                            Current_Cast.Code = Convert.ToInt32(Text);
                            State = StateCode.Critical__Code;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Critical__Code:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Critical Current_Cast = (Goedel.Tool.Exceptional.Critical)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__EventT, Current_Cast);
                            State = StateCode.Critical__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Critical__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Critical Current_Cast = (Goedel.Tool.Exceptional.Critical)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Critical__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Critical__Text:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Critical__Parameters;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Critical__Parameters: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Exceptional.Critical Current_Cast = (Goedel.Tool.Exceptional.Critical)Current;
                            Current_Cast.Parameters.Add (NewTypedParameter ());
                            Represent = true;
                            }

                        break;


                    case StateCode.TypedParameter_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.TypedParameter Current_Cast = (Goedel.Tool.Exceptional.TypedParameter)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__TypeType, Current_Cast);
                            State = StateCode.TypedParameter__Name;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.TypedParameter__Name:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.TypedParameter Current_Cast = (Goedel.Tool.Exceptional.TypedParameter)Current;
                            Current_Cast.Type = Registry.TOKEN(Position, Text, TYPE__IdType, Current_Cast);
                            State = StateCode.TypedParameter__Type;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.TypedParameter__Type:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.TypedParameter Current_Cast = (Goedel.Tool.Exceptional.TypedParameter)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.TypedParameter__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.TypedParameter__Text:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Object_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Object Current_Cast = (Goedel.Tool.Exceptional.Object)Current;
                            Current_Cast.Type = Registry.TOKEN(Position, Text, TYPE__TypeType, Current_Cast);
                            State = StateCode.Object__Type;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Object__Type:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Object Current_Cast = (Goedel.Tool.Exceptional.Object)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.Object__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Object__Text:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Object__Parameters;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Object__Parameters: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else {
                            Goedel.Tool.Exceptional.Object Current_Cast = (Goedel.Tool.Exceptional.Object)Current;
                            Current_Cast.Parameters.Add (NewParameter ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Parameter_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Exceptional.Parameter Current_Cast = (Goedel.Tool.Exceptional.Parameter)Current;
                            Current_Cast.Name = Registry.TOKEN(Position, Text, TYPE__TypeType, Current_Cast);
                            State = StateCode.Parameter__Name;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Parameter__Name:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Console_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.Exceptional.Console Current_Cast = (Goedel.Tool.Exceptional.Console)Current;
                            Current_Cast.Message = Text;
                            State = StateCode.Console__Message;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Console__Message:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Description_Start:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Description__Text;
                            break;
                            }
                        else {
                            Pop();
                            Represent = true;
                            break;
                            }
                    case StateCode.Description__Text:
                       if (Token == TokenType.END) {
                            Pop();
                            break;
                            }
                       else if (Token == TokenType.TEXT) {
                            Goedel.Tool.Exceptional.Description Current_Cast = (Goedel.Tool.Exceptional.Description)Current;
                            Current_Cast.Text.Add (Text);
                            break;							
                            }
                       throw new Expected("Expected Text");


                    case StateCode.Abstract_Start:
                        Pop ();
                        Represent = true; 
                        break;

                    default: {
                        throw new UnreachableCode();
						}
                    }
                }
            }
        }
	}
#pragma warning restore IDE0022	

