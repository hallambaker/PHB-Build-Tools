#script 1.0
#license MITLicense
#using Goedel.Utilities
#pclass Goedel.Tool.Exceptional Generate


#method GenerateCS Exceptions Exceptions
#! Goedel.Registry.Script.Header (_Output, "//", GenerateTime);
#! Goedel.Registry.Script.MITLicense (_Output, "//", 
#!     Goedel.Registry.Script.AssemblyCopyright,
#!     Goedel.Registry.Script.AssemblyCompany);
#% Registry.Boilerplate.Header(_Output, "//  ", DateTime.Now);

#% GenerateCSX (Exceptions);
#end method

#method GenerateCSX Exceptions Exceptions
#% Exceptions._InitChildren ();

#pragma warning disable IDE1006 // Naming Styles
//using System;
//using Goedel.Utilities;

#foreach (_Choice Toplevel in Exceptions.Top)
#switchcast ExceptionsType Toplevel
#casecast Using Using
using #{Using.Id};
#end switchcast
#end foreach


#foreach (_Choice Toplevel in Exceptions.Top)
#switchcast ExceptionsType Toplevel
#casecast Namespace Namespace
##pragma warning disable IDE1006 // Naming Styles
namespace #{Namespace.Id} {



#% WriteListExceptions (Namespace.Options);

	}
#end switchcast
#end foreach
#end method




#method WriteException Exception Exception

    /// <summary>
#foreach (_Choice Optionlevel in Exception.Options)
#switchcast ExceptionsType Optionlevel
#casecast Description Description
#foreach (String Text in Description.Text)
    /// #{Text}
#end foreach
#end switchcast
#end foreach
    /// </summary>
    [global::System.Serializable]
	public partial class #{Exception.Id} : #{Exception.BaseClass} {

        ///<summary>The exception formatting delegate. May be overriden 
		///locally or globally to implement different exception formatting.</summary>
		public static new global::Goedel.Utilities.ExceptionFormatDelegate ExceptionFormatDelegate { get; set; } =
				global::Goedel.Utilities.GoedelException.ExceptionFormatDelegate;


		///<summary>Templates for formatting response messages.</summary>
		public static new System.Collections.Generic.List<string> Templates = 
				new System.Collections.Generic.List<string> {
#% var ConsoleSep = new Separator ("", ",");
#foreach (var console in Exception.Consoles)
#{ConsoleSep}
				"#{console.Message.CEscape()}"
#end foreach
				};

		/// <summary>
		/// Construct instance for exception
		/// </summary>		
		/// <param name="description">Description of the error, may be used to override the 
		/// generated message.</param>	
		/// <param name="inner">Inner Exception</param>	
		/// <param name="args">Optional list of parameterized arguments.</param>
		public #{Exception.Id}  (string description=null, System.Exception inner=null,
			params object[] args) : 
				base (ExceptionFormatDelegate(description, Templates,
					null, args), inner) {
			}





		/// <summary>
        /// The public fatory delegate
        /// </summary>
        /// public static #{Exception.Base.If("", "new ")}global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;

        static System.Exception _Throw(object reasons) => new #{Exception.Id}(args:reasons) ;
		
		/// <summary>
        /// The public fatory delegate
        /// </summary>
        public static #{Exception.Base.If("", "new ")}global::Goedel.Utilities.ThrowDelegate Throw = _Throw;


        }

#% WriteListExceptions (Exception.Options);
#end method

#method WriteListExceptions List<_Choice> Exceptions
#foreach (_Choice Exception in Exceptions)
#if (Exception as Exception != null)
#% WriteException (Exception as Exception );
#end if
#end foreach
#end method

#method SummarizeException Exception Exception
,
				#{Exception.Id}.ThrowNew#!
#% SummarizeListExceptions (Exception.Options);
#end method

#method SummarizeListExceptions List<_Choice> Exceptions
#foreach (_Choice Exception in Exceptions)
#if (Exception as Exception != null)
#% SummarizeException (Exception as Exception );
#end if
#end foreach
#end method


#end pclass
