#script 1.0
#license MITLicense
#pclass Goedel.Tool.Exceptional Generate
#% DateTime GenerateTime = DateTime.UtcNow;

#method GenerateCS Exceptions Exceptions
#! Goedel.Registry.Script.Header (_Output, "//", GenerateTime);
#! Goedel.Registry.Script.MITLicense (_Output, "//", 
#!     Goedel.Registry.Script.AssemblyCopyright,
#!     Goedel.Registry.Script.AssemblyCompany);
#% GenerateCSX (Exceptions);
#end method

#method GenerateCSX Exceptions Exceptions
using System;

#foreach (_Choice Toplevel in Exceptions.Top)
#switchcast ExceptionsType Toplevel
#casecast Namespace Namespace
namespace #{Namespace.Id} {
#foreach (_Choice Nextlevel in Namespace.Options)
#switchcast ExceptionsType Nextlevel
#casecast Parent Parent
    // #{Parent.Id}
	public class #{Parent.Id} : System.Exception {
		public #{Parent.Id} (String TagIn) {
			}
		public #{Parent.Id} () {
			}
		}

#foreach (_Choice Entrylevel in Parent.Exceptions)
#switchcast ExceptionsType Entrylevel
#casecast Exception Exception

#foreach (_Choice Optionlevel in Exception.Options)
#switchcast ExceptionsType Optionlevel
#casecast Description Description
#foreach (String Text in Description.Text)
    // #{Text}
#end foreach
#end switchcast
#end foreach

#foreach (_Choice Optionlevel in Exception.Options)
#switchcast ExceptionsType Optionlevel
#casecast Console Console
    // Console:"#{Console.Message}"
#end switchcast
#end foreach

	public class #{Exception.Id} : #{Parent.Id}  {

		public #{Exception.Id} (String TagIn) {
			}
		public #{Exception.Id} () {
			}
		}

#end switchcast
#end foreach
#end switchcast
#end foreach
    }
#end switchcast
#end foreach
#end method
#end pclass
