#script 1.0
#license MITLicense
#pclass Goedel.Tool.Exceptional Generate
#% DateTime GenerateTime = DateTime.UtcNow;

#method GenerateCS Exceptions Exceptions
#! Goedel.Registry.Script.Header (_Output, "//", GenerateTime);
#! Goedel.Registry.Script.MITLicense (_Output, "//", 
#!     Goedel.Registry.Script.AssemblyCopyright,
#!     Goedel.Registry.Script.AssemblyCompany);
#% GenerateCSX (Exceptions);
#end method

#method GenerateCSX Exceptions Exceptions
using System;

#foreach (_Choice Toplevel in Exceptions.Top)
#switchcast ExceptionsType Toplevel
#casecast Namespace Namespace
namespace #{Namespace.Id} {

#foreach (_Choice NamespaceOption in Namespace.Options)
#switchcast ExceptionsType NamespaceOption
#casecast Exception Exception
#% Exception.Complete();

    /// <summary>
#foreach (_Choice Optionlevel in Exception.Options)
#switchcast ExceptionsType Optionlevel
#casecast Description Description
#foreach (String Text in Description.Text)
    /// #{Text}
#end foreach
#end switchcast
#end foreach
    /// </summary>
    public class #{Exception.Id} : global::System.Exception {
        
		/// <summary>
        /// Create an instance of the exception.
        /// </summary>		
        /// <param name="Description">Description of the error</param>	
		public #{Exception.Id} (string Description) : base (Description) {
			}
		
		/// <summary>
        /// The public fatory delegate
        /// </summary>
        public static global::Goedel.Utilities.ThrowDelegate Throw;

        static System.Exception _Throw(string Reason) {
			if (Reason == null) {
				return new #{Exception.Id}(Reason);
				}
			else {
				return new #{Exception.Id}(#{Exception.Console.Quoted()});
				}
            }
        }

#end switchcast
#end foreach
	}
#end switchcast
#end foreach
#end method
#end pclass
