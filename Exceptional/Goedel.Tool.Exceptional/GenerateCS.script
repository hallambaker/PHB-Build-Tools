#script 1.0
#license MITLicense
#using Goedel.Utilities
#pclass Goedel.Tool.Exceptional Generate


#method GenerateCS Exceptions Exceptions
#! Goedel.Registry.Script.Header (_Output, "//", GenerateTime);
#! Goedel.Registry.Script.MITLicense (_Output, "//", 
#!     Goedel.Registry.Script.AssemblyCopyright,
#!     Goedel.Registry.Script.AssemblyCompany);
#% Registry.Boilerplate.Header(_Output, "//  ", DateTime.Now);

#% GenerateCSX (Exceptions);
#end method

#method GenerateCSX Exceptions Exceptions
#% Exceptions._InitChildren ();

#pragma warning disable IDE1006 // Naming Styles
//using System;
//using Goedel.Utilities;

#foreach (_Choice Toplevel in Exceptions.Top)
#switchcast ExceptionsType Toplevel
#casecast Using Using
using #{Using.Id};
#end switchcast
#end foreach


#foreach (_Choice Toplevel in Exceptions.Top)
#switchcast ExceptionsType Toplevel
#casecast Namespace Namespace
##pragma warning disable IDE0079
##pragma warning disable IDE1006 // Naming Styles
namespace #{Namespace.Id} ;

#% WriteListExceptions (Namespace.Options);

/// <summary>
/// Extensions class defining logging events and convenience methods.
/// </summary>
public  static partial class EventExtensions {

    /// <summary>
    /// Static initializer, is called once when the module loads.
    /// </summary>
    static EventExtensions() {
#foreach (_Choice Entry in Namespace.Options)
#if (Entry is IEvent logEvent)
#% WriteEventInit (logEvent);
#end if
#end foreach
        }

#foreach (_Choice Entry in Namespace.Options)
#if (Entry is IEvent logEvent)
#% WriteEvent (logEvent);
#end if
#end foreach
	}


#end switchcast
#end foreach

#end method

#method WriteEventInit IEvent logEvent
        _#{logEvent.Name} = LoggerMessage.Define#!
#if (!logEvent.IsEmpty)
#% var separator = new Separator (",");
<#!
#foreach (var param in logEvent.TypedParameters)
#{separator.ToString()}#{param.Type}#!
#end foreach
>#!
#end if
(
            LogLevel.#{logEvent.LogLevel}, new EventId(#{logEvent.EventId}, nameof(_#{logEvent.Name})),
            "#{logEvent.Pattern}");
#end method

#method WriteEvent IEvent logEvent

    private static readonly Action<ILogger#!
#foreach (var param in logEvent.TypedParameters)
, #{param.Type}#!
#end foreach
, Exception> _#{logEvent.Name};

	/// <summary>
    /// Write an event of type #{logEvent.Name} to <paramref name="logger"/> 
    /// </summary>
    /// <param name="logger">The logger to write the output to.</param>
#foreach (var param in logEvent.TypedParameters)
	/// <param name="#{param.Name}">#{param.Text}</param>
#end foreach
    public static void #{logEvent.Name}(
			this ILogger logger#!
#foreach (var param in logEvent.TypedParameters)
,
			#{param.Type} #{param.Name}#!
#end foreach
) {
        _#{logEvent.Name}(logger#!
#foreach (var param in logEvent.TypedParameters)
, #{param.Name}#!
#end foreach
, null);
        }

#end method

#method WriteException Exception Exception

/// <summary>
#foreach (_Choice Optionlevel in Exception.Options)
#switchcast ExceptionsType Optionlevel
#casecast Description Description
#foreach (String Text in Description.Text)
/// #{Text}
#end foreach
#end switchcast
#end foreach
/// </summary>
[global::System.Serializable]
public partial class #{Exception.Id} : #{Exception.BaseClass} {

    ///<summary>The exception formatting delegate. May be overriden 
	///locally or globally to implement different exception formatting.</summary>
	public static new global::Goedel.Utilities.ExceptionFormatDelegate ExceptionFormatDelegate { get; set; } =
			global::Goedel.Utilities.GoedelException.ExceptionFormatDelegate;


	///<summary>Templates for formatting response messages.</summary>
	public static new System.Collections.Generic.List<string> Templates {get; set;} = 
			new () {
#% var ConsoleSep = new Separator ("", ",");
#foreach (var console in Exception.Consoles)
#{ConsoleSep}
			"#{console.Message.CEscape()}"
#end foreach
			};

	/// <summary>
	/// Construct instance for exception
	/// </summary>		
	/// <param name="description">Description of the error, may be used to override the 
	/// generated message.</param>	
	/// <param name="inner">Inner Exception</param>	
	/// <param name="args">Optional list of parameterized arguments.</param>
	public #{Exception.Id}  (string description=null, System.Exception inner=null,
		params object[] args) : 
			base (ExceptionFormatDelegate(description, Templates,
				null, args), inner) {
		}





	/// <summary>
    /// The public fatory delegate
    /// </summary>
    /// public static #{Exception.Base.If("", "new ")}global::Goedel.Utilities.ThrowNewDelegate ThrowNew = _Throw;

    static System.Exception _Throw(object reasons) => new #{Exception.Id}(args:reasons) ;
		
	/// <summary>
    /// The public fatory delegate
    /// </summary>
    public static #{Exception.Base.If("", "new ")}global::Goedel.Utilities.ThrowDelegate Throw {get;} = _Throw;


    }

#% WriteListExceptions (Exception.Options);
#end method

#method WriteListExceptions List<_Choice> Exceptions
#foreach (_Choice Exception in Exceptions)
#if (Exception as Exception != null)
#% WriteException (Exception as Exception );
#end if
#end foreach
#end method

#method SummarizeException Exception Exception
,
			#{Exception.Id}.ThrowNew#!
#% SummarizeListExceptions (Exception.Options);
#end method

#method SummarizeListExceptions List<_Choice> Exceptions
#foreach (_Choice Exception in Exceptions)
#if (Exception as Exception != null)
#% SummarizeException (Exception as Exception );
#end if
#end foreach
#end method


#end pclass
