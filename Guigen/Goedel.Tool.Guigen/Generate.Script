#script 1.0
#license MITLicense
#pclass Goedel.Tool.Guigen Generate

#method GeneratePs1 Guigen Guigen
#% Guigen._InitChildren();
#foreach (_Choice Item in Guigen.Top)
#switchcast GuigenType Item
#casecast Application application

#foreach (var tagValue in application.DictionaryIconsByFile)
#% var tag = tagValue.Key;
$source = $args[0]
$target = $args[1]

copy $source\#{tag}  $target\#{tag}
#end foreach
#end switchcast
#end foreach

#end method

#method GenerateCS Guigen Guigen
#% Guigen._InitChildren();
##region // Copyright 
#% // Boilerplate.Header (_Output, "//  ", GenerateTime);
#foreach (var Item in Guigen.Top)
#switchcast GuigenType Item
#casecast Copyright Copyright
#switchcast GuigenType Copyright.License
#casecast MITLicense null
#% Boilerplate.MITLicense (_Output, "//  ", "Copyright (c) " + Copyright.Date, Copyright.Holder);
#casecast BSD2License null
#% Boilerplate.BSD2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast BSD3License null
#% Boilerplate.BSD3License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast ISCLicense null
#% Boilerplate.ISCLicense (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast Apache2License null
#% Boilerplate.Apache2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast OtherLicense License
// Copyright (1) #{Copyright.Date} by #{Copyright.Holder}
// #{License.Text}
#end switchcast
#end switchcast
#end foreach

##endregion

##pragma warning disable IDE0161 // Convert to file-scoped namespace

#foreach (_Choice Item in Guigen.Top)
#switchcast GuigenType Item
#casecast Application application

namespace #{application.Namespace} {

	///<summary></summary> 
	public partial class #{application.Id} : GuiApplication {


#foreach (var tagValue in application.DictionaryMenuEntries)
#% var tag = tagValue.Key;
#% var menuEntry = tagValue.Value;
		// Menu Item #{tag}
	public GuiMenuEntry Action_#{tag} = new ("#{menuEntry.Id}", "#{menuEntry.Prompt}", "#{menuEntry.Icon?.File}", "#{menuEntry.Text?.Prompt}" );
#end foreach

#foreach (var tagValue in application.DictionaryIcons)
#% var tag = tagValue.Key;
#% var icon = tagValue.Value;
	public GuiIcon Icon_#{tag} = new ("#{icon.Id}", "#{icon.File}");
		// Icon Entry #{tag}
#end foreach



		///<summary>Environment declarations</summary> 
		public static List <GuiEnvironment> Environments = new () {#!
#% var separator = new Separator (",");
#foreach (var environment in application.Environments)
#{separator}
			new ("#{environment.Id}", "#{environment.Icon?.File}") {
				Menus = new () {#!
#% var separator2 = new Separator (",");
#foreach (var menu in environment.Menus)
#{separator2}
					new () {
						Entries = new () {#!
#% MakeMenuEntries(menu.Entries);
							}
						}#!
#end foreach

					},
				Stores = new () {#!
#% separator2.Reset();
#foreach (var store in environment.Stores)
#{separator2}
#switchcast GuigenType store
#casecast Catalog catalog
					new () {
						Mode = GuiTableMode.Catalog,#!
#% MakeStoreEntries(catalog);
						}#!
#casecast Spool spool
					new () {
						Mode = GuiTableMode.Spool,#!
#% MakeStoreEntries(spool);
						}#!
#end switchcast
#end foreach

					}
				}#!
#end foreach

			};

		///<summary>Structure declarations</summary> 
		public static List <GuiStructure> Structures = new () {#!
#% separator.Reset();
#foreach (var structure in application.Structures)
#{separator}
			new (typeof(#{structure.Id}), "#{structure.Icon?.File}")#!
#end foreach

			};

		///<summary>Icon declarations</summary> 
		public static List <GuiIcon> Icons = new () {#!
#% separator.Reset();
#foreach (var icon in application.Icons)
#{separator}
			new ("#{icon.Id}", "#{icon.File}")#!
#end foreach

			};
		}
	}

#end switchcast
#end foreach

#end method

#method MakeMenuEntries List<MenuEntry> menuEntries
#% var separator = new Separator (",");
#foreach (var menuEntry in menuEntries)
#{separator}
							new ("#{menuEntry.Id}", "#{menuEntry.Prompt}", "#{menuEntry.Icon?.File}", "#{menuEntry.Text?.Prompt}" )#!
#end foreach
#end method

#method MakeMenuEntries2 List<MenuEntry> menuEntries
#% var separator = new Separator (",");
#foreach (var menuEntry in menuEntries)
#{separator}
									new ("#{menuEntry.Id}", "#{menuEntry.Prompt}", "#{menuEntry.Icon?.File}", "#{menuEntry.Text?.Prompt}" )#!
#end foreach
#end method

#method MakeStoreEntries IHaveActions store

						Defaults = new () {#!
#% var separator = new Separator (",");
#foreach (var defaultEntry in store.Defaults)
#{separator}
							new () {
								Entries = new () {#!
#% MakeMenuEntries2(defaultEntry.Entries);

									}
								}#!
#end foreach

							},
						Selectors = new () {#!
#% separator.Reset();
#foreach (var selector in store.Selectors)
#{separator}
							new () {
								Entries = new () {#!
#% MakeMenuEntries2(selector.Entries);

									}
								}#!
#end foreach

							},
						Actions = new () {#!
#% separator.Reset();
#foreach (var action in store.Actions)
#{separator}
							new () {
								Entries = new () {#!
#% MakeMenuEntries2(action.Entries);

									}
								}#!
#end foreach

							}
#end method




#end pclass
