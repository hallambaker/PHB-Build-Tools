#script 1.0
#license MITLicense
#using Goedel.Utilities
#pclass Goedel.Tool.Guigen Generate

#method GenerateCS Guigen Guigen
#% Guigen._InitChildren();
##region // Copyright 
#% // Boilerplate.Header (_Output, "//  ", GenerateTime);
#foreach (var Item in Guigen.Top)
#switchcast GuigenType Item
#casecast Copyright Copyright
#switchcast GuigenType Copyright.License
#casecast MITLicense null
#% Boilerplate.MITLicense (_Output, "//  ", "Copyright (c) " + Copyright.Date, Copyright.Holder);
#casecast BSD2License null
#% Boilerplate.BSD2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast BSD3License null
#% Boilerplate.BSD3License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast ISCLicense null
#% Boilerplate.ISCLicense (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast Apache2License null
#% Boilerplate.Apache2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast OtherLicense License
// Copyright (1) #{Copyright.Date} by #{Copyright.Holder}
// #{License.Text}
#end switchcast
#end switchcast
#end foreach

##endregion

using Goedel.Guigen;
using Goedel.Utilities;
##pragma warning disable IDE1006 // Naming Styles

namespace #{Guigen.Class.Namespace};

##region // Sections
#foreach (var section in Guigen.Sections) 
/// <summary>
/// Callback parameters for section #{section.Id.Label} 
/// </summary>
public partial class #{section.Id.Label} : _#{section.Id.Label} {
    }

/// <summary>
/// Callback parameters for section #{section.Id.Label} 
/// </summary>
public partial class _#{section.Id.Label} : IBindable {

#call DeclareFields section
#call CreateBindings section

    }

#end foreach
##endregion
##region // Dialogs
#foreach (var dialog in Guigen.Dialogs) 
/// <summary>
/// Callback parameters for dialog #{dialog.Id.Label} 
/// </summary>
public partial class #{dialog.Id.Label} : _#{dialog.Id.Label} {
    // <summary>Type check verification.</summary>
    // public static #{dialog.IfSubclassNew} Func<object, bool> IsBacker { get; set; } = (object _) => false; 
    }

/// <summary>
/// Callback parameters for section #{dialog.Id.Label} 
/// </summary>
public partial class _#{dialog.Id.Label} : #{dialog.Inherit?.Label ?? "IParameter"} {

#if (!dialog.IsSubclass)
    public object Bound { get; set; }

#end if

#call DeclareFields dialog
#call CreateBindings dialog
#call MakeIParameterMethods dialog

    }

#end foreach
##endregion
##region // Actions

#foreach (var action in Guigen.Actions) 

/// <summary>
/// Callback parameters for action #{action.Id.Label} 
/// </summary>
public partial class #{action.Id.Label} : _#{action.Id.Label} {
    }


/// <summary>
/// Callback parameters for action #{action.Id.Label} 
/// </summary>
public partial class _#{action.Id.Label} : IParameter {

#call DeclareFields action
#call CreateBindings action
#call MakeIParameterMethods action

    }

#end foreach
##endregion
##region // Selections

#foreach (var action in Guigen.Selections) 

/// <summary>
/// Callback parameters for action #{action.Id.Label} 
/// </summary>
public partial class #{action.Id.Label} : _#{action.Id.Label} {
    }


/// <summary>
/// Callback parameters for action #{action.Id.Label} 
/// </summary>
public partial class _#{action.Id.Label} : IParameter {

#call DeclareFields action
#call CreateBindings action
#call MakeIParameterMethods action

    }

#end foreach
##endregion
##region // Results

#foreach (var result in Guigen.Results) 

/// <summary>
/// Return parameters for result #{result.Id.Label} 
/// </summary>
public partial record #{result.Id.Label} : _#{result.Id.Label} {
    }


/// <summary>
/// Callback parameters for result #{result.Id.Label} 
/// </summary>
public partial record _#{result.Id.Label} : IResult {

    ///<inheritdoc/>
    public string Message => "#{result.Message}";

    ///<inheritdoc/>
    public ResourceId ResourceId => resourceId;
    static readonly ResourceId resourceId = new ("#{result.Id.Label}");

    ///<summary>The return result.</summary> 
    public virtual ReturnResult ReturnResult { get; init; } = ReturnResult.Completed;

#call DeclareFields result
#call CreateBindings result
#call DeclareResultGetValues result
#!call DeclareResultSlots result
#!call DeclareResultBinding result
    }

#end foreach


##endregion
##region // Failure Results

#foreach (var result in Guigen.Fails) 

/// <summary>
/// Return parameters for failure result #{result.Id.Label} 
/// </summary>
public partial record #{result.Id.Label} : _#{result.Id.Label} {
    }


/// <summary>
/// Callback parameters for failure result #{result.Id.Label} 
/// </summary>
public partial record _#{result.Id.Label} : IFail {

    ///<inheritdoc/>
    public string Message => "#{result.Message}";

    ///<inheritdoc/>
    public ResourceId ResourceId => resourceId;
    static readonly ResourceId resourceId = new ("#{result.Id.Label}");

    ///<summary>The return result.</summary> 
    public virtual ReturnResult ReturnResult { get; init; } = ReturnResult.Error;

#call DeclareFields result
#call CreateBindings result
#call DeclareResultGetValues result
#!call DeclareResultSlots result
#!call DeclareResultBinding result

    }



#end foreach


##endregion
##region // Gui classes

/// <summary>
#foreach (var text in Guigen.Class.Description)
/// #{text}
#end foreach
/// </summary>
public partial class #{Guigen.Class.Name} :  _#{Guigen.Class.Name} {



    
    }


/// <summary>
#foreach (var text in Guigen.Class.Description)
/// #{text}
#end foreach
/// </summary>
public class _#{Guigen.Class.Name} : Gui {
#foreach (var entry in Guigen.States)

    ///<summary></summary> 
    public virtual bool State#{entry.Value} => true;
#end foreach

    ///<inheritdoc/> 
    public override List<GuiDialog> Dialogs { get; }

    ///<inheritdoc/> 
    public override List<GuiSection> Sections { get; }

    ///<inheritdoc/> 
    public override List<GuiAction> Actions { get; }

    ///<inheritdoc/> 
    public override List<GuiAction> Selections { get; }

    ///<inheritdoc/> 
    public override List<GuiResult> Results { get; }


	///<inheritdoc/>

	public override List<GuiImage> Icons => icons;
	readonly List<GuiImage> icons = new () { #!
#% var separator = new Separator (",");
#foreach (var icon in Guigen.Icons) 
#{separator} 
		new GuiImage (#{icon.Key.Quoted()}) #!
#end foreach

		};


##region // Sections
#foreach (var section in Guigen.Sections) 

    ///<summary>Section #{section.RecordId}.</summary> 
	public GuiSection #{section.RecordId} { get; } = new (
        #{section.QuotedId}, #{section.Prompt.Quoted()}, #{section.Icon.Quoted()}, _#{section.IdLabel}.BaseBinding, #{section.Primary.If("true","false")});
#end foreach
##endregion
##region // Actions
#foreach (var action in Guigen.Actions) 

    ///<summary>Action #{action.RecordId}.</summary> 
	public GuiAction #{action.RecordId} { get; } = new (
        #{action.QuotedId}, #{action.Prompt.Quoted()}, #{action.Icon.Quoted()}, _#{action.IdLabel}.BaseBinding, () => new #{action.Id.Label}());
#end foreach	

##endregion
##region // Actions
#foreach (var action in Guigen.Selections) 

    ///<summary>Selection #{action.RecordId}.</summary> 
	public GuiAction #{action.RecordId} { get; } = new (
        #{action.QuotedId}, #{action.Prompt.Quoted()}, #{action.Icon.Quoted()}, _#{action.IdLabel}.BaseBinding, () => new #{action.Id.Label}(), IsSelect:true);
#end foreach	

##endregion
##region // Dialogs
#foreach (var dialog in Guigen.Dialogs) 

    ///<summary>Dialog #{dialog.RecordId}.</summary> 
	public GuiDialog #{dialog.RecordId} { get; } = new (
        #{dialog.QuotedId}, #{dialog.Prompt.Quoted()}, #{dialog.Icon.Quoted()}, _#{dialog.IdLabel}.BaseBinding, () => new #{dialog.Id.Label}()) {
                IsBoundType = (object data) => data is #{dialog.Id.Label}
                };
#end foreach	

##endregion
##region // Results
#foreach (var result in Guigen.Results) 

    ///<summary>Result #{result.RecordId}.</summary> 
	public GuiResult #{result.RecordId} { get; } = new ();
#end foreach	
	
    ///<summary>Dictionary resolving exception name to factory method.</summary> 
    public Dictionary<string, Func<IResult>> ExceptionDirectory =
        new() {#!
#% separator.Reset ();
#foreach (var result in Guigen.Fails) 
#foreach (var entry in result.InheritedEntries) 
#if (entry is Exception exception)
#{separator} 
                { typeof(#{exception.Id}).FullName, () => new #{result.Id}() } #!
#end if
#end foreach
#end foreach
            };
##endregion
##region // Constructors
    /// <summary>
    /// Default constructor returning an instance.
    /// </summary>
    public _#{Guigen.Class.Name} () {


#foreach (var section in Guigen.Sections) 
	    #{section.RecordId}.Gui = this;
	    #{section.RecordId}.Active = () => State#{section.State};
	    #{section.RecordId}.Entries =  new () { #!
#% separator.Reset ();
#foreach (var entry in section.InheritedEntries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if 
#end foreach
		    
            };

#end foreach

##endregion
##region // Initialize Sections
        Sections = new List<GuiSection> () { #!
#% separator.Reset ();
#foreach (var section in Guigen.Sections) 
#{separator} 
		    #{section.RecordId}#!
#end foreach

            };

##endregion
##region // Initialize Actions
#foreach (var action in Guigen.Actions) 
        #{action.RecordId}.Callback = (x) => #{action.Id.Label} (x as #{action.Id.Label}) ;
	    #{action.RecordId}.Entries = new () {#!
#% separator.Reset ();
#foreach (var entry in action.InheritedEntries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if
#end foreach

		    };

#end foreach

        Actions = new List<GuiAction>() { #!
#% separator.Reset ();
#foreach (var action in Guigen.Actions) 
#{separator} 
		    #{action.RecordId}#!
#end foreach

		    };

##endregion

##region // Initialize Selections
#foreach (var action in Guigen.Selections) 
        #{action.RecordId}.Callback = (x) => #{action.Id.Label} (x as #{action.DispatchType}) ;
	    #{action.RecordId}.Entries = new () {#!
#% separator.Reset ();
#foreach (var entry in action.InheritedEntries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if
#end foreach

		    };

#end foreach

        Selections = new List<GuiAction>() { #!
#% separator.Reset ();
#foreach (var action in Guigen.Selections) 
#{separator} 
		    #{action.RecordId}#!
#end foreach

		    };

##endregion

##region // Initialize Dialogs
#foreach (var dialog in Guigen.Dialogs) 
	    #{dialog.RecordId}.Entries = new () {#!
#% separator.Reset ();
#foreach (var entry in dialog.InheritedEntries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if
#end foreach
			
		    };

        //#{dialog.Id.Label}.IsBacker = (object data) => #{dialog.RecordId}.IsBacker(data);
#end foreach

        Dialogs = new List<GuiDialog>() { #!
#% separator.Reset ();
#foreach (var dialog in Guigen.Dialogs) 
#{separator} 
		    #{dialog.RecordId}#!
#end foreach

		    };

##endregion
##region // Initialize Results
#foreach (var result in Guigen.Results) 
	    #{result.RecordId}.Entries = new () {#!
#% separator.Reset ();
#foreach (var entry in result.Entries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if
#end foreach
			
		    };

#end foreach


        Results = new List<GuiResult>() { #!
#% separator.Reset ();
#foreach (var result in Guigen.Results) 
#{separator} 
		    #{result.RecordId}#!
#end foreach

		    };

        }

##endregion
##region // Initialize Actions
#foreach (var action in Guigen.Actions) 
    /// <summary>
    /// GUI action
    /// </summary>
    public virtual Task<IResult> #{action.Id.Label} (#{action.Id.Label} data) 
                => throw new NYI();

#end foreach
#foreach (var action in Guigen.Selections) 
    /// <summary>
    /// GUI action
    /// </summary>
    public virtual Task<IResult> #{action.Id.Label} (#{action.DispatchType} data) 
                => throw new NYI();

#end foreach

##endregion
	}

##endregion
#end method


#method MakeIParameterMethods IEntries action
    ///<summary>Validation</summary> 
    public #{action.IfSubclassOverride} IResult Validate(Gui gui) {
        GuiResultInvalid result = null;

#foreach (var entry in action.AllEntries)
#if (entry is IField field) 
#foreach (var fieldEntry in field.GetEntries)
#if (fieldEntry is Error error) 
        // error on #{field.IdLabel}
        if (#!
#foreach (var t in error.Condition)
#{t}
#end foreach
            ) {
            result ??=new GuiResultInvalid(this);
            result.SetError (#{field.Index}, "#{error.Message}", "#{error.Id}");
            }

#end if
#end foreach
#end if
#end foreach
        return (result as IResult) ?? NullResult.Valid;
        }

    ///<summary>Initialization.</summary> 
    public #{action.IfSubclassOverride} IResult Initialize(Gui gui) => NullResult.Initialized;


    ///<summary>Teardown.</summary> 
    public #{action.IfSubclassOverride} IResult TearDown(Gui gui) => NullResult.Teardown;

#end method

#method DeclareResultGetValues IEntries parent

    ///<inheritdoc/>
    public object[] GetValues() => #!
#% var separator = new Separator ("new [] { ", ",");
#foreach (var entry in parent.AllEntries)
#switchcast GuigenType entry
#casecast Text text
#{separator}
        #{entry.IdLabel}#!
#casecast Hidden hidden
#{separator}
        #{entry.IdLabel}#!
#end switchcast
#end foreach
#if (separator.IsFirst)
Array.Empty<object>();
#else
};#!
#end if

#end method


#method DeclareFields IEntries parent
#foreach (var entry in parent.AllEntries)
#if entry.BackerType != null
    ///<summary>#{entry.Summary}</summary> 
    public virtual #{entry.BackerType} #{entry.IdLabel} { get;#{entry.Readonly.If("", " set;") }} 

#end if
#end foreach
#end method

#method CreateBindings IEntries parent

    ///<inheritdoc/>
    public #{parent.IfSubclassOverride} GuiBinding Binding => BaseBinding;

    ///<summary>The binding for the data type.</summary> 
    public static #{parent.IfSubclassNew} GuiBinding BaseBinding  { get; } = #!
#call CreateBindingInner parent
#end method

#method CreateBindingInner IEntries parent
#% var empty = true;
#foreach (var entry in parent.InheritedEntries)
#if entry.BindingType != null
#% empty = false;
#end if
#end foreach
new (
        (object test) => test is #{parent.IdLabelBase},
        () => new #{parent.IdLabel}(),
#if empty
        Array.Empty<GuiBoundProperty>()#!
#else
        new GuiBoundProperty[] {#!
#% var separator = new Separator (",");
#% var index = 0;
#foreach (var entry in parent.InheritedEntries)
#if entry.BindingType != null
#{separator} 
            new #{entry.BindingType} ("#{entry.IdLabel}"#!
#if entry.PromptQuoted != null
, #{entry.PromptQuoted}#!
#end if
#if entry.BackerType != null
#% entry.Index = index++;
, (object data) => (data as #{parent.IdLabelBase}).#{entry.IdLabel} #!
#if (entry.Readonly)
, null#!
#else
, (object data,#{entry.BackerType} value) => (data as #{parent.IdLabelBase}).#{entry.IdLabel} = value#!
#end if
#else
#end if
#if entry.Width != null
, Width: #{entry.Width}
#end if
#if entry is List
#% var list = entry as List;
, _#{list.Type.Label}.BaseBinding#!
#end if
)#!
#end if
#end foreach


            }#!
#end if
);
#end method

#method GenerateEntry _Choice entry
#switchcast GuigenType entry
#casecast Chooser chooser
#call GenerateChooser chooser
#casecast List list
#call GenerateList list
#casecast Selection selection
#call GenerateSelection selection
#casecast Button button
#call GenerateButton button
#casecast Dialog dialog
#call GenerateDialog dialog
#casecast Text text
#call GenerateText text
#casecast Boolean boolean
#call GenerateBoolean boolean
#casecast TextArea text
#call GenerateTextArea text
#casecast Integer integer
#call GenerateInteger integer
#casecast QRScan qrscan
#call GenerateQRScan qrscan
#casecast Color color
#call GenerateColor color
#casecast Size size
#call GenerateSize size
#casecast Decimal decimalv
#call GenerateDecimal decimalv
#casecast Icon icon
#call GenerateIcon icon
#end switchcast
#end method


#method GenerateList List list
#% var separator = new Separator (",");
			new GuiList (#{list.QuotedId}, #{list.Prompt.Quoted()}, #{list.Icon.Quoted()}, #{list.DialogType}, #{list.Index}, new () {#!
#indent
#% separator.Reset ();
#foreach (var entry in list.Entries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if
#end foreach

			}) #!
#outdent
#end method

#method GenerateChooser Chooser chooser
#% var separator = new Separator (",");
			new GuiChooser (#{chooser.QuotedId}, #{chooser.Prompt.Quoted()}, #{chooser.Icon.Quoted()}, #{chooser.Index}, new () {#!
#indent
#% separator.Reset ();
#foreach (var entry in chooser.Entries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if
#end foreach

			}) #!
#outdent
#end method

#method GenerateDialog Dialog dialog
#% var separator = new Separator (",");
			new GuiDialog (#{dialog.QuotedId}, new () {#!
#indent
#% separator.Reset ();
#foreach (var entry in dialog.Entries)
#{separator} 
#call GenerateEntry entry
#end foreach

		    }) #!
#outdent
#end method


#method GenerateSelection Selection field
			new GuiButton (#{field.QuotedId}, #{field.Target})#!
#end method

#method GenerateButton Button field
			new GuiButton (#{field.QuotedId}, #{field.Target})#!
#end method

#method GenerateText Text field
			new GuiText (#{field.QuotedId}, #{field.Prompt.Quoted()}, #{field.Index}, #{field.Width.ValueOrNull()})#!
#end method

#method GenerateBoolean Boolean field
			new GuiBoolean (#{field.QuotedId}, #{field.Prompt.Quoted()}, #{field.Index})#!
#end method

#method GenerateTextArea TextArea field
			new GuiTextArea (#{field.QuotedId}, #{field.Prompt.Quoted()}, #{field.Index})#!
#end method

#method GenerateInteger Integer field
			new GuiInteger (#{field.QuotedId}, #{field.Prompt.Quoted()}, #{field.Index})#!
#end method

#method GenerateQRScan QRScan field
			new GuiQRScan (#{field.QuotedId}, #{field.Prompt.Quoted()}, #{field.Index})#!
#end method

#method GenerateColor Color field
			new GuiColor (#{field.QuotedId}, #{field.Prompt.Quoted()})#!
#end method

#method GenerateSize Size field
			new GuiSize (#{field.QuotedId}, #{field.Prompt.Quoted()})#!
#end method

#method GenerateDecimal Decimal field
			new GuiDecimal (#{field.QuotedId}, #{field.Prompt.Quoted()})#!
#end method

#method GenerateIcon Icon field
			new GuiIcon (#{field.QuotedId}, #{field.Prompt.Quoted()})#!
#end method


#method GenerateResx Guigen Guigen
<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

#foreach (var prompt in Guigen.Prompts)
  <data name="#{prompt.Value.Key}" xml:space="preserve">
    <value>#{prompt.Value.Text.XMLEscape()}</value>
    <comment>Generated by Guigen</comment>
  </data>
#end foreach

</root>


#end method

#end pclass
