#script 1.0
#license MITLicense
#pclass Goedel.Tool.Guigen Generate

#method GenerateCS Guigen Guigen
#% Guigen._InitChildren();
##region // Copyright 
#% // Boilerplate.Header (_Output, "//  ", GenerateTime);
#foreach (var Item in Guigen.Top)
#switchcast GuigenType Item
#casecast Copyright Copyright
#switchcast GuigenType Copyright.License
#casecast MITLicense null
#% Boilerplate.MITLicense (_Output, "//  ", "Copyright (c) " + Copyright.Date, Copyright.Holder);
#casecast BSD2License null
#% Boilerplate.BSD2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast BSD3License null
#% Boilerplate.BSD3License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast ISCLicense null
#% Boilerplate.ISCLicense (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast Apache2License null
#% Boilerplate.Apache2License (_Output, "//  ", "Copyright (c) " +  Copyright.Date, Copyright.Holder);
#casecast OtherLicense License
// Copyright (1) #{Copyright.Date} by #{Copyright.Holder}
// #{License.Text}
#end switchcast
#end switchcast
#end foreach

##endregion

using Goedel.Guigen;

namespace #{Guigen.Class.Namespace};

/// <summary>
#foreach (var text in Guigen.Class.Description)
/// #{text}
#end foreach
/// </summary>
public partial class #{Guigen.Class.Name} : Gui {


	///<inheritdoc/>
	public override List<GuiIcon> Icons => icons;
	readonly List<GuiIcon> icons = new () { #!
#% var separator = new Separator (",");
#foreach (var icon in Guigen.Icons) 
#{separator} 
		new GuiIcon ("#{icon.Key}") #!
#end foreach

		};

	///<inheritdoc/>
	public override List<GuiSection> Sections => sections;
	readonly List<GuiSection> sections = new () { #!
#% separator.Reset ();
#foreach (var section in Guigen.Sections) 
#{separator} 
		#{section.RecordId}#!
#end foreach

		};

	///<inheritdoc/>
	public override List<GuiAction> Actions => actions;
	readonly List<GuiAction> actions = new () { #!
#% separator.Reset ();
#foreach (var action in Guigen.Actions) 
#{separator} 
		#{action.RecordId}#!
#end foreach

		};

	///<inheritdoc/>
	public override List<GuiDialog> Dialogs => dialogs;
	readonly List<GuiDialog> dialogs = new () { #!
#% separator.Reset ();
#foreach (var dialog in Guigen.Dialogs) 
#{separator} 
		#{dialog.RecordId}#!
#end foreach

		};

	// Sections
#foreach (var section in Guigen.Sections) 
	static readonly GuiSection #{section.RecordId} = new (
			"#{section.Id}", "#{section.Prompt}", "#{section.Icon}", #{section.Primary.If("true","false")}, new List<ISectionEntry>() { #!
#% separator.Reset ();
#foreach (var entry in section.Entries)
#if (entry.Active)
#{separator} 
#call GenerateEntry entry
#end if 
#end foreach

			}) {
		};

#end foreach	
	
	// Actions
#foreach (var action in Guigen.Actions) 
	static readonly GuiAction #{action.RecordId} = new (
			"#{action.Id}", "#{action.Prompt}", "#{action.Icon}", new List<IActionEntry>() {#!
#% separator.Reset ();
#foreach (var entry in action.Entries)
#{separator} 
#call GenerateEntry entry
#end foreach

			}) {
		};

#end foreach	

	// Dialogs
#foreach (var dialog in Guigen.Dialogs) 
	static readonly GuiDialog #{dialog.RecordId} = new (
			"#{dialog.Id}", new List<IDialogEntry>() {#!
#% separator.Reset ();
#foreach (var entry in dialog.Entries)
#{separator} 
#call GenerateEntry entry
#end foreach

			}) {
		};

#end foreach	
	
	}


#end method


#method GenerateEntry _Choice entry
#switchcast GuigenType entry
#casecast Chooser chooser
#call GenerateChooser chooser
#casecast Button button
#call GenerateButton button
#casecast Dialog dialog
#call GenerateDialog dialog
#casecast Text text
#call GenerateText text
#casecast Color color
#call GenerateColor color
#casecast Size size
#call GenerateSize size
#casecast Decimal decimalv
#call GenerateDecimal decimalv
#casecast Icon icon
#call GenerateIcon icon
#end switchcast
#end method

#method GenerateChooser Chooser chooser
			// Chooser #!
#end method

#method GenerateButton Button button
			// Button #!
#end method

#method GenerateDialog Dialog dialog
			// Dialog #!
#end method

#method GenerateText Text text
			// Text #!
#end method

#method GenerateColor Color color
			// Color #!
#end method

#method GenerateSize Size size
			// Text #!
#end method

#method GenerateDecimal Decimal decimalv
			// Decimal #!
#end method

#method GenerateIcon Icon icon
			// Icon #!
#end method

#end pclass
