#script 1.0
#license MITLicense
#xclass Goedel.Tool.FSRGen Generate
#method GenerateCS FSRSchema FSRSchema
#% FSRSchema.Complete ();

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.FSR;

#foreach (_Choice Item in FSRSchema.Top)
#switchcast FSRSchemaType Item
#casecast FSR FSR
#% bool first = true;

// #{FSR.Id}
namespace #{FSR.Id}{


	// Prototypes for the actions. These must be implemented in 
	// the plus class

	/*
	public partial class #{FSR.Prefix} {
#foreach (Action Action in FSR.Actions)
        public virtual void #{Action.Tag} (char c) {
			}
#end foreach
		}
	*/

	public partial class #{FSR.Prefix} : global::Goedel.FSR.Lexer {
       /// <summary>
        /// Create and initialize a lexical analyzer.
        /// </summary>
        /// <param name="Reader">The input source.</param>
        public  #{FSR.Prefix}(LexReader Reader) : base (Reader) {
            }

        /// <summary>
        /// Create and initialize a lexical analyzer.
        /// </summary>
        /// <param name="Stream">The input source.</param>
        public  #{FSR.Prefix}(Stream Stream) : base(new LexReader(Stream)) {
            }

        /// <summary>
        /// Create and initialize a lexical analyzer.
        /// </summary>
        /// <param name="TextReader">The input source.</param>
        public  #{FSR.Prefix}(TextReader TextReader) : base(new LexReader(TextReader)) {
            }

        /// <summary>
        /// Maps characters to character sets
        /// </summary>
        public override byte[] CharacterMappings { get => Character_Mapping; }  

        /// <summary>
        /// State transitions in response to character set
        /// </summary>
        public override short[,] CompressedTransitions { get => Compressed_Transitions; } 

        /// <summary>
        /// Get the next token from the stream
        /// </summary>
        /// <param name="StartState">The initial starting state</param>
        /// <returns>The token detected or -1 if an error occurred</returns>
        public Token GetToken(State StartState) {
            return Tokens [GetTokenInt((int)StartState)];
            }

        /// <summary>
        /// Get the next token from the stream
        /// </summary>
        /// <returns>The token detected or -1 if an error occurred</returns>
        public Token GetToken () {
            return GetToken (0);
            }

		/// <summary>State types</summary>
		public enum State {
#foreach (State State in FSR.States)
#if (first) 
#% first = false;
#else 
,
#end if
			/// <summary>#{State.Id}</summary>
            #{State.Id} = #{State.Index}#!
#end foreach

			};

		/// <summary>Token Types</summary>
		public enum Token {
			/// <summary>Could not find a valid token.</summary>
			INVALID = -1#!
#foreach (Token Token in FSR.Tokens)
,
			/// <summary>#{Token.Tag}</summary>
            #{Token.Tag} = #{Token.Index}#!
#end foreach

			};


		/// <summary>Mapping of characters to character groups</summary>
		static byte [] Character_Mapping   =  new byte [] {
			#!
#for (int j = 0; j < FSR.MaxChar; j++)
#if (j >0)
, #!
#if ((j%16) == 0)

			#!
#end if
#end if
#{FSR.MappingTable[j]} #!
#end for
  };

		static short [,]  Compressed_Transitions  = new short [,]  {
#for (int i = 0; i < FSR.States.Count; i++) 
#if (i >0)
,
#end if
			{#!
#for (int j = 0; j < FSR.MaxMap; j++)
#if (j >0)
, #!
#if ((j%16) == 0)

     #!
#end if
#end if
#{FSR.CompressedTable[i,j]} #!
#end for
}#!
#end for

		};


		static Token [] Tokens = new Token [] {
#% bool comma = false;
#foreach (var State in FSR.States)
#if (comma)
,
#end if
#% comma = true;
			Token.#{State.Token}#!
#end foreach

			};

		/// <summary>Generated initialization method, is called automatically 
		/// the FSR to reset </summary>
        public override void Init () {
            Actions = new Action[] {
#%  comma = false;
#foreach (var State in FSR.States)
#if (comma)
,
#end if
#% comma = true;
				#{State.Action}#!
#end foreach

				};
			}
		}
	}

#end switchcast
#end foreach
#end method


#end xclass