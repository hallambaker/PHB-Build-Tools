
//  Test
//  
//  This file was automatically generated at 12/3/2015 12:13:04 AM
//   
//  Changes to this file may be overwritten without warning
//  
//  Generator:  GoedelShell version 1.0.0.0
//      Goedel Script Version : 0.1   Generated 
//      Goedel Schema Version : 0.1   Generated
//  
//      Copyright : Copyright ©  2012
//  
//  Build Platform: Win32NT 6.2.9200.0
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;


//
// Namespace RegistryConfig
// Class ConfigItems
//


// Types
//   TopTypeType
//       Class
//   TypeType
//       Field
//       String
//       Int
//       Binary
//       AltID
//   IdType
//       FieldType
//   NamespaceType
//       RegistryConfig
//   ClassType
//       ConfigItems
//   NameType
//       Namespace
//       Id
//       Fields
//       Type
//       Options
//       Name
//   TokenType
//       ClassType

namespace RegistryConfig {


    public enum ConfigItemsType {
        _Top,

        Class,
        Field,
        AltID,
        String,
        Int,
        Binary,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public ConfigItemsType _Tag ();

		public abstract void Serialize (StructureWriter Output, bool tag);
        }



    public partial class Class : _Choice {
        public TOKEN<_Choice>			Namespace;
        public ID<_Choice>				Id; 
        public List <Field>           Fields = new List<Field> ();

        public override ConfigItemsType _Tag () {
            return ConfigItemsType.Class;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Class");
				}

	        Output.WriteId ("Namespace", Namespace.ToString());
	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (Field _e in Fields) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Class");
				}			
			}
		}

    public partial class Field : _Choice {
        public ID<_Choice>				Id; 
        public _Choice					Type;
        public List <_Choice>           Options = new List<_Choice> ();

        public override ConfigItemsType _Tag () {
            return ConfigItemsType.Field;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Field");
				}

	        Output.WriteId ("Id", Id.ToString()); 
	        Type.Serialize (Output, true);
			Output.StartList ("");
			foreach (_Choice _e in Options) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Field");
				}			
			}
		}

    public partial class AltID : _Choice {
		public string					Name;

        public override ConfigItemsType _Tag () {
            return ConfigItemsType.AltID;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("AltID");
				}

			Output.WriteAttribute ("Name", Name);
			if (tag) {
				Output.EndElement ("AltID");
				}			
			}
		}

    public partial class String : _Choice {

        public override ConfigItemsType _Tag () {
            return ConfigItemsType.String;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("String");
				}

			if (tag) {
				Output.EndElement ("String");
				}			
			}
		}

    public partial class Int : _Choice {

        public override ConfigItemsType _Tag () {
            return ConfigItemsType.Int;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Int");
				}

			if (tag) {
				Output.EndElement ("Int");
				}			
			}
		}

    public partial class Binary : _Choice {

        public override ConfigItemsType _Tag () {
            return ConfigItemsType.Binary;
            }

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Binary");
				}

			if (tag) {
				Output.EndElement ("Binary");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() {
            Label = null;
            }

        public override ConfigItemsType _Tag () {
            return ConfigItemsType._Label;
            }

		public override void Serialize (StructureWriter Output, bool tag) {
			Output.WriteId ("ID", Label.ToString());
			}
        }
//	}

//namespace Goedel.Registry {

    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Class_Start,
		Class__Namespace,				
		Class__Id,				
		Class__Fields,				
		Field_Start,
		Field__Id,				
		Field__Type,				
		Field__Options,				
		AltID_Start,
		AltID__Name,				
		String_Start,
		Int_Start,
		Binary_Start,
        }


    struct _StackItem {
        public StateCode   State;
        public RegistryConfig._Choice     Token;
        }

    public partial class ConfigItems : Goedel.Registry.Parser{
        public List <RegistryConfig._Choice>        Top;
        public Registry	<RegistryConfig._Choice>	Registry;



        bool _StartOfEntry;
        public bool StartOfEntry {
            get {return _StartOfEntry;}
            private set { _StartOfEntry = value; }
            }

        StateCode								State;
        RegistryConfig._Choice				Current;
        List <_StackItem>						Stack;
        TokenType								CurrentToken;
        Position								CurrentPosition;
        string									CurrentText;


        public static ConfigItems Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new ConfigItems();
            Result.Options = Options;

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }

            return Result;
            }


        public ConfigItems() {
            Top = new List<RegistryConfig._Choice> () ;
            Registry = new Registry <RegistryConfig._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            _StartOfEntry = true;

			TYPE__FieldType = Registry.TYPE ("FieldType"); 
			TYPE__ClassType = Registry.TYPE ("ClassType"); 



            }



        public TYPE<RegistryConfig._Choice> TYPE__FieldType ;
        public TYPE<RegistryConfig._Choice> TYPE__ClassType ;

        private RegistryConfig._Choice New_Choice(string Label) {
            switch (Label) {

                case "Class": return NewClass();
                case "Field": return NewField();
                case "AltID": return NewAltID();
                case "String": return NewString();
                case "Int": return NewInt();
                case "Binary": return NewBinary();

				}
            throw new System.Exception ("Reserved word not recognized \"" + Label + "\"");
            }



        private RegistryConfig.Class NewClass() {
            RegistryConfig.Class result = new RegistryConfig.Class();
            Push (result);
            State = StateCode.Class_Start;
            return result;
            }


        private RegistryConfig.Field NewField() {
            RegistryConfig.Field result = new RegistryConfig.Field();
            Push (result);
            State = StateCode.Field_Start;
            return result;
            }


        private RegistryConfig.AltID NewAltID() {
            RegistryConfig.AltID result = new RegistryConfig.AltID();
            Push (result);
            State = StateCode.AltID_Start;
            return result;
            }


        private RegistryConfig.String NewString() {
            RegistryConfig.String result = new RegistryConfig.String();
            Push (result);
            State = StateCode.String_Start;
            return result;
            }


        private RegistryConfig.Int NewInt() {
            RegistryConfig.Int result = new RegistryConfig.Int();
            Push (result);
            State = StateCode.Int_Start;
            return result;
            }


        private RegistryConfig.Binary NewBinary() {
            RegistryConfig.Binary result = new RegistryConfig.Binary();
            Push (result);
            State = StateCode.Binary_Start;
            return result;
            }


        static RegistryConfig.ConfigItemsType _Reserved(string Label) {
            switch (Label) {

                case "Class": return RegistryConfig.ConfigItemsType.Class;
                case "Field": return RegistryConfig.ConfigItemsType.Field;
                case "AltID": return RegistryConfig.ConfigItemsType.AltID;
                case "String": return RegistryConfig.ConfigItemsType.String;
                case "Int": return RegistryConfig.ConfigItemsType.Int;
                case "Binary": return RegistryConfig.ConfigItemsType.Binary;

                }
            return RegistryConfig.ConfigItemsType._Bottom;
            }


		public void Serialize (TextWriter Output) {
			Serialize (Output, OutputFormat.Goedel);
			}

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (RegistryConfig._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (RegistryConfig._Choice Token) {
            _StackItem Item = new _StackItem ();
            Item.State = State;
            Item.Token = Current;

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
            if (Stack.Count == 0) throw new System.Exception ("Internal Parser Error");

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {
            CurrentToken = Token;
            CurrentPosition = Position;
            CurrentText = Text;

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) return;
            if (Token == TokenType.INVALID)
                throw new System.Exception("Invalid Token");

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected START");

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            RegistryConfig.ConfigItemsType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == RegistryConfig.ConfigItemsType.Class)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new System.Exception("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) {
                            State = StateCode._End;
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [Class]");

                    case StateCode._End:                   //      -
                        throw new System.Exception("Too Many Closing Braces");

                    case StateCode.Class_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            RegistryConfig.Class Current_Cast = (RegistryConfig.Class)Current;
                            Current_Cast.Namespace = Registry.TOKEN(Position, Text, TYPE__ClassType, Current_Cast);
                            State = StateCode.Class__Namespace;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Class__Namespace:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            RegistryConfig.Class Current_Cast = (RegistryConfig.Class)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__ClassType, Current_Cast);
                            State = StateCode.Class__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Class__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Class__Fields;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Class__Fields: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            RegistryConfig.Class Current_Cast = (RegistryConfig.Class)Current;
                            Current_Cast.Fields.Add (NewField ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Field_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            RegistryConfig.Field Current_Cast = (RegistryConfig.Field)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__FieldType, Current_Cast);
                            State = StateCode.Field__Id;
                            break;
                            }
                        throw new System.Exception("Expected LABEL or LITERAL");

                    case StateCode.Field__Id:
                        if (Token == TokenType.LABEL) {
							RegistryConfig.Field Current_Cast = (RegistryConfig.Field)Current;
                            RegistryConfig.ConfigItemsType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == RegistryConfig.ConfigItemsType.String) |
									(LabelType == RegistryConfig.ConfigItemsType.Int) |
									(LabelType == RegistryConfig.ConfigItemsType.Binary) ) {
                                State = StateCode.Field__Type;
                                Current_Cast.Type = New_Choice(Text);
                                }
                            else {
                               throw new System.Exception("Parser Error Expected [String Int Binary ]");
                                }
                            break;
                            }
                        else throw new System.Exception("Parser Error Expected [String Int Binary ]");

                    case StateCode.Field__Type:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Field__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Field__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							RegistryConfig.Field Current_Cast = (RegistryConfig.Field)Current;
                            RegistryConfig.ConfigItemsType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == RegistryConfig.ConfigItemsType.AltID) |
									(LabelType == RegistryConfig.ConfigItemsType.AltID) ) {
                                Current_Cast.Options.Add (New_Choice(Text));
                                }
                            else {
								throw new System.Exception("Parser Error Expected [AltID AltID ]");
								}
							}
                        break;


                    case StateCode.AltID_Start:
                        if (Token == TokenType.STRING) {
                            RegistryConfig.AltID Current_Cast = (RegistryConfig.AltID)Current;
                            Current_Cast.Name = Text;
                            State = StateCode.AltID__Name;
                            break;
                            }
                        throw new System.Exception("Expected String");

                    case StateCode.AltID__Name:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.String_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Int_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Binary_Start:
                        Pop ();
                        Represent = true; 
                        break;

                    default:
                        throw new System.Exception("Unreachable code reached");
                    }
                }
            }
        }
	}


