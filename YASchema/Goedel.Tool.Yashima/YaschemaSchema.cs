
//  Copyright (c) ThresholdSecrets by 2020
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;
using Goedel.Utilities;




//
// Namespace Goedel.Tool.Yaschema
// Class YaschemaStruct
//


// Types
//   TopTypeType
//       Namespace
//       Client
//       Host
//   TypeType
//       Packet
//       Initial
//       Respond
//       Plaintext
//       Mezzanine
//       Encrypted
//       ClientEphemerals
//       ClientEphemeral
//       HostKeyID
//       HostEphemerals
//       Response
//       Challenge
//       Payload
//       ClientCredential
//       ClientKeyID
//       HostEphemeral
//   IdType
//       PacketType
//   NamespaceType
//       Goedel.Tool.Yaschema
//   ClassType
//       YaschemaStruct
//   NameType
//       Id
//       Class
//       Text
//       Entries
//       Options
//       HostCredential
//       To
//   TokenType
//       Name
//       Label

#pragma warning disable IDE0022, IDE0066, IDE1006, IDE0059
namespace Goedel.Tool.Yaschema {


    public enum YaschemaStructType {
        _Top,

        Namespace,
        Client,
        Host,
        Packet,
        Initial,
        Respond,
        Plaintext,
        Mezzanine,
        Encrypted,
        Payload,
        ClientCredential,
        HostCredential,
        ClientEphemerals,
        HostEphemerals,
        ClientEphemeral,
        HostEphemeral,
        Challenge,
        Response,
        HostKeyID,
        ClientKeyID,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public YaschemaStructType _Tag ();

        public _Choice _Parent;
        public YaschemaStruct _Base;

		public abstract void Serialize (StructureWriter Output, bool tag);

    	public virtual void Init (_Choice parent) {
            _Parent = parent;
            _Base ??= parent?._Base;
			}

        

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice parent) {
			Init (parent);
            _Base = parent._Base;
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Namespace : _Choice {
        public TOKEN<_Choice>			Id;
        public TOKEN<_Choice>			Class;
		public List <System.String>			Text = new List <System.String> (); 

        public override YaschemaStructType _Tag () =>YaschemaStructType.Namespace;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Namespace");
				}

	        Output.WriteId ("Id", Id.ToString());
	        Output.WriteId ("Class", Class.ToString());
			foreach (string _s in Text) {
				Output.WriteAttribute ("Text",_s);
				}
			if (tag) {
				Output.EndElement ("Namespace");
				}			
			}
		}

    public partial class Client : _Choice {
        public List <Packet>           Entries = new List<Packet> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Client;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Client");
				}

			Output.StartList ("");
			foreach (Packet _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Client");
				}			
			}
		}

    public partial class Host : _Choice {
        public List <Packet>           Entries = new List<Packet> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Host;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Host");
				}

			Output.StartList ("");
			foreach (Packet _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Host");
				}			
			}
		}

    public partial class Packet : _Choice {
        public ID<_Choice>				Id; 
        public List <_Choice>           Entries = new List<_Choice> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Packet;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Packet");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Packet");
				}			
			}
		}

    public partial class Initial : _Choice {
		public List<HostCredential>  HostCredential = new  List <HostCredential> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Initial;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Initial");
				}

			Output.StartList ("");
			foreach (HostCredential _e in HostCredential) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Initial");
				}			
			}
		}

    public partial class Respond : _Choice {
        public List <REF<_Choice>>           To = new List<REF<_Choice>> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Respond;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Respond");
				}

			Output.StartList ("");
			foreach (REF<_Choice> _e in To) {
				Output.WriteId ("To", _e.ToString());
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Respond");
				}			
			}
		}

    public partial class Plaintext : _Choice {
        public List <_Choice>           Entries = new List<_Choice> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Plaintext;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Plaintext");
				}

			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Plaintext");
				}			
			}
		}

    public partial class Mezzanine : _Choice {
        public List <_Choice>           Entries = new List<_Choice> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Mezzanine;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Mezzanine");
				}

			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Mezzanine");
				}			
			}
		}

    public partial class Encrypted : _Choice {
        public List <_Choice>           Entries = new List<_Choice> ();

        public override YaschemaStructType _Tag () =>YaschemaStructType.Encrypted;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			foreach (var Sub in Entries) {
				Sub._InitChildren (this);
				}
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Encrypted");
				}

			Output.StartList ("");
			foreach (_Choice _e in Entries) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Encrypted");
				}			
			}
		}

    public partial class Payload : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.Payload;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Payload");
				}

			if (tag) {
				Output.EndElement ("Payload");
				}			
			}
		}

    public partial class ClientCredential : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.ClientCredential;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ClientCredential");
				}

			if (tag) {
				Output.EndElement ("ClientCredential");
				}			
			}
		}

    public partial class HostCredential : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.HostCredential;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("HostCredential");
				}

			if (tag) {
				Output.EndElement ("HostCredential");
				}			
			}
		}

    public partial class ClientEphemerals : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.ClientEphemerals;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ClientEphemerals");
				}

			if (tag) {
				Output.EndElement ("ClientEphemerals");
				}			
			}
		}

    public partial class HostEphemerals : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.HostEphemerals;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("HostEphemerals");
				}

			if (tag) {
				Output.EndElement ("HostEphemerals");
				}			
			}
		}

    public partial class ClientEphemeral : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.ClientEphemeral;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ClientEphemeral");
				}

			if (tag) {
				Output.EndElement ("ClientEphemeral");
				}			
			}
		}

    public partial class HostEphemeral : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.HostEphemeral;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("HostEphemeral");
				}

			if (tag) {
				Output.EndElement ("HostEphemeral");
				}			
			}
		}

    public partial class Challenge : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.Challenge;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Challenge");
				}

			if (tag) {
				Output.EndElement ("Challenge");
				}			
			}
		}

    public partial class Response : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.Response;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Response");
				}

			if (tag) {
				Output.EndElement ("Response");
				}			
			}
		}

    public partial class HostKeyID : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.HostKeyID;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("HostKeyID");
				}

			if (tag) {
				Output.EndElement ("HostKeyID");
				}			
			}
		}

    public partial class ClientKeyID : _Choice {

        public override YaschemaStructType _Tag () =>YaschemaStructType.ClientKeyID;


		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("ClientKeyID");
				}

			if (tag) {
				Output.EndElement ("ClientKeyID");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() =>  Label = null;

        public override YaschemaStructType _Tag () => YaschemaStructType._Label;

		public override void Serialize (StructureWriter Output, bool tag) =>Output.WriteId ("ID", Label.ToString());
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Namespace_Start,
		Namespace__Id,				
		Namespace__Class,				
		Namespace__Text,				
		Client_Start,
		Client__Entries,				
		Host_Start,
		Host__Entries,				
		Packet_Start,
		Packet__Id,				
		Packet__Entries,				
		Initial_Start,
		Initial__Options,				
		Respond_Start,
		Respond__To,				
		Plaintext_Start,
		Plaintext__Entries,				
		Mezzanine_Start,
		Mezzanine__Entries,				
		Encrypted_Start,
		Encrypted__Entries,				
		Payload_Start,
		ClientCredential_Start,
		HostCredential_Start,
		ClientEphemerals_Start,
		HostEphemerals_Start,
		ClientEphemeral_Start,
		HostEphemeral_Start,
		Challenge_Start,
		Response_Start,
		HostKeyID_Start,
		ClientKeyID_Start,
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.Tool.Yaschema._Choice     Token;
        }

    public partial class YaschemaStruct : Goedel.Registry.Parser{
        public List <Goedel.Tool.Yaschema._Choice>        Top;
        public Registry	<Goedel.Tool.Yaschema._Choice>	Registry;

        public bool StartOfEntry {get;  private set;}

        StateCode								State;
        Goedel.Tool.Yaschema._Choice				Current;
        List <_StackItem>						Stack;


        public static YaschemaStruct Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new YaschemaStruct() {
				Options = Options
				};

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }
            Result.Init ();
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
                Entry._Base = this;
				Entry._InitChildren (null);
				}
			}

        public YaschemaStruct() {
            Top = new List<Goedel.Tool.Yaschema._Choice> () ;
            Registry = new Registry <Goedel.Tool.Yaschema._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            StartOfEntry = true;

			TYPE__PacketType = Registry.TYPE ("PacketType"); 
			TYPE__Name = Registry.TYPE ("Name"); 
			TYPE__Label = Registry.TYPE ("Label"); 



            }



        public TYPE<Goedel.Tool.Yaschema._Choice> TYPE__PacketType ;
        public TYPE<Goedel.Tool.Yaschema._Choice> TYPE__Name ;
        public TYPE<Goedel.Tool.Yaschema._Choice> TYPE__Label ;

        private Goedel.Tool.Yaschema._Choice New_Choice(string Label) {
            switch (Label) {

                case "Namespace": return NewNamespace();
                case "Client": return NewClient();
                case "Host": return NewHost();
                case "Packet": return NewPacket();
                case "Initial": return NewInitial();
                case "Respond": return NewRespond();
                case "Plaintext": return NewPlaintext();
                case "Mezzanine": return NewMezzanine();
                case "Encrypted": return NewEncrypted();
                case "Payload": return NewPayload();
                case "ClientCredential": return NewClientCredential();
                case "HostCredential": return NewHostCredential();
                case "ClientEphemerals": return NewClientEphemerals();
                case "HostEphemerals": return NewHostEphemerals();
                case "ClientEphemeral": return NewClientEphemeral();
                case "HostEphemeral": return NewHostEphemeral();
                case "Challenge": return NewChallenge();
                case "Response": return NewResponse();
                case "HostKeyID": return NewHostKeyID();
                case "ClientKeyID": return NewClientKeyID();

				}

            throw new NotFoundReserved ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.Tool.Yaschema.Namespace NewNamespace() {
            Goedel.Tool.Yaschema.Namespace result = new Goedel.Tool.Yaschema.Namespace();
            Push (result);
            State = StateCode.Namespace_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Client NewClient() {
            Goedel.Tool.Yaschema.Client result = new Goedel.Tool.Yaschema.Client();
            Push (result);
            State = StateCode.Client_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Host NewHost() {
            Goedel.Tool.Yaschema.Host result = new Goedel.Tool.Yaschema.Host();
            Push (result);
            State = StateCode.Host_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Packet NewPacket() {
            Goedel.Tool.Yaschema.Packet result = new Goedel.Tool.Yaschema.Packet();
            Push (result);
            State = StateCode.Packet_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Initial NewInitial() {
            Goedel.Tool.Yaschema.Initial result = new Goedel.Tool.Yaschema.Initial();
            Push (result);
            State = StateCode.Initial_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Respond NewRespond() {
            Goedel.Tool.Yaschema.Respond result = new Goedel.Tool.Yaschema.Respond();
            Push (result);
            State = StateCode.Respond_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Plaintext NewPlaintext() {
            Goedel.Tool.Yaschema.Plaintext result = new Goedel.Tool.Yaschema.Plaintext();
            Push (result);
            State = StateCode.Plaintext_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Mezzanine NewMezzanine() {
            Goedel.Tool.Yaschema.Mezzanine result = new Goedel.Tool.Yaschema.Mezzanine();
            Push (result);
            State = StateCode.Mezzanine_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Encrypted NewEncrypted() {
            Goedel.Tool.Yaschema.Encrypted result = new Goedel.Tool.Yaschema.Encrypted();
            Push (result);
            State = StateCode.Encrypted_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Payload NewPayload() {
            Goedel.Tool.Yaschema.Payload result = new Goedel.Tool.Yaschema.Payload();
            Push (result);
            State = StateCode.Payload_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.ClientCredential NewClientCredential() {
            Goedel.Tool.Yaschema.ClientCredential result = new Goedel.Tool.Yaschema.ClientCredential();
            Push (result);
            State = StateCode.ClientCredential_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.HostCredential NewHostCredential() {
            Goedel.Tool.Yaschema.HostCredential result = new Goedel.Tool.Yaschema.HostCredential();
            Push (result);
            State = StateCode.HostCredential_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.ClientEphemerals NewClientEphemerals() {
            Goedel.Tool.Yaschema.ClientEphemerals result = new Goedel.Tool.Yaschema.ClientEphemerals();
            Push (result);
            State = StateCode.ClientEphemerals_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.HostEphemerals NewHostEphemerals() {
            Goedel.Tool.Yaschema.HostEphemerals result = new Goedel.Tool.Yaschema.HostEphemerals();
            Push (result);
            State = StateCode.HostEphemerals_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.ClientEphemeral NewClientEphemeral() {
            Goedel.Tool.Yaschema.ClientEphemeral result = new Goedel.Tool.Yaschema.ClientEphemeral();
            Push (result);
            State = StateCode.ClientEphemeral_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.HostEphemeral NewHostEphemeral() {
            Goedel.Tool.Yaschema.HostEphemeral result = new Goedel.Tool.Yaschema.HostEphemeral();
            Push (result);
            State = StateCode.HostEphemeral_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Challenge NewChallenge() {
            Goedel.Tool.Yaschema.Challenge result = new Goedel.Tool.Yaschema.Challenge();
            Push (result);
            State = StateCode.Challenge_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.Response NewResponse() {
            Goedel.Tool.Yaschema.Response result = new Goedel.Tool.Yaschema.Response();
            Push (result);
            State = StateCode.Response_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.HostKeyID NewHostKeyID() {
            Goedel.Tool.Yaschema.HostKeyID result = new Goedel.Tool.Yaschema.HostKeyID();
            Push (result);
            State = StateCode.HostKeyID_Start;
            return result;
            }


        private Goedel.Tool.Yaschema.ClientKeyID NewClientKeyID() {
            Goedel.Tool.Yaschema.ClientKeyID result = new Goedel.Tool.Yaschema.ClientKeyID();
            Push (result);
            State = StateCode.ClientKeyID_Start;
            return result;
            }


        static Goedel.Tool.Yaschema.YaschemaStructType _Reserved(string Label) {
            switch (Label) {

                case "Namespace": return Goedel.Tool.Yaschema.YaschemaStructType.Namespace;
                case "Client": return Goedel.Tool.Yaschema.YaschemaStructType.Client;
                case "Host": return Goedel.Tool.Yaschema.YaschemaStructType.Host;
                case "Packet": return Goedel.Tool.Yaschema.YaschemaStructType.Packet;
                case "Initial": return Goedel.Tool.Yaschema.YaschemaStructType.Initial;
                case "Respond": return Goedel.Tool.Yaschema.YaschemaStructType.Respond;
                case "Plaintext": return Goedel.Tool.Yaschema.YaschemaStructType.Plaintext;
                case "Mezzanine": return Goedel.Tool.Yaschema.YaschemaStructType.Mezzanine;
                case "Encrypted": return Goedel.Tool.Yaschema.YaschemaStructType.Encrypted;
                case "Payload": return Goedel.Tool.Yaschema.YaschemaStructType.Payload;
                case "ClientCredential": return Goedel.Tool.Yaschema.YaschemaStructType.ClientCredential;
                case "HostCredential": return Goedel.Tool.Yaschema.YaschemaStructType.HostCredential;
                case "ClientEphemerals": return Goedel.Tool.Yaschema.YaschemaStructType.ClientEphemerals;
                case "HostEphemerals": return Goedel.Tool.Yaschema.YaschemaStructType.HostEphemerals;
                case "ClientEphemeral": return Goedel.Tool.Yaschema.YaschemaStructType.ClientEphemeral;
                case "HostEphemeral": return Goedel.Tool.Yaschema.YaschemaStructType.HostEphemeral;
                case "Challenge": return Goedel.Tool.Yaschema.YaschemaStructType.Challenge;
                case "Response": return Goedel.Tool.Yaschema.YaschemaStructType.Response;
                case "HostKeyID": return Goedel.Tool.Yaschema.YaschemaStructType.HostKeyID;
                case "ClientKeyID": return Goedel.Tool.Yaschema.YaschemaStructType.ClientKeyID;

                }
            return Goedel.Tool.Yaschema.YaschemaStructType._Bottom;
            }


		public void Serialize (TextWriter Output)=> Serialize (Output, OutputFormat.Goedel);

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.Tool.Yaschema._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.Tool.Yaschema._Choice Token) {
            _StackItem Item = new _StackItem () {
					State = State,
					Token = Current
					};

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
			Assert.AssertFalse (Stack.Count == 0, InternalError.Throw);

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) {
				return;
				}
			Assert.AssertFalse (Token == TokenType.INVALID, InvalidToken.Throw);

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else {
							throw new ExpectedStart ();
							}

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.Tool.Yaschema.YaschemaStructType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Namespace) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Client) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Host)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new Expected("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) { 
                            State = StateCode._End;
                            break;
                            }
                        else {
							throw new ExpectedClass();
							}

                    case StateCode._End: {                  //      -
                        throw new TooManyClose();
						}

                    case StateCode.Namespace_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Yaschema.Namespace Current_Cast = (Goedel.Tool.Yaschema.Namespace)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__Name, Current_Cast);
                            State = StateCode.Namespace__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Id:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Yaschema.Namespace Current_Cast = (Goedel.Tool.Yaschema.Namespace)Current;
                            Current_Cast.Class = Registry.TOKEN(Position, Text, TYPE__Label, Current_Cast);
                            State = StateCode.Namespace__Class;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Namespace__Class:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Namespace__Text;
                            break;
                            }
                        else {
                            Pop();
                            Represent = true;
                            break;
                            }
                    case StateCode.Namespace__Text:
                       if (Token == TokenType.END) {
                            Pop();
                            break;
                            }
                       else if (Token == TokenType.TEXT) {
                            Goedel.Tool.Yaschema.Namespace Current_Cast = (Goedel.Tool.Yaschema.Namespace)Current;
                            Current_Cast.Text.Add (Text);
                            break;							
                            }
                       throw new Expected("Expected Text");


                    case StateCode.Client_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Client__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Client__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.Yaschema.Client Current_Cast = (Goedel.Tool.Yaschema.Client)Current;
                            Current_Cast.Entries.Add (NewPacket ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Host_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Host__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Host__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$


						/// Label
                        else {
                            Goedel.Tool.Yaschema.Host Current_Cast = (Goedel.Tool.Yaschema.Host)Current;
                            Current_Cast.Entries.Add (NewPacket ());
                            Represent = true;
                            }

                        break;


                    case StateCode.Packet_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Yaschema.Packet Current_Cast = (Goedel.Tool.Yaschema.Packet)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__PacketType, Current_Cast);
                            State = StateCode.Packet__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Packet__Id:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Packet__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Packet__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.Yaschema.Packet Current_Cast = (Goedel.Tool.Yaschema.Packet)Current;
                            Goedel.Tool.Yaschema.YaschemaStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Initial) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Respond) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Plaintext) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Mezzanine) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Encrypted) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new Expected ("Parser Error Expected [Initial Respond Plaintext Mezzanine Encrypted ]");
								}
							}
                        break;


                    case StateCode.Initial_Start:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Initial__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Initial__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.Yaschema.Initial Current_Cast = (Goedel.Tool.Yaschema.Initial)Current;
                            Goedel.Tool.Yaschema.YaschemaStructType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.Yaschema.YaschemaStructType.HostCredential : {

									// HostCredential  HostCredential
									Current_Cast.HostCredential.Add (NewHostCredential ());
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [HostCredential ]");
									}
								}
							}
                        break;

                    case StateCode.Respond_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Respond__To;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Respond__To: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.Yaschema.Respond Current_Cast = (Goedel.Tool.Yaschema.Respond)Current;
                            Current_Cast.To.Add ( Registry.REF(Position, Text, TYPE__PacketType, Current_Cast ) );
                            break;
                            }

                        break;


                    case StateCode.Plaintext_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Plaintext__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Plaintext__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.Yaschema.Plaintext Current_Cast = (Goedel.Tool.Yaschema.Plaintext)Current;
                            Goedel.Tool.Yaschema.YaschemaStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.ClientEphemerals) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.ClientEphemeral) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.HostKeyID) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.HostCredential) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.HostEphemerals) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Response) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Challenge) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Payload) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new Expected ("Parser Error Expected [ClientEphemerals ClientEphemeral HostKeyID HostCredential HostEphemerals Response Challenge Payload ]");
								}
							}
                        break;


                    case StateCode.Mezzanine_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Mezzanine__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Mezzanine__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.Yaschema.Mezzanine Current_Cast = (Goedel.Tool.Yaschema.Mezzanine)Current;
                            Goedel.Tool.Yaschema.YaschemaStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.ClientCredential) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.ClientKeyID) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.HostEphemeral) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.HostEphemerals) |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Payload) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new Expected ("Parser Error Expected [ClientCredential ClientKeyID HostEphemeral HostEphemerals Payload ]");
								}
							}
                        break;


                    case StateCode.Encrypted_Start:

                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Encrypted__Entries;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Encrypted__Entries: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for LIST $$$$$

                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.Yaschema.Encrypted Current_Cast = (Goedel.Tool.Yaschema.Encrypted)Current;
                            Goedel.Tool.Yaschema.YaschemaStructType LabelType = _Reserved (Text);
                            if ( false |
									(LabelType == Goedel.Tool.Yaschema.YaschemaStructType.Payload) ) {
                                Current_Cast.Entries.Add (New_Choice(Text));
                                }
                            else {
								throw new Expected ("Parser Error Expected [Payload ]");
								}
							}
                        break;


                    case StateCode.Payload_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.ClientCredential_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.HostCredential_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.ClientEphemerals_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.HostEphemerals_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.ClientEphemeral_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.HostEphemeral_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Challenge_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Response_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.HostKeyID_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.ClientKeyID_Start:
                        Pop ();
                        Represent = true; 
                        break;

                    default: {
                        throw new UnreachableCode();
						}
                    }
                }
            }
        }
	}
#pragma warning restore IDE0022	

