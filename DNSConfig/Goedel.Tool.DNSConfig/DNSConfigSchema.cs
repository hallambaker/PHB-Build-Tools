
//  Copyright (c) Default Deny Security Inc. by 2018
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
// This file is automatically generated from the following source files:
// Command line options: 
//     /dlexer=False
//     /dparser=False
//     /dstack=False

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Goedel.Registry;
using Goedel.Utilities;


//
// Namespace Goedel.Tool.DNSConfig
// Class DNSConfig
//


// Types
//   TopTypeType
//       Machine
//       DNS
//       Site
//   TypeType
//   IdType
//       IPT
//       DnsT
//       AddressT
//       SiteT
//       DomainT
//   NamespaceType
//       Goedel.Tool.DNSConfig
//   ClassType
//       DNSConfig
//   NameType
//       Id
//       Data
//       Contact
//       Options
//       Refresh
//       Retry
//       Expire
//       TTL
//       Slave
//       CAA
//       Authoritative
//       MX
//       Time
//       Host
//       Tag
//       Value
//       Priority
//       Domain
//       Web
//       Service
//       Address
//       SMTP
//       Root
//       Name
//       TXT
//       Port
//       Weight
//       Text
//   TokenType

namespace Goedel.Tool.DNSConfig {


    public enum DNSConfigType {
        _Top,

        Machine,
        DNS,
        Authoritative,
        Refresh,
        Retry,
        Expire,
        TTL,
        Slave,
        CAA,
        MX,
        Site,
        Domain,
        Address,
        SMTP,
        Web,
        Service,
        Host,
        TXT,
        Port,
        Priority,
        Weight,

        _Label,
        _Bottom
        }    
    

    public abstract partial class _Choice {
        abstract public DNSConfigType _Tag ();

		public abstract void Serialize (StructureWriter Output, bool tag);

		public virtual void Init (_Choice Parent) {
			}

		bool _Initialized = false;
		public virtual void _InitChildren (_Choice Parent) {
			Init (Parent);
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			}
        }



    public partial class Machine : _Choice {
        public ID<_Choice>				Id; 
		public string					Data;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Machine;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Machine");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Data", Data);
			if (tag) {
				Output.EndElement ("Machine");
				}			
			}
		}

    public partial class DNS : _Choice {
        public ID<_Choice>				Id; 
		public string					Contact;
		public Refresh  Refresh = new  Refresh();
		public Retry  Retry = new  Retry();
		public Expire  Expire = new  Expire();
		public TTL  TTL = new  TTL();
		public List<Slave>  Slave = new  List <Slave> ();
		public List<CAA>  CAA = new  List <CAA> ();
		public List<Authoritative>  Authoritative = new  List <Authoritative> ();
		public List<MX>  MX = new  List <MX> ();

        public override DNSConfigType _Tag () {
            return DNSConfigType.DNS;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("DNS");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.WriteAttribute ("Contact", Contact);
			Output.StartList ("");
		// public Refresh  Refresh = new  Refresh();
			Refresh.Serialize (Output, true);
		// public Retry  Retry = new  Retry();
			Retry.Serialize (Output, true);
		// public Expire  Expire = new  Expire();
			Expire.Serialize (Output, true);
		// public TTL  TTL = new  TTL();
			TTL.Serialize (Output, true);
			foreach (Slave _e in Slave) {
				_e.Serialize (Output, true);
				}
			foreach (CAA _e in CAA) {
				_e.Serialize (Output, true);
				}
			foreach (Authoritative _e in Authoritative) {
				_e.Serialize (Output, true);
				}
			foreach (MX _e in MX) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("DNS");
				}			
			}
		}

    public partial class Authoritative : _Choice {
        public ID<_Choice>				Id; 
        public REF<_Choice>				Data;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Authoritative;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Authoritative");
				}

	        Output.WriteId ("Id", Id.ToString()); 
	        Output.WriteId ("Data", Data.ToString());
			if (tag) {
				Output.EndElement ("Authoritative");
				}			
			}
		}

    public partial class Refresh : _Choice {
		public int						Time;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Refresh;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Refresh");
				}

			Output.WriteAttribute ("Time", Time);
			if (tag) {
				Output.EndElement ("Refresh");
				}			
			}
		}

    public partial class Retry : _Choice {
		public int						Time;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Retry;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Retry");
				}

			Output.WriteAttribute ("Time", Time);
			if (tag) {
				Output.EndElement ("Retry");
				}			
			}
		}

    public partial class Expire : _Choice {
		public int						Time;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Expire;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Expire");
				}

			Output.WriteAttribute ("Time", Time);
			if (tag) {
				Output.EndElement ("Expire");
				}			
			}
		}

    public partial class TTL : _Choice {
		public int						Time;

        public override DNSConfigType _Tag () {
            return DNSConfigType.TTL;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("TTL");
				}

			Output.WriteAttribute ("Time", Time);
			if (tag) {
				Output.EndElement ("TTL");
				}			
			}
		}

    public partial class Slave : _Choice {
        public REF<_Choice>				Host;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Slave;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Slave");
				}

	        Output.WriteId ("Host", Host.ToString());
			if (tag) {
				Output.EndElement ("Slave");
				}			
			}
		}

    public partial class CAA : _Choice {
		public string					Tag;
		public string					Value;

        public override DNSConfigType _Tag () {
            return DNSConfigType.CAA;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("CAA");
				}

			Output.WriteAttribute ("Tag", Tag);
			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("CAA");
				}			
			}
		}

    public partial class MX : _Choice {
        public REF<_Choice>				Id;
		public int						Priority;

        public override DNSConfigType _Tag () {
            return DNSConfigType.MX;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("MX");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.WriteAttribute ("Priority", Priority);
			if (tag) {
				Output.EndElement ("MX");
				}			
			}
		}

    public partial class Site : _Choice {
        public ID<_Choice>				Id; 
		public List<Domain>  Domain = new  List <Domain> ();
		public Web  Web = new  Web();

        public override DNSConfigType _Tag () {
            return DNSConfigType.Site;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Site");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (Domain _e in Domain) {
				_e.Serialize (Output, true);
				}
		// public Web  Web = new  Web();
			Web.Serialize (Output, true);
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Site");
				}			
			}
		}

    public partial class Domain : _Choice {
        public ID<_Choice>				Id; 
		public List<Service>  Service = new  List <Service> ();
		public List<Address>  Address = new  List <Address> ();
		public List<SMTP>  SMTP = new  List <SMTP> ();

        public override DNSConfigType _Tag () {
            return DNSConfigType.Domain;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Domain");
				}

	        Output.WriteId ("Id", Id.ToString()); 
			Output.StartList ("");
			foreach (Service _e in Service) {
				_e.Serialize (Output, true);
				}
			foreach (Address _e in Address) {
				_e.Serialize (Output, true);
				}
			foreach (SMTP _e in SMTP) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Domain");
				}			
			}
		}

    public partial class Address : _Choice {
        public ID<_Choice>				Id; 
        public REF<_Choice>				Data;
		public SMTP  SMTP = new  SMTP();

        public override DNSConfigType _Tag () {
            return DNSConfigType.Address;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Address");
				}

	        Output.WriteId ("Id", Id.ToString()); 
	        Output.WriteId ("Data", Data.ToString());
			Output.StartList ("");
		// public SMTP  SMTP = new  SMTP();
			SMTP.Serialize (Output, true);
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Address");
				}			
			}
		}

    public partial class SMTP : _Choice {

        public override DNSConfigType _Tag () {
            return DNSConfigType.SMTP;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("SMTP");
				}

			if (tag) {
				Output.EndElement ("SMTP");
				}			
			}
		}

    public partial class Web : _Choice {
        public TOKEN<_Choice>			Id;
		public string					Root;
		public List<Host>  Host = new  List <Host> ();

        public override DNSConfigType _Tag () {
            return DNSConfigType.Web;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Web");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.WriteAttribute ("Root", Root);
			Output.StartList ("");
			foreach (Host _e in Host) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Web");
				}			
			}
		}

    public partial class Service : _Choice {
		public string					Name;
		public List<Host>  Host = new  List <Host> ();
		public List<TXT>  TXT = new  List <TXT> ();

        public override DNSConfigType _Tag () {
            return DNSConfigType.Service;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Service");
				}

			Output.WriteAttribute ("Name", Name);
			Output.StartList ("");
			foreach (Host _e in Host) {
				_e.Serialize (Output, true);
				}
			foreach (TXT _e in TXT) {
				_e.Serialize (Output, true);
				}
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Service");
				}			
			}
		}

    public partial class Host : _Choice {
        public REF<_Choice>				Id;
		public List<TXT>  TXT = new  List <TXT> ();
		public Port  Port = new  Port();
		public Priority  Priority = new  Priority();
		public Weight  Weight = new  Weight();

        public override DNSConfigType _Tag () {
            return DNSConfigType.Host;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Host");
				}

	        Output.WriteId ("Id", Id.ToString());
			Output.StartList ("");
			foreach (TXT _e in TXT) {
				_e.Serialize (Output, true);
				}
		// public Port  Port = new  Port();
			Port.Serialize (Output, true);
		// public Priority  Priority = new  Priority();
			Priority.Serialize (Output, true);
		// public Weight  Weight = new  Weight();
			Weight.Serialize (Output, true);
			Output.EndList ("");
			if (tag) {
				Output.EndElement ("Host");
				}			
			}
		}

    public partial class TXT : _Choice {
		public string					Text;

        public override DNSConfigType _Tag () {
            return DNSConfigType.TXT;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("TXT");
				}

			Output.WriteAttribute ("Text", Text);
			if (tag) {
				Output.EndElement ("TXT");
				}			
			}
		}

    public partial class Port : _Choice {
		public int						Value;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Port;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Port");
				}

			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Port");
				}			
			}
		}

    public partial class Priority : _Choice {
		public int						Value;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Priority;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Priority");
				}

			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Priority");
				}			
			}
		}

    public partial class Weight : _Choice {
		public int						Value;

        public override DNSConfigType _Tag () {
            return DNSConfigType.Weight;
            }

		public override void _InitChildren (_Choice Parent) {
			Init (Parent);
			}

		public override void Serialize (StructureWriter Output, bool tag) {

			if (tag) {
				Output.StartElement ("Weight");
				}

			Output.WriteAttribute ("Value", Value);
			if (tag) {
				Output.EndElement ("Weight");
				}			
			}
		}

    class _Label : _Choice {
        public REF<_Choice>            Label;

		// This method is never called. It exists only to prevent a warning when a
		// Schema does not contain a ChoiceREF element.
        public void Reach() {
            Label = null;
            }

        public override DNSConfigType _Tag () {
            return DNSConfigType._Label;
            }

		public override void Serialize (StructureWriter Output, bool tag) {
			Output.WriteId ("ID", Label.ToString());
			}
        }


    public enum StateCode {  
        _Start,
        _Choice,
        _End,

		Machine_Start,
		Machine__Id,				
		Machine__Data,				
		DNS_Start,
		DNS__Id,				
		DNS__Contact,				
		DNS__Options,				
		Authoritative_Start,
		Authoritative__Id,				
		Authoritative__Data,				
		Refresh_Start,
		Refresh__Time,				
		Retry_Start,
		Retry__Time,				
		Expire_Start,
		Expire__Time,				
		TTL_Start,
		TTL__Time,				
		Slave_Start,
		Slave__Host,				
		CAA_Start,
		CAA__Tag,				
		CAA__Value,				
		MX_Start,
		MX__Id,				
		MX__Priority,				
		Site_Start,
		Site__Id,				
		Site__Options,				
		Domain_Start,
		Domain__Id,				
		Domain__Options,				
		Address_Start,
		Address__Id,				
		Address__Data,				
		Address__Options,				
		SMTP_Start,
		Web_Start,
		Web__Id,				
		Web__Root,				
		Web__Options,				
		Service_Start,
		Service__Name,				
		Service__Options,				
		Host_Start,
		Host__Id,				
		Host__Options,				
		TXT_Start,
		TXT__Text,				
		Port_Start,
		Port__Value,				
		Priority_Start,
		Priority__Value,				
		Weight_Start,
		Weight__Value,				
        }


    struct _StackItem {
        public StateCode   State;
        public Goedel.Tool.DNSConfig._Choice     Token;
        }

    public partial class DNSConfig : Goedel.Registry.Parser{
        public List <Goedel.Tool.DNSConfig._Choice>        Top;
        public Registry	<Goedel.Tool.DNSConfig._Choice>	Registry;



        bool _StartOfEntry;
        public bool StartOfEntry {
            get {return _StartOfEntry;}
            private set { _StartOfEntry = value; }
            }

        StateCode								State;
        Goedel.Tool.DNSConfig._Choice				Current;
        List <_StackItem>						Stack;


        public static DNSConfig Parse(string File, Goedel.Registry.Dispatch Options) {
            var Result = new DNSConfig();
            Result.Options = Options;

            using (Stream infile =
                        new FileStream(File, FileMode.Open, FileAccess.Read)) {
                Lexer Schema = new Lexer(File);
                Schema.Process(infile, Result);
                }
			Result._InitChildren ();

            return Result;
            }

		bool _Initialized = false;
		public virtual void _InitChildren () {
			if (_Initialized) {
				return;
				}
			_Initialized = true;
			foreach (var Entry in Top) {
				Entry._InitChildren (null);
				}
			}

        public DNSConfig() {
            Top = new List<Goedel.Tool.DNSConfig._Choice> () ;
            Registry = new Registry <Goedel.Tool.DNSConfig._Choice> ();
            State = StateCode._Start;
            Stack = new List <_StackItem> ();
            _StartOfEntry = true;

			TYPE__IPT = Registry.TYPE ("IPT"); 
			TYPE__DnsT = Registry.TYPE ("DnsT"); 
			TYPE__AddressT = Registry.TYPE ("AddressT"); 
			TYPE__SiteT = Registry.TYPE ("SiteT"); 
			TYPE__DomainT = Registry.TYPE ("DomainT"); 



            }



        public TYPE<Goedel.Tool.DNSConfig._Choice> TYPE__IPT ;
        public TYPE<Goedel.Tool.DNSConfig._Choice> TYPE__DnsT ;
        public TYPE<Goedel.Tool.DNSConfig._Choice> TYPE__AddressT ;
        public TYPE<Goedel.Tool.DNSConfig._Choice> TYPE__SiteT ;
        public TYPE<Goedel.Tool.DNSConfig._Choice> TYPE__DomainT ;

        private Goedel.Tool.DNSConfig._Choice New_Choice(string Label) {
            switch (Label) {

                case "Machine": return NewMachine();
                case "DNS": return NewDNS();
                case "Authoritative": return NewAuthoritative();
                case "Refresh": return NewRefresh();
                case "Retry": return NewRetry();
                case "Expire": return NewExpire();
                case "TTL": return NewTTL();
                case "Slave": return NewSlave();
                case "CAA": return NewCAA();
                case "MX": return NewMX();
                case "Site": return NewSite();
                case "Domain": return NewDomain();
                case "Address": return NewAddress();
                case "SMTP": return NewSMTP();
                case "Web": return NewWeb();
                case "Service": return NewService();
                case "Host": return NewHost();
                case "TXT": return NewTXT();
                case "Port": return NewPort();
                case "Priority": return NewPriority();
                case "Weight": return NewWeight();

				}

            throw new NotFoundReserved ("Reserved word not recognized \"" + Label + "\"");
            }



        private Goedel.Tool.DNSConfig.Machine NewMachine() {
            Goedel.Tool.DNSConfig.Machine result = new Goedel.Tool.DNSConfig.Machine();
            Push (result);
            State = StateCode.Machine_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.DNS NewDNS() {
            Goedel.Tool.DNSConfig.DNS result = new Goedel.Tool.DNSConfig.DNS();
            Push (result);
            State = StateCode.DNS_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Authoritative NewAuthoritative() {
            Goedel.Tool.DNSConfig.Authoritative result = new Goedel.Tool.DNSConfig.Authoritative();
            Push (result);
            State = StateCode.Authoritative_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Refresh NewRefresh() {
            Goedel.Tool.DNSConfig.Refresh result = new Goedel.Tool.DNSConfig.Refresh();
            Push (result);
            State = StateCode.Refresh_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Retry NewRetry() {
            Goedel.Tool.DNSConfig.Retry result = new Goedel.Tool.DNSConfig.Retry();
            Push (result);
            State = StateCode.Retry_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Expire NewExpire() {
            Goedel.Tool.DNSConfig.Expire result = new Goedel.Tool.DNSConfig.Expire();
            Push (result);
            State = StateCode.Expire_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.TTL NewTTL() {
            Goedel.Tool.DNSConfig.TTL result = new Goedel.Tool.DNSConfig.TTL();
            Push (result);
            State = StateCode.TTL_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Slave NewSlave() {
            Goedel.Tool.DNSConfig.Slave result = new Goedel.Tool.DNSConfig.Slave();
            Push (result);
            State = StateCode.Slave_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.CAA NewCAA() {
            Goedel.Tool.DNSConfig.CAA result = new Goedel.Tool.DNSConfig.CAA();
            Push (result);
            State = StateCode.CAA_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.MX NewMX() {
            Goedel.Tool.DNSConfig.MX result = new Goedel.Tool.DNSConfig.MX();
            Push (result);
            State = StateCode.MX_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Site NewSite() {
            Goedel.Tool.DNSConfig.Site result = new Goedel.Tool.DNSConfig.Site();
            Push (result);
            State = StateCode.Site_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Domain NewDomain() {
            Goedel.Tool.DNSConfig.Domain result = new Goedel.Tool.DNSConfig.Domain();
            Push (result);
            State = StateCode.Domain_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Address NewAddress() {
            Goedel.Tool.DNSConfig.Address result = new Goedel.Tool.DNSConfig.Address();
            Push (result);
            State = StateCode.Address_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.SMTP NewSMTP() {
            Goedel.Tool.DNSConfig.SMTP result = new Goedel.Tool.DNSConfig.SMTP();
            Push (result);
            State = StateCode.SMTP_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Web NewWeb() {
            Goedel.Tool.DNSConfig.Web result = new Goedel.Tool.DNSConfig.Web();
            Push (result);
            State = StateCode.Web_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Service NewService() {
            Goedel.Tool.DNSConfig.Service result = new Goedel.Tool.DNSConfig.Service();
            Push (result);
            State = StateCode.Service_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Host NewHost() {
            Goedel.Tool.DNSConfig.Host result = new Goedel.Tool.DNSConfig.Host();
            Push (result);
            State = StateCode.Host_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.TXT NewTXT() {
            Goedel.Tool.DNSConfig.TXT result = new Goedel.Tool.DNSConfig.TXT();
            Push (result);
            State = StateCode.TXT_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Port NewPort() {
            Goedel.Tool.DNSConfig.Port result = new Goedel.Tool.DNSConfig.Port();
            Push (result);
            State = StateCode.Port_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Priority NewPriority() {
            Goedel.Tool.DNSConfig.Priority result = new Goedel.Tool.DNSConfig.Priority();
            Push (result);
            State = StateCode.Priority_Start;
            return result;
            }


        private Goedel.Tool.DNSConfig.Weight NewWeight() {
            Goedel.Tool.DNSConfig.Weight result = new Goedel.Tool.DNSConfig.Weight();
            Push (result);
            State = StateCode.Weight_Start;
            return result;
            }


        static Goedel.Tool.DNSConfig.DNSConfigType _Reserved(string Label) {
            switch (Label) {

                case "Machine": return Goedel.Tool.DNSConfig.DNSConfigType.Machine;
                case "DNS": return Goedel.Tool.DNSConfig.DNSConfigType.DNS;
                case "Authoritative": return Goedel.Tool.DNSConfig.DNSConfigType.Authoritative;
                case "Refresh": return Goedel.Tool.DNSConfig.DNSConfigType.Refresh;
                case "Retry": return Goedel.Tool.DNSConfig.DNSConfigType.Retry;
                case "Expire": return Goedel.Tool.DNSConfig.DNSConfigType.Expire;
                case "TTL": return Goedel.Tool.DNSConfig.DNSConfigType.TTL;
                case "Slave": return Goedel.Tool.DNSConfig.DNSConfigType.Slave;
                case "CAA": return Goedel.Tool.DNSConfig.DNSConfigType.CAA;
                case "MX": return Goedel.Tool.DNSConfig.DNSConfigType.MX;
                case "Site": return Goedel.Tool.DNSConfig.DNSConfigType.Site;
                case "Domain": return Goedel.Tool.DNSConfig.DNSConfigType.Domain;
                case "Address": return Goedel.Tool.DNSConfig.DNSConfigType.Address;
                case "SMTP": return Goedel.Tool.DNSConfig.DNSConfigType.SMTP;
                case "Web": return Goedel.Tool.DNSConfig.DNSConfigType.Web;
                case "Service": return Goedel.Tool.DNSConfig.DNSConfigType.Service;
                case "Host": return Goedel.Tool.DNSConfig.DNSConfigType.Host;
                case "TXT": return Goedel.Tool.DNSConfig.DNSConfigType.TXT;
                case "Port": return Goedel.Tool.DNSConfig.DNSConfigType.Port;
                case "Priority": return Goedel.Tool.DNSConfig.DNSConfigType.Priority;
                case "Weight": return Goedel.Tool.DNSConfig.DNSConfigType.Weight;

                }
            return Goedel.Tool.DNSConfig.DNSConfigType._Bottom;
            }


		public void Serialize (TextWriter Output) {
			Serialize (Output, OutputFormat.Goedel);
			}

		public void Serialize (TextWriter Output, OutputFormat OutputFormat) {

			StructureWriter StructureWriter = StructureWriter.GetStructureWriter (Output, OutputFormat);
			StructureWriter.StartDocument ();
			foreach (Goedel.Tool.DNSConfig._Choice Entry in Top) {
				Entry.Serialize (StructureWriter, true);
				}
			StructureWriter.EndDocument ();
			}


        void Push (Goedel.Tool.DNSConfig._Choice Token) {
            _StackItem Item = new _StackItem ();
            Item.State = State;
            Item.Token = Current;

            Stack.Add (Item);

            //Console.WriteLine ("$$$$PUSH {0}", Current);

            Current = Token;
            }

        void Pop () {
			Assert.False (Stack.Count == 0, InternalError.Throw);

            _StackItem Item = Stack[Stack.Count -1];
            State = Item.State;
            Current = Item.Token;

            Stack.RemoveAt (Stack.Count -1 ) ;

            //Console.WriteLine ("$$$$POP {0}", Current);
            }



        public override void Process(TokenType Token, Position Position, string Text) {

            if ((Token == TokenType.SEPARATOR) |
                (Token == TokenType.NULL) |
                (Token == TokenType.COMMENT)) {
				return;
				}
			Assert.False (Token == TokenType.INVALID, InvalidToken.Throw);

            bool Represent = true;

            while (Represent) {
                //Console.WriteLine ("    {3}: {0} {1} '{2}'", Token, Position, Text, State);


                Represent = false;
                switch (State) {
                    case StateCode._Start:                 //      BEGIN
                        if (Token == TokenType.BEGIN) {
                            State = StateCode._Choice;
                            break;
                            }
                        else {
							throw new ExpectedStart ();
							}

                    case StateCode._Choice:                //      LABEL Class | END
                        if (Token == TokenType.LABEL) {
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
                            if (false |
									(LabelType == Goedel.Tool.DNSConfig.DNSConfigType.Machine) |
									(LabelType == Goedel.Tool.DNSConfig.DNSConfigType.DNS) |
									(LabelType == Goedel.Tool.DNSConfig.DNSConfigType.Site)) {
                                Top.Add(New_Choice(Text));
                                }
                            else {
                                throw new Expected("Parser Error Expected [Class]");
                                }
                            break;
                            }
                        if (Token == TokenType.END) {
                            State = StateCode._End;
                            break;
                            }
                        else {
							throw new ExpectedClass();
							}

                    case StateCode._End: {                  //      -
                        throw new TooManyClose();
						}

                    case StateCode.Machine_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Machine Current_Cast = (Goedel.Tool.DNSConfig.Machine)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__IPT, Current_Cast);
                            State = StateCode.Machine__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Machine__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.DNSConfig.Machine Current_Cast = (Goedel.Tool.DNSConfig.Machine)Current;
                            Current_Cast.Data = Text;
                            State = StateCode.Machine__Data;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Machine__Data:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.DNS_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.DNS Current_Cast = (Goedel.Tool.DNSConfig.DNS)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__DnsT, Current_Cast);
                            State = StateCode.DNS__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.DNS__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.DNSConfig.DNS Current_Cast = (Goedel.Tool.DNSConfig.DNS)Current;
                            Current_Cast.Contact = Text;
                            State = StateCode.DNS__Contact;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.DNS__Contact:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.DNS__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.DNS__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.DNSConfig.DNS Current_Cast = (Goedel.Tool.DNSConfig.DNS)Current;
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.DNSConfig.DNSConfigType.Refresh : {

									// Refresh  Refresh
									Current_Cast.Refresh = NewRefresh ();
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Retry : {

									// Retry  Retry
									Current_Cast.Retry = NewRetry ();
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Expire : {

									// Expire  Expire
									Current_Cast.Expire = NewExpire ();
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.TTL : {

									// TTL  TTL
									Current_Cast.TTL = NewTTL ();
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Slave : {

									// Slave  Slave
									Current_Cast.Slave.Add (NewSlave ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.CAA : {

									// CAA  CAA
									Current_Cast.CAA.Add (NewCAA ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Authoritative : {

									// Authoritative  Authoritative
									Current_Cast.Authoritative.Add (NewAuthoritative ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.MX : {

									// MX  MX
									Current_Cast.MX.Add (NewMX ());
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [Refresh Retry Expire TTL Slave CAA Authoritative MX ]");
									}
								}
							}
                        break;

                    case StateCode.Authoritative_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Authoritative Current_Cast = (Goedel.Tool.DNSConfig.Authoritative)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__AddressT, Current_Cast);
                            State = StateCode.Authoritative__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Authoritative__Id:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Authoritative Current_Cast = (Goedel.Tool.DNSConfig.Authoritative)Current;
                            Current_Cast.Data = Registry.REF(Position, Text, TYPE__IPT, Current_Cast);
                            State = StateCode.Authoritative__Data;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Authoritative__Data:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Refresh_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.Refresh Current_Cast = (Goedel.Tool.DNSConfig.Refresh)Current;
                            Current_Cast.Time = Convert.ToInt32(Text);
                            State = StateCode.Refresh__Time;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Refresh__Time:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Retry_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.Retry Current_Cast = (Goedel.Tool.DNSConfig.Retry)Current;
                            Current_Cast.Time = Convert.ToInt32(Text);
                            State = StateCode.Retry__Time;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Retry__Time:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Expire_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.Expire Current_Cast = (Goedel.Tool.DNSConfig.Expire)Current;
                            Current_Cast.Time = Convert.ToInt32(Text);
                            State = StateCode.Expire__Time;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Expire__Time:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.TTL_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.TTL Current_Cast = (Goedel.Tool.DNSConfig.TTL)Current;
                            Current_Cast.Time = Convert.ToInt32(Text);
                            State = StateCode.TTL__Time;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.TTL__Time:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Slave_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Slave Current_Cast = (Goedel.Tool.DNSConfig.Slave)Current;
                            Current_Cast.Host = Registry.REF(Position, Text, TYPE__AddressT, Current_Cast);
                            State = StateCode.Slave__Host;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Slave__Host:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.CAA_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.DNSConfig.CAA Current_Cast = (Goedel.Tool.DNSConfig.CAA)Current;
                            Current_Cast.Tag = Text;
                            State = StateCode.CAA__Tag;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.CAA__Tag:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.DNSConfig.CAA Current_Cast = (Goedel.Tool.DNSConfig.CAA)Current;
                            Current_Cast.Value = Text;
                            State = StateCode.CAA__Value;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.CAA__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.MX_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.MX Current_Cast = (Goedel.Tool.DNSConfig.MX)Current;
                            Current_Cast.Id = Registry.REF(Position, Text, TYPE__AddressT, Current_Cast);
                            State = StateCode.MX__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.MX__Id:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.MX Current_Cast = (Goedel.Tool.DNSConfig.MX)Current;
                            Current_Cast.Priority = Convert.ToInt32(Text);
                            State = StateCode.MX__Priority;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.MX__Priority:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Site_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Site Current_Cast = (Goedel.Tool.DNSConfig.Site)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__SiteT, Current_Cast);
                            State = StateCode.Site__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Site__Id:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Site__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Site__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.DNSConfig.Site Current_Cast = (Goedel.Tool.DNSConfig.Site)Current;
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.DNSConfig.DNSConfigType.Domain : {

									// Domain  Domain
									Current_Cast.Domain.Add (NewDomain ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Web : {

									// Web  Web
									Current_Cast.Web = NewWeb ();
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [Domain Web ]");
									}
								}
							}
                        break;

                    case StateCode.Domain_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Domain Current_Cast = (Goedel.Tool.DNSConfig.Domain)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__DomainT, Current_Cast);
                            State = StateCode.Domain__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Domain__Id:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Domain__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Domain__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.DNSConfig.Domain Current_Cast = (Goedel.Tool.DNSConfig.Domain)Current;
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.DNSConfig.DNSConfigType.Service : {

									// Service  Service
									Current_Cast.Service.Add (NewService ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Address : {

									// Address  Address
									Current_Cast.Address.Add (NewAddress ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.SMTP : {

									// SMTP  SMTP
									Current_Cast.SMTP.Add (NewSMTP ());
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [Service Address SMTP ]");
									}
								}
							}
                        break;

                    case StateCode.Address_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Address Current_Cast = (Goedel.Tool.DNSConfig.Address)Current;
                            Current_Cast.Id = Registry.ID(Position, Text, TYPE__AddressT, Current_Cast);
                            State = StateCode.Address__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Address__Id:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Address Current_Cast = (Goedel.Tool.DNSConfig.Address)Current;
                            Current_Cast.Data = Registry.REF(Position, Text, TYPE__IPT, Current_Cast);
                            State = StateCode.Address__Data;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Address__Data:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Address__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Address__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.DNSConfig.Address Current_Cast = (Goedel.Tool.DNSConfig.Address)Current;
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.DNSConfig.DNSConfigType.SMTP : {

									// SMTP  SMTP
									Current_Cast.SMTP = NewSMTP ();
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [SMTP ]");
									}
								}
							}
                        break;

                    case StateCode.SMTP_Start:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Web_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Web Current_Cast = (Goedel.Tool.DNSConfig.Web)Current;
                            Current_Cast.Id = Registry.TOKEN(Position, Text, TYPE__DomainT, Current_Cast);
                            State = StateCode.Web__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Web__Id:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.DNSConfig.Web Current_Cast = (Goedel.Tool.DNSConfig.Web)Current;
                            Current_Cast.Root = Text;
                            State = StateCode.Web__Root;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Web__Root:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Web__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Web__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.DNSConfig.Web Current_Cast = (Goedel.Tool.DNSConfig.Web)Current;
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.DNSConfig.DNSConfigType.Host : {

									// Host  Host
									Current_Cast.Host.Add (NewHost ());
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [Host ]");
									}
								}
							}
                        break;

                    case StateCode.Service_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.DNSConfig.Service Current_Cast = (Goedel.Tool.DNSConfig.Service)Current;
                            Current_Cast.Name = Text;
                            State = StateCode.Service__Name;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.Service__Name:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Service__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Service__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.DNSConfig.Service Current_Cast = (Goedel.Tool.DNSConfig.Service)Current;
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.DNSConfig.DNSConfigType.Host : {

									// Host  Host
									Current_Cast.Host.Add (NewHost ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.TXT : {

									// TXT  TXT
									Current_Cast.TXT.Add (NewTXT ());
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [Host TXT ]");
									}
								}
							}
                        break;

                    case StateCode.Host_Start:
                        if ((Token == TokenType.LABEL) | (Token == TokenType.LITERAL)) {
                            Goedel.Tool.DNSConfig.Host Current_Cast = (Goedel.Tool.DNSConfig.Host)Current;
                            Current_Cast.Id = Registry.REF(Position, Text, TYPE__AddressT, Current_Cast);
                            State = StateCode.Host__Id;
                            break;
                            }
                        throw new Expected("Expected LABEL or LITERAL");

                    case StateCode.Host__Id:
                        if (Token == TokenType.BEGIN) {
                            State = StateCode.Host__Options;
                            }
                        else {
							Pop ();
                            Represent = true;
                            }
                        break;
                    case StateCode.Host__Options: 
                        if (Token == TokenType.END) {
                            Pop();
                            break;
                            }

						// Parser transition for OPTIONS $$$$$
                        else if (Token == TokenType.LABEL) {
							Goedel.Tool.DNSConfig.Host Current_Cast = (Goedel.Tool.DNSConfig.Host)Current;
                            Goedel.Tool.DNSConfig.DNSConfigType LabelType = _Reserved (Text);
							switch (LabelType) {
								case Goedel.Tool.DNSConfig.DNSConfigType.TXT : {

									// TXT  TXT
									Current_Cast.TXT.Add (NewTXT ());
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Port : {

									// Port  Port
									Current_Cast.Port = NewPort ();
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Priority : {

									// Priority  Priority
									Current_Cast.Priority = NewPriority ();
									break;
									}
								case Goedel.Tool.DNSConfig.DNSConfigType.Weight : {

									// Weight  Weight
									Current_Cast.Weight = NewWeight ();
									break;
									}
								default : {
									throw new Expected("Parser Error Expected [TXT Port Priority Weight ]");
									}
								}
							}
                        break;

                    case StateCode.TXT_Start:
                        if (Token == TokenType.STRING) {
                            Goedel.Tool.DNSConfig.TXT Current_Cast = (Goedel.Tool.DNSConfig.TXT)Current;
                            Current_Cast.Text = Text;
                            State = StateCode.TXT__Text;
                            break;
                            }
                        throw new Expected("Expected String");

                    case StateCode.TXT__Text:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Port_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.Port Current_Cast = (Goedel.Tool.DNSConfig.Port)Current;
                            Current_Cast.Value = Convert.ToInt32(Text);
                            State = StateCode.Port__Value;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Port__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Priority_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.Priority Current_Cast = (Goedel.Tool.DNSConfig.Priority)Current;
                            Current_Cast.Value = Convert.ToInt32(Text);
                            State = StateCode.Priority__Value;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Priority__Value:
                        Pop ();
                        Represent = true; 
                        break;
                    case StateCode.Weight_Start:
                        if (Token == TokenType.INTEGER) {
                            Goedel.Tool.DNSConfig.Weight Current_Cast = (Goedel.Tool.DNSConfig.Weight)Current;
                            Current_Cast.Value = Convert.ToInt32(Text);
                            State = StateCode.Weight__Value;
                            break;
                            }
                        throw new Expected("Expected Integer");

                    case StateCode.Weight__Value:
                        Pop ();
                        Represent = true; 
                        break;

                    default: {
                        throw new UnreachableCode();
						}
                    }
                }
            }
        }
	}


