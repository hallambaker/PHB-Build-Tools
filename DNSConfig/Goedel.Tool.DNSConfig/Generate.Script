#script 1.0
#license MITLicense
#pclass Goedel.Tool.DNSConfig Generate

#method GenerateZone DNSConfig DNSConfig
#% DNSConfig.Init();

#call GenerateOptions DNSConfig

#call GenerateLocal DNSConfig

#foreach (var Domain in DNSConfig.Domains) 
#call GenerateDomain Domain
#end foreach

#end method

#method GenerateOptions DNSConfig DNSConfig
## PATH=/etc/bind/named.conf.options 

options {
        directory "/var/cache/bind";
        recursion no;
        allow-transfer { none; };
        dnssec-validation auto;
        auth-nxdomain no;    ## conform to RFC1035
        listen-on-v6 { any; };
};

#foreach (var Domain in DNSConfig.Domains) 

#end foreach

#end method

#method GenerateLocal DNSConfig DNSConfig
## PATH=/etc/bind/named.conf.local

#foreach (var Domain in DNSConfig.Domains) 
zone "#{Domain.Id}" {
    type master;
    file "/etc/bind/zones/db.#{Domain.Id}";
};

#end foreach

#end method


#method GenerateDomain Domain Domain
#% var DNS = Domain.DNS;
#% var Web = Domain.Web;
; PATH=/etc/bind/zones/db.#{Domain.Id}
; 
; DNS Zone file for #{Domain.Id} using DNS setup #{DNS.Id}
;
; This file is automatically generated CHANGES WILL BE OVERWRITTEN!
;
$TTL #{DNS.TTL.DefaultedTime}
#{Domain.Id}.      IN      SOA     #{Domain.DNS.Master.Id}.#{Domain.Id}. #{Domain.DNS.Contact}. (
                        #{DNS.Serial}       ; serial, todays date + todays serial #
                        #{DNS.Refresh.DefaultedTime}              ; refresh, seconds
                        #{DNS.Retry.DefaultedTime}              ; retry, seconds
                        #{DNS.Expire.DefaultedTime}              ; expire, seconds
                        #{DNS.TTL.DefaultedTime} )            ; minimum, seconds

; Additional name servers
#foreach (var Authoritative in Domain.DNS.Authoritative)
#{Domain.Id}.     IN      NS      #{Authoritative.Id}.#{Domain.Id}.
#{Domain.MakeAddress(Authoritative.Machine, Authoritative.Id, Domain.Id)} 
#end foreach


#foreach (var CAA in DNS.CAA) 
#{Domain.Id}.    IN     CAA 0 #{CAA.Tag} "#{CAA.Value}"
#end foreach

; Hardcoded A records
#foreach (var Address in Domain.Address)
#{Domain.MakeAddress(Address.Machine, Address.Id)}
#if (Address.SMTP != null) 
#{Address.Id}.        IN      TXT    "v=spf1 #{Address.Data} ?all"  
#end if
#end foreach

#!; For now, forward all mail to a forwarder on the authoritative


#if (Domain.Email.MX.Count >0)
; explicit mail
#foreach (var MX in Domain.Email.MX)
#{Domain.Id}.       IN      MX       #{MX.Priority} #{MX.Id}.
#end foreach
#foreach (var SPF in Domain.Email.SPF)
#{Domain.Id}. TXT "#{SPF.Value}"
#end foreach
#else
; default mail
#foreach (var MX in DNS.MX)
#{Domain.Id}.       IN      MX       #{MX.Priority} #{MX.Id}.
#end foreach
#foreach (var SPF in DNS.SPF)
#{Domain.Id}. TXT "#{SPF.Value}"
#end foreach
#end if


#if (Domain.Web != null)
# Web redirect to #{Domain.Web.Id} (is in host directory #{Domain.Web.Root})

#foreach (var Host in Domain.Web.Host)
; Host #{Host.Name} #{Host.IP} 
#{Domain.MakeAddress(Host.Machine, Domain.Id)} 
#if Domain.IsWildcard
; is wildcard
*.#{Domain.MakeAddress(Host.Machine, Domain.Id)} 
#end if
#{Domain.MakeAddress(Host.Machine, "www", Domain.Id)} 
#{Domain.MakeAddress(Host.Machine, "http", Domain.Id)}
#{Domain.MakeAddress(Host.Machine, "https", Domain.Id)} 
_http._tcp.#{Domain.Id}.  IN    SRV 1 1 80 #{Host.Name}.
_https._tcp.#{Domain.Id}.   IN   SRV 1 1 443 #{Host.Name}.
#end foreach
#end if

#foreach (var Service in Domain.Service)
; Service records for #{Service.Name}
#foreach (var Host in Service.Host) 
#{Domain.MakeAddress(Host.Machine, Service.Name, Domain.Id)} 
_#{Service.Name}._tcp.#{Domain.Id}. SRV #{Host.Priority.Value} #{Host.Weight.Value} #{Host.Port.Value} #{Host.Id}.
#foreach (var TXT in Host.TXT) 
_#{Service.Name}._tcp.#{Domain.Id}. TXT "#{TXT.Text}"
#end foreach
#end foreach
#end foreach

; handles
#foreach (var Handle in Domain.Handle)
_atproto.#{Handle.Id}. IN TXT "#{Handle.Value}"
#end foreach

#!; spf 
#!#foreach (var SPF in Domain.SPF)
#!#{Domain.Id}. TXT #{SPF.Value}"
#!#end foreach

#end method

#method GenerateAdressRecords DNSConfig DNSConfig
#foreach (var Machine in DNSConfig.Machines)
## Machine #{Machine.Id} #{Machine.Data}

#foreach (var Record in Machine.Records_A)
#{Record.Canonical()}
#end foreach
#foreach (var Record in Machine.Records_AAAA)
#{Record.Canonical()}
#end foreach


#end foreach
#end method


#end pclass
