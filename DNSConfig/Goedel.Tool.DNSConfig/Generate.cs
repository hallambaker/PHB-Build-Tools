// Script Syntax Version:  1.0

//  Copyright Â©  2017 by 
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//  
//  
using System;
using System.IO;
using System.Collections.Generic;
using Goedel.Registry;
namespace Goedel.Tool.DNSConfig {
	/// <summary>A Goedel script.</summary>
	public partial class Generate : global::Goedel.Registry.Script {
		/// <summary>Default constructor.</summary>
		public Generate () : base () {
			}
		/// <summary>Constructor with output stream.</summary>
		/// <param name="Output">The output stream</param>
		public Generate (TextWriter Output) : base (Output) {
			}

		

		//
		// GenerateZone
		//
		public void GenerateZone (DNSConfig DNSConfig) {
			 DNSConfig.Init();
			_Output.Write ("\n{0}", _Indent);
			GenerateOptions (DNSConfig);
			_Output.Write ("\n{0}", _Indent);
			GenerateLocal (DNSConfig);
			_Output.Write ("\n{0}", _Indent);
			foreach  (var Domain in DNSConfig.Domains)  {
				GenerateDomain (Domain);
				}
			_Output.Write ("\n{0}", _Indent);
			}
		

		//
		// GenerateOptions
		//
		public void GenerateOptions (DNSConfig DNSConfig) {
			_Output.Write ("# PATH=/etc/bind/named.conf.options \n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("options {{\n{0}", _Indent);
			_Output.Write ("        directory \"/var/cache/bind\";\n{0}", _Indent);
			_Output.Write ("        recursion no;\n{0}", _Indent);
			_Output.Write ("        allow-transfer {{ none; }};\n{0}", _Indent);
			_Output.Write ("        dnssec-validation auto;\n{0}", _Indent);
			_Output.Write ("        auth-nxdomain no;    # conform to RFC1035\n{0}", _Indent);
			_Output.Write ("        listen-on-v6 {{ any; }};\n{0}", _Indent);
			_Output.Write ("}};\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			foreach  (var Domain in DNSConfig.Domains)  {
				_Output.Write ("\n{0}", _Indent);
				}
			_Output.Write ("\n{0}", _Indent);
			}
		

		//
		// GenerateLocal
		//
		public void GenerateLocal (DNSConfig DNSConfig) {
			_Output.Write ("# PATH=/etc/bind/named.conf.local\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			foreach  (var Domain in DNSConfig.Domains)  {
				_Output.Write ("zone \"{1}\" {{\n{0}", _Indent, Domain.Id);
				_Output.Write ("    type master;\n{0}", _Indent);
				_Output.Write ("    file \"/etc/bind/zones/db.{1}\";\n{0}", _Indent, Domain.Id);
				_Output.Write ("}};\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				}
			_Output.Write ("\n{0}", _Indent);
			}
		

		//
		// GenerateDomain
		//
		public void GenerateDomain (Domain Domain) {
			 var DNS = Domain.DNS;
			 var Web = Domain.Web;
			_Output.Write ("; PATH=/etc/bind/zones/db.{1}\n{0}", _Indent, Domain.Id);
			_Output.Write ("; \n{0}", _Indent);
			_Output.Write ("; DNS Zone file for {1} using DNS setup {2}\n{0}", _Indent, Domain.Id, DNS.Id);
			_Output.Write (";\n{0}", _Indent);
			_Output.Write ("; This file is automatically generated CHANGES WILL BE OVERWRITTEN!\n{0}", _Indent);
			_Output.Write (";\n{0}", _Indent);
			_Output.Write ("$TTL {1}\n{0}", _Indent, DNS.TTL.DefaultedTime);
			_Output.Write ("{1}.      IN      SOA     {2}.{3}. {4}. (\n{0}", _Indent, Domain.Id, Domain.DNS.Master.Id, Domain.Id, Domain.DNS.Contact);
			_Output.Write ("                        {1}       ; serial, todays date + todays serial \n{0}", _Indent, DNS.Serial);
			_Output.Write ("                        {1}              ; refresh, seconds\n{0}", _Indent, DNS.Refresh.DefaultedTime);
			_Output.Write ("                        {1}              ; retry, seconds\n{0}", _Indent, DNS.Retry.DefaultedTime);
			_Output.Write ("                        {1}              ; expire, seconds\n{0}", _Indent, DNS.Expire.DefaultedTime);
			_Output.Write ("                        {1} )            ; minimum, seconds\n{0}", _Indent, DNS.TTL.DefaultedTime);
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("; Additional name servers\n{0}", _Indent);
			foreach  (var Authoritative in Domain.DNS.Authoritative) {
				_Output.Write ("{1}.     IN      NS      {2}.{3}.\n{0}", _Indent, Domain.Id, Authoritative.Id, Domain.Id);
				_Output.Write ("{1} \n{0}", _Indent, Domain.MakeAddress(Authoritative.Machine, Authoritative.Id, Domain.Id));
				}
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			foreach  (var CAA in DNS.CAA)  {
				_Output.Write ("{1}.    IN     CAA 0 {2} \"{3}\"\n{0}", _Indent, Domain.Id, CAA.Tag, CAA.Value);
				}
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("; Hardcoded A records\n{0}", _Indent);
			foreach  (var Address in Domain.Address) {
				_Output.Write ("{1}\n{0}", _Indent, Domain.MakeAddress(Address.Machine, Address.Id));
				_Output.Write ("\n{0}", _Indent);
				if (  (Address.SMTP != null)  ) {
					_Output.Write ("{1}.        IN      TXT    \"v=spf1 {2} ?all\"  \n{0}", _Indent, Address.Id, Address.Data);
					}
				}
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("; For now, forward all mail to a forwarder on the authoritative\n{0}", _Indent);
			foreach  (var MX in DNS.MX) {
				_Output.Write ("{1}.       IN      MX       {2} {3}.\n{0}", _Indent, Domain.Id, MX.Priority, MX.Id);
				}
			_Output.Write ("\n{0}", _Indent);
			if (  (Domain.Web != null) ) {
				_Output.Write ("\n{0}", _Indent);
				foreach  (var Host in Domain.Web.Host) {
					_Output.Write ("; Host {1} {2} \n{0}", _Indent, Host.Name, Host.IP);
					_Output.Write ("{1} \n{0}", _Indent, Domain.MakeAddress(Host.Machine, Domain.Id));
					_Output.Write ("{1} \n{0}", _Indent, Domain.MakeAddress(Host.Machine, "www", Domain.Id));
					_Output.Write ("{1}\n{0}", _Indent, Domain.MakeAddress(Host.Machine, "http", Domain.Id));
					_Output.Write ("{1} \n{0}", _Indent, Domain.MakeAddress(Host.Machine, "https", Domain.Id));
					_Output.Write ("_http._tcp.{1}.  IN    SRV 1 1 80 {2}.\n{0}", _Indent, Domain.Id, Host.Name);
					_Output.Write ("_https._tcp.{1}.   IN   SRV 1 1 443 {2}.\n{0}", _Indent, Domain.Id, Host.Name);
					}
				}
			_Output.Write ("\n{0}", _Indent);
			foreach  (var Service in Domain.Service) {
				_Output.Write ("; Service records for {1}\n{0}", _Indent, Service.Name);
				foreach  (var Host in Service.Host)  {
					_Output.Write ("{1} \n{0}", _Indent, Domain.MakeAddress(Host.Machine, Service.Name, Domain.Id));
					_Output.Write ("_{1}._tcp.{2}. SRV {3} {4} {5} {6}.\n{0}", _Indent, Service.Name, Domain.Id, Host.Priority.Value, Host.Weight.Value, Host.Port.Value, Host.Id);
					foreach  (var TXT in Host.TXT)  {
						_Output.Write ("_{1}._tcp.{2}. TXT \"{3}\"\n{0}", _Indent, Service.Name, Domain.Id, TXT.Text);
						}
					}
				}
			_Output.Write ("\n{0}", _Indent);
			_Output.Write ("\n{0}", _Indent);
			}
		

		//
		// GenerateAdressRecords
		//
		public void GenerateAdressRecords (DNSConfig DNSConfig) {
			foreach  (var Machine in DNSConfig.Machines) {
				_Output.Write ("# Machine {1} {2}\n{0}", _Indent, Machine.Id, Machine.Data);
				_Output.Write ("\n{0}", _Indent);
				foreach  (var Record in Machine.Records_A) {
					_Output.Write ("{1}\n{0}", _Indent, Record.Canonical());
					}
				foreach  (var Record in Machine.Records_AAAA) {
					_Output.Write ("{1}\n{0}", _Indent, Record.Canonical());
					}
				_Output.Write ("\n{0}", _Indent);
				_Output.Write ("\n{0}", _Indent);
				}
			}
		}
	}
